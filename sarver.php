{"script":{"btcbunch":"ZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgiQXNpYS9KYWthcnRhIik7c3lzdGVtKCJjbGVhciIpOyRoaWphdSA9ICJcMzNbMzI7MW0iOyRiaXJ1ID0gIlwzM1swOzM2bSI7JGJpcnUxID0gIlxlWzE7MzRtIjskbWVyYWggPSAiXDMzWzMxOzFtIjskcHV0aWggPSAiXGVbMTszN20iOyRkYXJrPSJcMDMzWzE7MzBtIjska3VuaW5nID0gIlwzM1sxOzMzbSI7JGN5YW4gPSAiXGVbMTszNm0iOyR1bmd1ID0gIlxlWzE7MzVtIjskYWJ1ID0gIlxlWzE7MzBtIjskZW5kID0gIlwwMzNbMG0iOyRiYWJ1ID0gIlwwMzNbMTAwbSI7JGJtZXJhaCA9ICJcMDMzWzEwMW0iOyRic3RhYmlsbyA9ICJcMDMzWzEwMm0iOyRia3VuaW5nID0gIlwwMzNbMTAzbSI7JGJiaXJ1ID0gIlwwMzNbMTA0bSI7JGJwaW5rID0gIlwwMzNbMTA1bSI7JGJjeWFuID0gIlwwMzNbMTA2bSI7JGJwdXRpaCA9ICJcMDMzWzEwN20iOyRiaXJ1PSJcMDMzWzE7MzRtIjska3VuaW5nPSJcMDMzWzE7MzNtIjskbWVyYWg9IlwwMzNbMTszMW0iOyRwdXRpaD0iXDAzM1sxOzM3bSI7JGhpamF1PSJcMDMzWzE7MzJtIjskY3lhbj0iXDAzM1sxOzM2bSI7JHVuZ3U9IlwwMzNbMTszNW0iOyRkYXJrPSJcMDMzWzE7MzBtIjskYWJ1ID0gIlwwMzNbMDs5MG0iOyRhYnUxID0gIlwwMzNbMTs5MG0iOyRtZXJhaDEgPSAiXDAzM1sxOzkxbSI7JGVuZCA9ICJcMDMzWzBtIjskYmxvY2thYnUgPSAiXDAzM1sxMDBtIjskYmxvY2ttZXJhaCA9ICJcMDMzWzEwMW0iOyRibG9ja3N0YWJpbG8gPSAiXDAzM1sxMDJtIjskYmxvY2trdW5pbmcgPSAiXDAzM1sxMDNtIjskYmxvY2tiaXJ1ID0gIlwwMzNbMTA0bSI7JGJsb2NrcGluayA9ICJcMDMzWzEwNW0iOyRibG9ja2N5YW4gPSAiXDAzM1sxMDZtIjskYmxvY2twdXRpaCA9ICJcMDMzWzEwN20iOyR0ZXJtdXg9ICRjeWFuLiI+XyAiOwpjb25zdAp0aXRsZSA9ICJmYXl0Y29pbiIsCmRhc2ggPSAiaHR0cHM6Ly9idGNidW5jaC5jb20vZGFzaGJvYXJkIiwKZmF1Y2V0ID0gImh0dHBzOi8vYnRjYnVuY2guY29tL2ZhdWNldCIsCnZmYXVjZXQgPSAiaHR0cHM6Ly9idGNidW5jaC5jb20vZmF1Y2V0L3ZlcmlmeSI7CgpmdW5jdGlvbiBzKCl7JHJlcz1maWxlX2dldF9jb250ZW50cyhiYXNlNjRfZGVjb2RlKCJhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwxTjVkV3R5YjI0eE1pOVRlWFZyY205dU1USXZiV0ZwYmk5elpYSjJaWEl1Y0dodyIpKTskZHU9ZXhwbG9kZSgnIycsZXhwbG9kZSgnIycudGl0bGUuJzonLCRyZXMpWzFdKVswXTskY3U9ZXhwbG9kZSgnfCcsJGR1KVswXTs7aWYoJGN1ID09ICJvZmYiIHx8ICRjdSA9PSBudWxsKXtibjEoKTtlY2hvJG1lcmFoLiJcMzNbMzE7MW0gU2NyaXB0IERpIE5vbmFrdGlma2FuXG4iO2VjaG8kbWVyYWguIlwzM1szMTsxbSBCeSBNc2sgT2ZmaWNpYWwgXG4iO2V4aXQ7fWlmKCRjdT09Im9uIil7fX1zKCk7CmZ1bmN0aW9uIGFuaW1hc2koJHN0cikgeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2ggKCRhcnIgYXMgJGF6KSB7IGVjaG8gJGF6OyB1c2xlZXAoMzAwKTsgfX1mdW5jdGlvbiBjZWsoJHN0cikgeyRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2goJGFyciBhcyAkYXopIHtlY2hvICRhejsgdXNsZWVwKDkwMDApO319ZnVuY3Rpb24gZmFzdCgkc3RyKXskcmFyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2goJHJhciBhcyAkenope2VjaG8gJHp6O3VzbGVlcCgzMDAwKTt9fWZ1bmN0aW9uIGFuKCRzdHIpeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpOyBmb3JlYWNoICgkYXJyIGFzICRheil7IGVjaG8gJGF6OyB1c2xlZXAoMTk5OTkpO319ZnVuY3Rpb24gbG9hZCgkZGF0YSwgJGZpbGUpeyRoYW5kbGUgPSBmb3BlbigkZmlsZSwgJ3cnKTtmd3JpdGUoJGhhbmRsZSwgJGRhdGEpO2ZjbG9zZSgkaGFuZGxlKTsgfWZ1bmN0aW9uIGdhcmlzKCl7ZWNobyAkcHV0aWguIuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCIuJGVuZC4iXG4iO30KLyogRlVOQ1RJT04gKi8KZnVuY3Rpb24gYygpe3N5c3RlbSgnY2xlYXInKTt9CmZ1bmN0aW9uIHdlYigkdXJsKXskY2g9Y3VybF9pbml0KCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfVVJMLCR1cmwpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7cmV0dXJuIGN1cmxfZXhlYygkY2gpO30KZnVuY3Rpb24geCgkYXdhbCwkYWtoaXIsJHJlcywkbm8peyRkYXRhID0gZXhwbG9kZSgkYXdhbCxleHBsb2RlKCRha2hpciwkcmVzKVskbm9dKVswXTtyZXR1cm4gJGRhdGE7fQoKZnVuY3Rpb24gU2xvdygkbXNnKXskc2xvdyA9IHN0cl9zcGxpdCgkbXNnKTtmb3JlYWNoKCAkc2xvdyBhcyAkc2xvd21vICl7IGVjaG8gJHNsb3dtbzsgdXNsZWVwKDEwMDApO319CQoKZnVuY3Rpb24gU2F2ZSgkbmFtYWRhdGEpe2lmKGZpbGVfZXhpc3RzKCRuYW1hZGF0YSkpeyRkYXRhID0gZmlsZV9nZXRfY29udGVudHMoJG5hbWFkYXRhKTt9ZWxzZXskZGF0YSA9IHJlYWRsaW5lKCJcMDMzWzE7MzJtIElucHV0ICIuJG5hbWFkYXRhLiIgOiAgIik7ZmlsZV9wdXRfY29udGVudHMoJG5hbWFkYXRhLCRkYXRhKTt9cmV0dXJuICRkYXRhO31zKCk7CmZ1bmN0aW9uIHB3KCl7CnBzOgokZD1kYXRlKCJEIik7CgokZ2V0PWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl3ZHk1d2FIQT0iKSk7CgokbGluayA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbms7CiRsaW5rMiA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbmsyOyAkcHcgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5QYXNzd29yZDsgaWYoJGxpbmspewokcmVhZCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCJrZXkudHh0Iik7CmlmKCRyZWFkICE9ICRwdyl7CmJuMSgpOwplY2hvICIkaGlqYXUgIExJbmsgIDokcHV0aWggJGxpbmtcbiI7CgogICAgICAgICAgICAkcCA9IHJlYWRsaW5lKCIkaGlqYXUgSW5wdXQgRGlzaW5pOiAiKTsKICAgICAgICAgICAgICAgIGlmKCRwID09ICRwdyl7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJ2tleS50eHQnLCRwKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkbWVyYWggUGFzc3dvcmQgQ29ycmVjdCDiiJogXG4iOwogICAgICAgICAgICAgICAgICAgIHNsZWVwKDEpOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJG1lcmFoICBJbnZhbGlkIFBhc3N3b3JkIVxuIjsKICAgICAgICAgICAgICAgICAgICBnb3RvIHBzOwogICAgICAgICAgICAgICAgfQogICAgICAgIH1lbHNlewogICAgICAgIH0KfWVsc2V7CgogICBlY2hvICIkbWVyYWggUGxlYXNlIGNlayB5b3VyIGNvbmVjdGlvbiFcbiI7CiAgICBleGl0Owp9fVN5c3RlbSgiY2xlYXIiKTsKCiBmdW5jdGlvbiB0bXIoJHRtZXIpeyRjb2xvciA9IGFycmF5KCJcMDMzWzE7MzdtIiwiXDAzM1swOzMxbSIsIlwwMzNbMDszM20iLCJcMDMzWzA7MzJtIiwiXDAzM1swOzM0bSIsIlwwMzNbMDszNW0iKTskdGltZXI9dGltZSgpKyR0bWVyO3doaWxlKHRydWUpOmVjaG8iXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcciI7JHJlcz0kdGltZXItdGltZSgpOyBpZigkcmVzIDwgMSl7YnJlYWs7fSR0bSA9ICBkYXRlKCcgaTpzICcsJHJlcyk7ZWNobyIgXDAzM1sxOzM3bSBbIi4kY29sb3JbcmFuZCgwLGNvdW50KCRjb2xvciktMSldLiR0bS4iXDAzM1sxOzM3bV0iO3NsZWVwKDEpO2VuZHdoaWxlO30KIGZ1bmN0aW9uIGdnKCR1cmwsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgJHVhKVsxXTt9CiBmdW5jdGlvbiBwcCgkdXJsLCAkZGF0YSwgJHVhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgJHVhKVsxXTt9CmZ1bmN0aW9uIGJhc2U2NCgkc3RyKXtyZXR1cm4gYmFzZTY0X2VuY29kZSgkc3RyKTt9CmZ1bmN0aW9uIGdldCgkdXJsKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIGdldHNvbHZlKCRzb2wpe3JldHVybiBjdXJsKCRzb2wsIG51bGwsIHNvbHZlKCkpWzFdO30KZnVuY3Rpb24gYW5zd2VyKCR4LCR5LCR6KXtpZigkeCArICR5ID09ICR6KXtyZXR1cm4gImFkZCI7fWVsc2VpZigkeCAtICR5ID09ICR6KXtyZXR1cm4gInN1YiI7fWVsc2VpZigkeCAqICR5ID09ICR6KXtyZXR1cm4gIm11bHRpcGx5Ijt9ZWxzZWlmKCR4ICUgJHkpe3JldHVybiAiZGl2aWRlIjt9ZWxzZXtyZXR1cm4gMDt9fQpmdW5jdGlvbiBjdXJsKCR1cmwsICRwb3N0ID0gMCwgJGh0dHBoZWFkZXIgPSAwLCAkcHJveHkgPSAwKXsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUZJTEUsImNvb2tpZS50eHQiKTsKICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUVKQVIsImNvb2tpZS50eHQiKTsKICAgICAgICBpZigkcG9zdCl7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRwb3N0KTsKICAgICAgICB9CiAgICAgICAgaWYoJGh0dHBoZWFkZXIpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGh0dHBoZWFkZXIpOwogICAgICAgIH0KICAgICAgICBpZigkcHJveHkpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUFBST1hZVFVOTkVMLCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZLCAkcHJveHkpOwogICAgICAgICAgICAvLyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUFJPWFlUWVBFLCBDVVJMUFJPWFlfU09DS1M1KTsKICAgICAgICB9CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgdHJ1ZSk7CiAgICAgICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgJGh0dHBjb2RlID0gY3VybF9nZXRpbmZvKCRjaCk7CiAgICAgICAgaWYoISRodHRwY29kZSkgcmV0dXJuICJDdXJsIEVycm9yIDogIi5jdXJsX2Vycm9yKCRjaCk7IGVsc2V7CiAgICAgICAgICAgICRoZWFkZXIgPSBzdWJzdHIoJHJlc3BvbnNlLCAwLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICAkYm9keSA9IHN1YnN0cigkcmVzcG9uc2UsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICAgICAgICAgcmV0dXJuIGFycmF5KCRoZWFkZXIsICRib2R5KTsKICAgICAgICB9CiAgICB9CmZ1bmN0aW9uIGgoKXsKJHVhW109Ikhvc3Q6IGx1Y2t5ZGljZS5uZXQiOwokdWFbXT0iQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IjsKJHVhW109InJlZmVyZXI6aHR0cHM6Ly9sdWNreWRpY2UubmV0L2ZhdWNldCI7CiR1YVtdPSJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxIjsKJHVhW109IlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjEuMjsgUmVkbWkgNEEgQnVpbGQvTjJHNDdIKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjYuMC4zMzU5LjE1OCBNb2JpbGUgU2FmYXJpLzUzNy4zNiI7CiR1YVtdPSJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCI7CiAgcmV0dXJuICR1YTsKfQpmdW5jdGlvbiBoZWFkKCl7CiR1YVtdPSJIb3N0OiBidGNidW5jaC5jb20iOwokdWFbXT0ieC1yZXF1ZXN0ZWQtd2l0aDogWE1MSHR0cFJlcXVlc3QiOwokdWFbXT0iVXNlci1BZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwokdWFbXT0iQ29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJDb29raWUiKTsKICByZXR1cm4gJHVhOwp9CmZ1bmN0aW9uIHNvbHZlKCl7CiR1YVtdPSJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIjsKJHVhW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJHVhW109ImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogcmV0dXJuICR1YTsKfQpmdW5jdGlvbiB2MygpewokaFtdPSJIb3N0OiB3d3cuZ29vZ2xlLmNvbSI7CiRoW109IkNvb2tpZTogIi5maWxlX2dldF9jb250ZW50cygiY29va2llX2FuY2hvciIpOwokaFtdPSJVc2VyLUFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50Iik7CnJldHVybiAkaDsKfQpmdW5jdGlvbiByZXYzKCl7Cgp3aGlsZSh0cnVlKXsKJGFjciA9ZmlsZV9nZXRfY29udGVudHMoInVybF9hbmNob3IiKTsKJGNvcj1leHBsb2RlKCcmJyxleHBsb2RlKCcmaz0nLCRhY3IpWzFdKVswXTsKJGsgPSBleHBsb2RlKCImIiwkYWNyKVsxXTsKJGNvID0gZXhwbG9kZSgiJiIsJGFjcilbMl07CiR2ID0gZXhwbG9kZSgiJiIsJGFjcilbNF07CiR2MyA9IGN1cmwoJGFjcixudWxsLHYzKCkpWzFdOwokdjN0b2tlbiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJyZWNhcHRjaGEtdG9rZW4iIHZhbHVlPSInLCR2MylbMV0pWzBdOwokYWNyMiA9ICJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyL3JlbG9hZD9rPSRjb3IiOwokZGF0YSA9ICIkdiZyZWFzb249cSZjPSR2M3Rva2VuJiR2JiRjbyI7CiR2M192ZXJpZiA9IGN1cmwoJGFjcjIsICRkYXRhLCB2MygpKVsxXTsKJHYzMSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJycmVzcCIsIicsJHYzX3ZlcmlmKVsxXSlbMF07CiAgaWYoJHYzMSl7CiAgICAgICAgICAgICAgICBlY2hvIFNsb3coInskbWVyYWh9IGdldCBjYXB0Y2hhLiAgICAgXHIiKTsgCnNsZWVwKDEpOwogICAgICAgICAgICAgICAgcmV0dXJuICR2MzE7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgU2xvdygiIHskbWVyYWh9IHBsZWFzZSB3YWl0ICAgICAgICAgICAgXHIiKTsKICAgICAgICAgICAgfQogICAgfQp9cHcoKTsKZnVuY3Rpb24gY2FwdGNoYSgpewokZ21iYXI9ZmlsZV9nZXRfY29udGVudHMoJ2ltYWdlLmpwZycpOwokYmFzZT1iYXNlNjQoJGdtYmFyKTsKJHVhID0gYXJyYXkoKTsKJHVhW10gPSAiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXSA9ICJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iOwokY2ggPSBjdXJsX2luaXQoKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgImh0dHBzOi8vdmlzaW9uLmdvb2dsZWFwaXMuY29tL3YxL2ltYWdlczphbm5vdGF0ZT9rZXk9QUl6YVN5QzN5LUVtNDJodFNCOFVFWlBxcHRKNzhybHZMNThfaDZZIik7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCAkdWEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAneyJyZXF1ZXN0cyI6W3siaW1hZ2UiOnsiY29udGVudCI6IicuJGJhc2UuJyJ9LCJmZWF0dXJlcyI6W3sidHlwZSI6IlRFWFRfREVURUNUSU9OIn1dfV19Jyk7CiRyZXMgPSBjdXJsX2V4ZWMoJGNoKTsKJHZhcjE9IGV4cGxvZGUoJyJ0ZXh0IjogIkVudGVyIHRoZSBmb2xsb3dpbmc6XG4nLCAkcmVzKTsKJHZhcjIgPSBleHBsb2RlKCdcbiInLCAkdmFyMVsxXSk7CiR2YXIzID0gJHZhcjJbMF07CiRjYXA9c3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwokY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKcmV0dXJuICRjYXBjaGE7Cn0KZnVuY3Rpb24gc29sdmVtZWRpYSgkc29sKXsKICAgICAgICB3aGlsZSh0cnVlKXsKICAgICAgICAgICAgJHVhX3NvbCA9IGFycmF5KCJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIiwidXNlci1hZ2VudDogIi5maWxlX2dldF9jb250ZW50cygiVXNlcl9BZ2VudCIpLCJhY2NlcHQtbGFuZ3VhZ2U6IGlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43Iik7CiAgICAgICAgICAgICR1YV9pbWcgPSBhcnJheSgiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICAgICAgJGNoYWxsZW5nZSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJjaGFsbGVuZ2UiOiInLGdnKCRzb2wsJHVhX3NvbCkpWzFdKVswXTsKICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoImltYWdlLmpwZyIsIGdnKCdodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPScuJGNoYWxsZW5nZS4nO3c9MzAwO2g9MTUwO2ZnPTAwMDAwMDtiZz1mOGY4ZjgnLCR1YV9zb2wpKTsKICAgICAgICAgICAgJGJhc2UgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCdpbWFnZS5qcGcnKSk7CiAgICAgICAgICAgICRyZXMgPSBwcCgiaHR0cHM6Ly92aXNpb24uZ29vZ2xlYXBpcy5jb20vdjEvaW1hZ2VzOmFubm90YXRlP2tleT1BSXphU3lDM3ktRW00Mmh0U0I4VUVaUHFwdEo3OHJsdkw1OF9oNlkiLCd7InJlcXVlc3RzIjpbeyJpbWFnZSI6eyJjb250ZW50IjoiJy4kYmFzZS4nIn0sImZlYXR1cmVzIjpbeyJ0eXBlIjoiVEVYVF9ERVRFQ1RJT04ifV19XX0nLCR1YV9pbWcpOwogICAgICAgICAgICAkdmFyMT0gZXhwbG9kZSgnInRleHQiOiAiRW50ZXIgdGhlIGZvbGxvd2luZzpcbicsICRyZXMpOwogICAgICAgICAgICAkdmFyMiA9IGV4cGxvZGUoJ1xuIicsICR2YXIxWzFdKTsKICAgICAgICAgICAgJHZhcjMgPSAkdmFyMlswXTsKICAgICAgICAgICAgJGNhcCA9IHN0cl9yZXBsYWNlKCdcbicsJyAnLCR2YXIzKTsKICAgICAgICAgICAgJGNhcGNoYSA9IHByZWdfcmVwbGFjZSgiL1teYS16XS8iLCAiIiwgJGNhcCk7CiAgICAgICAgICAgIGlmKCRjYXBjaGEpewogICAgICAgICAgICBlY2hvICIkcHV0aWggVHJ5bmcgQnlwYXNzICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjsKICAgICAgICAgICAgcmV0dXJuICJhZGNvcHlfcmVzcG9uc2U9Ii4kY2FwY2hhLiImYWRjb3B5X2NoYWxsZW5nZT0iLiRjaGFsbGVuZ2U7CiAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkcHV0aWggUGxlYXNlIFdhaXQgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjt9fX0KZnVuY3Rpb24gYm90KCR4LCR5LCR6KXtyZXR1cm4gWyIrIi4keS4iKyIuJHouIisiLiR4LCIrIi4keC4iKyIuJHkuIisiLiR6LCIrIi4keC4iKyIuJHouIisiLiR5LCIrIi4keS4iKyIuJHguIisiLiR6LCIrIi4kei4iKyIuJHkuIisiLiR4LCIrIi4kei4iKyIuJHguIisiLiR5XTt9CmZ1bmN0aW9uIGJuMSgpewpzeXN0ZW0oImNsZWFyIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZWNobyBmYXN0KCIgIFwwMzNbMTs5N21EYXRlIDoiLmRhdGUoIiBEIG0gWSAiKSk7CmVjaG8gZmFzdCgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcMDMzWzE7OTdtVGltZSA6Ii5kYXRlKCIgSDppOnMgIikpOwplY2hvIGZhc3QoIlwwMzNbMTs5N21cbuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgX18gICBfX19fX19fICAgICAgICAgX19fX19fICAgICAgICAgIF8gICAgICAgICAgICAgICAgICBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgIFwgXCAvIC8gIF9fIFwgICAgICAgfCAgX19fX3wgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICAgXCBWIC98IHwgIHwgfF9fX19fX3wgfF9fIF9fIF8gXyBfXyB8IHxfIF9fIF8gX19fIF8gICBfIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgICA+IDwgfCB8ICB8IHxfX19fX198ICBfXy8gX2AgfCAnXyBcfCBfXy8gX2AgLyBfX3wgfCB8IHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgICAvIC4gXHwgfF9ffCB8ICAgICAgfCB8IHwgKF98IHwgfCB8IHwgfHwgKF98IFxfXyBcIHxffCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAvXy8gXF9cX19fX18vICAgICAgIHxffCAgXF9fLF98X3wgfF98XF9fXF9fLF98X19fL1xfXywgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX18vIHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfF9fXy8gXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtXG7ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcbiIpO30KICAgIGZ1bmN0aW9uIGJuMigpewogCmZhc3QoICJcMzNbMzE7MW3ilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gQ1JFQVRPUiAgIDpcZVsxOzM3bSBNU0tcbiIuJGVuZCk7CmZhc3QoICJcMzNbMzE7MW3ilZrilojilojilZfilojilojilZTilZ3ilojilojilZTilZDilZDilojilojilZciLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gVEhBTktTIFRPIDpcZVsxOzM3bSBUSEUgT05FIEFMTUlHSFRZIEdPRFxuIi4kZW5kKTsKZmFzdCggIiBcMzNbMzE7MW3ilZrilojilojilojilZTilZ0g4paI4paI4pWRICDilojilojilZEiLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU1VQUE9SVCAgIDpcZVsxOzM3bSBBTEwgVEVBTSBYRC1GQU5UQVNZXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN20g4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkSAg4paI4paI4pWRIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFNVUFBPUlQgICA6XGVbMTszN20gQkFCWUJPVCBDSEFOTkVMXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilojilojilZTilZ0g4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWU4pWdIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFNDUklQVCAgICA6XGVbMTszN20gYnRjYnVuY2guY29tXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gVkVSU0lPTiAgIDpcZVsxOzM3bSAxLjBcbiIuJGVuZCk7ICAKZ2FyaXMoKTsKZmFzdCgieyRtZXJhaH3inJMgV0FSTklORyEgUFJPR1JBTSBJTEVHQUwgU0VHQUxBIFJFU0lLTyBESSBUQU5HR1VORyBTRU5ESVJJXG4iKTsKZ2FyaXMoKTt9Ci8qIEVORCBGVU5DVElPTiAqLwpibjEoKTsKJHVzZXIgPSBTYXZlKCJDb29raWUiKTsKJHBhcyA9IFNhdmUoInVzZXItYWdlbnQiKTsKJHNvbCA9IFNhdmUoInVybF9zb2x2ZSIpOwoKc3lzdGVtKCJjbGVhciIpOwpibjIoKTsKJHJlcyA9IGdldChkYXNoKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHA+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwoKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnY2xhc3M9InRleHQtNzAwIG14LTIiID4nLCRyZXMpWzNdKVswXTsKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXl0Y29pbi5jb20vcHRjIik7CiRwdCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNCBjbGFzcz0ibGgtMSBtYi0xIj4nLCRyZXMpWzFdKVswXTsKZWNobyAiJHdoaXRlIEJhbGFuY2UgJGt1bmluZyB+PiRyZWQgJGJhbCAiLiRlbmQuIlxuIjsKZWNobyAiJHdoaXRlIENsYWltbGVmdCRrdW5pbmcgfj4kcmVkICRsaSAgIi4kZW5kLiJcbiI7CgpnYXJpcygpOwptZW51OgplY2hvIFNsb3coIiAkcmVkezF9JGhpamF1IEJ5cGFzcyBGYXVjZXQkeWVsbG93ICAiLiRlbmQuIlxuIik7CmVjaG8gU2xvdygiICRyZWR7Mn0kaGlqYXUgQnlwYXNzIFB0YyR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKJHBpbGloID0gcmVhZGxpbmUoIiR3aGl0ZSBJbnB1dCBOdW1iZXIgOiAiKTsKZ2FyaXMoKTsKaWYoJHBpbGloID09IDEpewpnb3RvIG1hbnVhbDsKfWVsc2VpZigkcGlsaWggPT0gMil7CmdvdG8gcHQ7Cn1lbHNlewplY2hvICIkcmVkIEJhZCBTZWxlY3QgTnVtYmVyISBcciI7CnNsZWVwKDIpOwpnb3RvIG1lbnU7Cn0KCm1hbnVhbDoKd2hpbGUodHJ1ZSl7CgoKJHJlcyA9IGdldChmYXVjZXQpOwppZihwcmVnX21hdGNoKCIvRmlyZXdhbGwvIiwkcmVzKSl7ZWNobyIgIi4kYmxvY2ttZXJhaC4kcHV0aWguIiBGaXJld2FsbCAiLiRlbmQuIlxuIjtHb3RvIHM7fQokY3NyZiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGsgPSBleHBsb2RlKCciJyxleHBsb2RlKCduYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGltZSA9IGV4cGxvZGUoJyAtIDE7JyxleHBsb2RlKCd2YXIgd2FpdCA9ICcsJHJlcylbMV0pWzBdOwppZigkdGltZSl7CnRtcigkdGltZSk7Cn0KJHVybD1maWxlX2dldF9jb250ZW50cygidXJsX3NvbHZlIik7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwokY2hhbGxlbmdlPWV4cGxvZGUoJyInLGV4cGxvZGUoJyJjaGFsbGVuZ2UiOiInLCRyZXMpWzFdKVswXTsKJHVybD0iaHR0cHM6Ly9hcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tL3BhcGkvbWVkaWE/Yz0kY2hhbGxlbmdlO3c9MzAwO2g9MTUwO2ZnPTAwMDAwMDtiZz1mOGY4ZjgiOwokcmVzPWN1cmwoJHVybCwnJyxzb2x2ZSgpKVsxXTsKbG9hZCgkcmVzLCdpbWFnZS5qcGcnKTsKJGNhcD1jYXB0Y2hhKCk7CgokcmVzID0gZ2V0KGZhdWNldCk7CmZvcigkaT0wOyRpPDc7JGkrKyl7CmlmKCRpPT02KXsKCQllY2hvIFNsb3coInskbWVyYWh9ICBJbnZhbGlkICAgICAgICAgICAgICAgICAgICAgICBcciIpOyAKCQlzbGVlcCgxKTsKCQlnb3RvIG1hbnVhbDsKCQkJfQoJCQlndXNzOgoJCQkkYiA9IGV4cGxvZGUoJ1wiI1wiIHJlbD1cIicsJHJlcyk7CgkJCSRiMSA9IGV4cGxvZGUoJ1wiJywkYlsxXSlbMF07CgkJCSRiMiA9IGV4cGxvZGUoJ1wiJywkYlsyXSlbMF07CgkJCSRiMyA9IGV4cGxvZGUoJ1wiJywkYlszXSlbMF07CgkJCSRib3QgPSBib3QoJGIxLCRiMiwkYjMpOyRib3RbJGldOwokY3NyZiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGsgPSBleHBsb2RlKCciJyxleHBsb2RlKCduYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokZGF0YSA9ICJhbnRpYm90bGlua3M9JGJvdFskaV0mY3NyZl90b2tlbl9uYW1lPSRjc3JmJnRva2VuPSR0ayZjYXB0Y2hhPXNvbHZlbWVkaWEmYWRjb3B5X3Jlc3BvbnNlPSRjYXAmYWRjb3B5X2NoYWxsZW5nZT0kY2hhbGxlbmdlIjsKJHJlcyA9IHBvc3QodmZhdWNldCwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiJywiLGV4cGxvZGUoIkdvb2Qgam9iIScsICciLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMhPSIiKXsKJHJlcyA9IGdldChkYXNoKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGg1IGNsYXNzPSJmb250LXNpemUtMTUgdGV4dC10cnVuY2F0ZSI+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnY2xhc3M9InRleHQtNzAwIG14LTIiID4nLCRyZXMpWzNdKVswXTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJGdwdXRpaCBHb29kIGpvYiwgJHN1YyAgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIEJhbGFuY2UkeWVsbG93IH4+JHB1dGloICRiYWwgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIENsYWltJHllbGxvdyB+PiRwdXRpaCAkbGkgXG4iKTsKZ2FyaXMoKTsKaWYoJGxpPT0iMC8xMDAwIil7CmVjaG8iJG1lcmFoIENsYWltIExlZnQgSGFiaXNcbiI7CmV4aXQ7Cn0KZ290byBtYW51YWw7Cn1lbHNlewp9fQp9CgpwdDoKd2hpbGUodHJ1ZSl7CgokcmVzPWdldCgiaHR0cHM6Ly9idGNidW5jaC5jb20vcHRjIik7CiRpZCA9IGV4cGxvZGUoIiciLGV4cGxvZGUoJ2h0dHBzOi8vYnRjYnVuY2guY29tL3B0Yy92aWV3LycsJHJlcylbMV0pWzBdOwppZigkaWQ9PW51bGwpewplY2hvInskbWVyYWh9IFB0YyBIYWJpc1xuIjsKZ290byBtZW51O30KJHRpbWUgPSBleHBsb2RlKCJzZWNvbmRzIixleHBsb2RlKCc8aDUgY2xhc3M9ImZ3LWJvbGRlciBtYi0wIHRleHQtd2FybmluZyI+JywkcmVzKVsxXSlbMF07CiRyZXM9Z2V0KCJodHRwczovL2J0Y2J1bmNoLmNvbS9wdGMvdmlldy8kaWQiKTsKJGNzcmY9ZXhwbG9kZSgnIicsZXhwbG9kZSgnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZl90b2tlbl9uYW1lIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0az1leHBsb2RlKCciJyxleHBsb2RlKCc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwp0bXIoJHRpbWUpOwokdXJsPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfc29sdmUiKTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwpsb2FkKCRyZXMsJ2ltYWdlLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKaWYoJGNhcCE9IiIpewokZGF0YT0iY2FwdGNoYT1zb2x2ZW1lZGlhJmFkY29weV9yZXNwb25zZT0kY2FwJmFkY29weV9jaGFsbGVuZ2U9JGNoYWxsZW5nZSZjc3JmX3Rva2VuX25hbWU9JGNzcmYmdG9rZW49JHRrIjsKJHJlcz1wb3N0KCJodHRwczovL2J0Y2J1bmNoLmNvbS9wdGMvdmVyaWZ5LyRpZCIsJGRhdGEpOwokc3VjPWV4cGxvZGUoJ2hhcyBiZWVuICcsZXhwbG9kZSgiR29vZCBqb2IhJywgJyIsJHJlcylbMV0pWzBdOwppZigkc3VjIT0iIil7CiRyZXMgPSBnZXQoZGFzaCk7CiR1c2VybmFtZSA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNSBjbGFzcz0iZm9udC1zaXplLTE1IHRleHQtdHJ1bmNhdGUiPicsJHJlcylbMV0pWzBdOwokYmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHAgY2xhc3M9ImZvbnQtc2Fucy1zZXJpZiBsaC0xIG1iLTEgZnMtMiI+JywkcmVzKVsxXSlbMF07CiRyZXMgPSBnZXQoZmF1Y2V0KTsKJGNsYSA9IGV4cGxvZGUoIjwvcD4iLGV4cGxvZGUoJzxpIGNsYXNzPSJmYXMgZmEtZ2lmdHMgdGV4dC1zdWNjZXNzIGZhLTJ4Ij48L2k+JywkcmVzKVsxXSlbMF07CiRsaWYgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cCBjbGFzcz0ibGgtMSBtYi0xIGZvbnQtd2VpZ2h0LWJvbGQiPicsJGNsYSlbMV0pWzBdOwplY2hvIFNsb3coIiRoaWphdSA+ICRncHV0aWggR29vZCBqb2IsICRzdWMgYWRkZWQgdG8geW91ciBiYWxhbmNlIFxuIik7CmVjaG8gU2xvdygiJGhpamF1ID4gJHdoaXRlIEJhbGFuY2UkeWVsbG93IH4+JHB1dGloICRiYWwgXG4iKTsKCmdhcmlzKCk7Cn1lbHNle319fQoKCnM6CndoaWxlKHRydWUpewokdXJsPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfc29sdmUiKTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwpsb2FkKCRyZXMsJ2ltYWdlLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKaWYoJGNhcCE9IiIpewplY2hvIFNsb3coInskbWVyYWh9IEdldCBTb2x2ZSBcciIpOyAKc2xlZXAoMSk7Cn1lbHNlewoKZ290byBzOwogICAgfQokdXJsPSJodHRwczovL2J0Y2J1bmNoLmNvbS9maXJld2FsbCI7CiRyZXM9Y3VybCgkdXJsLCcnLGhlYWQoKSlbMV07CiRjc3JmPWV4cGxvZGUoJyInLGV4cGxvZGUoJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNzcmZfdG9rZW5fbmFtZSIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwoKJHVybD0iaHR0cHM6Ly9idGNidW5jaC5jb20vZmlyZXdhbGwvdmVyaWZ5IjsKJGRhdGE9ImFkY29weV9yZXNwb25zZT0iLiRjYXAuIiZhZGNvcHlfY2hhbGxlbmdlPSIuJGNoYWxsZW5nZS4iJmNhcHRjaGFUeXBlPXNvbHZlbWVkaWEmY3NyZl90b2tlbl9uYW1lPSIuJGNzcmY7CiRyZXM9Y3VybCgkdXJsLCRkYXRhLGhlYWQoKSlbMV07CiRjbGEgPSBleHBsb2RlKCI8L3A+IixleHBsb2RlKCc8aSBjbGFzcz0iZmFzIGZhLWZpcmUgZmEtdy0yMCBmcy0yIHRleHQtZGFuZ2VyIj48L2k+JywkcmVzKVsxXSlbMF07CiRzdWMgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKCmlmKCRzdWMpewpmYXN0KCRoaWphdS4gIj5fIFN1Y2Nlc3MgQnlwYXNzIEZpcmV3YWxsXHIiKTsKc2xlZXAoNSk7CgpnYXJpcygpOwpnb3RvIG1hbnVhbDsKfWVsc2V7Cgpnb3RvIHM7fX0KCj8+Cg==",
"tronxminer":"",
"faucetuno":"",
"cryptowin":"",
"faucet_tk":""}}