{"script":{"blatcoin":"Y29uc3QKdGl0bGUgPSAiYmxhdGNvaW4iLApkYXNoID0gImh0dHBzOi8vYmxhdGNvaW4ubmV0LyIsCmZhdWNldCA9ICJodHRwczovL2JsYXRjb2luLm5ldC8iLAp2ZmF1Y2V0ID0gImh0dHBzOi8vYmxhdGNvaW4ubmV0L3N5c3RlbS9hamF4LnBocCI7CgpmdW5jdGlvbiBzKCl7JHJlcz1maWxlX2dldF9jb250ZW50cyhiYXNlNjRfZGVjb2RlKCJhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwxTjVkV3R5YjI0eE1pOVRlWFZyY205dU1USXZiV0ZwYmk5elpYSjJaWEl1Y0dodyIpKTskZHU9ZXhwbG9kZSgnIycsZXhwbG9kZSgnIycudGl0bGUuJzonLCRyZXMpWzFdKVswXTskY3U9ZXhwbG9kZSgnfCcsJGR1KVswXTs7aWYoJGN1ID09ICJvZmYiIHx8ICRjdSA9PSBudWxsKXtibjEoKTtlY2hvIG0uIiBTY3JpcHQgRGkgTm9uYWt0aWZrYW5cbiI7ZWNobyBtLiIgQnkgTXNrIE9mZmljaWFsIFxuIjtleGl0O31pZigkY3U9PSJvbiIpe319CmZ1bmN0aW9uIGFuaW1hc2koJHN0cikgeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2ggKCRhcnIgYXMgJGF6KSB7IGVjaG8gJGF6OyB1c2xlZXAoMzAwKTsgfX1mdW5jdGlvbiBjZWsoJHN0cikgeyRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2goJGFyciBhcyAkYXopIHtlY2hvICRhejsgdXNsZWVwKDkwMDApO319ZnVuY3Rpb24gZmFzdCgkc3RyKXskcmFyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2goJHJhciBhcyAkenope2VjaG8gJHp6O3VzbGVlcCgzMDAwKTt9fWZ1bmN0aW9uIGFuKCRzdHIpeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpOyBmb3JlYWNoICgkYXJyIGFzICRheil7IGVjaG8gJGF6OyB1c2xlZXAoMTk5OTkpO319ZnVuY3Rpb24gbG9hZCgkZGF0YSwgJGZpbGUpeyRoYW5kbGUgPSBmb3BlbigkZmlsZSwgJ3cnKTtmd3JpdGUoJGhhbmRsZSwgJGRhdGEpO2ZjbG9zZSgkaGFuZGxlKTsgfWZ1bmN0aW9uIGdhcmlzKCl7CmVjaG8gcC4iJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAAFxuIjt9CgpmdW5jdGlvbiB3ZWIoJHVybCl7JGNoPWN1cmxfaW5pdCgpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1VSTCwkdXJsKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpO3JldHVybiBjdXJsX2V4ZWMoJGNoKTt9cygpOwpmdW5jdGlvbiB4KCRhd2FsLCRha2hpciwkcmVzLCRubyl7JGRhdGEgPSBleHBsb2RlKCRhd2FsLGV4cGxvZGUoJGFraGlyLCRyZXMpWyRub10pWzBdO3JldHVybiAkZGF0YTt9CgpmdW5jdGlvbiBTbG93KCRtc2cpeyRzbG93ID0gc3RyX3NwbGl0KCRtc2cpO2ZvcmVhY2goICRzbG93IGFzICRzbG93bW8gKXsgZWNobyAkc2xvd21vOyB1c2xlZXAoMTAwMCk7fX0JCgpmdW5jdGlvbiBTYXZlKCRuYW1hZGF0YSl7aWYoZmlsZV9leGlzdHMoJG5hbWFkYXRhKSl7JGRhdGEgPSBmaWxlX2dldF9jb250ZW50cygkbmFtYWRhdGEpO31lbHNleyRkYXRhID0gcmVhZGxpbmUoIlwwMzNbMTszMm0gSW5wdXQgIi4kbmFtYWRhdGEuIiA6ICAiKTtmaWxlX3B1dF9jb250ZW50cygkbmFtYWRhdGEsJGRhdGEpO31yZXR1cm4gJGRhdGE7fXMoKTsKZnVuY3Rpb24gcHcoKXsKcHM6CiRkPWRhdGUoIkQiKTsKCiRnZXQ9ZmlsZV9nZXRfY29udGVudHMoYmFzZTY0X2RlY29kZSgiYUhSMGNITTZMeTl5Wlc1MGNua3VZMjh2Y0dGek9UVXZjbUYzIikpOwoKJGxpbmsgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5MaW5rOwokbGluazIgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5MaW5rMjsgJHB3ID0ganNvbl9kZWNvZGUoJGdldCktPlBhc3N3b3JkLT4kZC0+UGFzc3dvcmQ7IGlmKCRsaW5rKXsKJHJlYWQgPSBmaWxlX2dldF9jb250ZW50cygia2V5LnR4dCIpOwppZigkcmVhZCAhPSAkcHcpewpibjEoKTsKZWNobyBoLiIgIExJbmsgIDoiLnAuIiAkbGlua1xuIjsKCiAgICAgICAgICAgICRwID0gcmVhZGxpbmUoaC4iIElucHV0IERpc2luaTogIik7CiAgICAgICAgICAgICAgICBpZigkcCA9PSAkcHcpewogICAgICAgICAgICAgICAgICAgIGJuMSgpOwogICAgICAgICAgICAgICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCdrZXkudHh0JywkcCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyBoLiIgUGFzc3dvcmQgQ29ycmVjdCIaIFxuIjsKICAgICAgICAgICAgICAgICAgICBzbGVlcCgxKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGJuMSgpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gbS4iICBJbnZhbGlkIFBhc3N3b3JkIVxuIjsKICAgICAgICAgICAgICAgICAgICBnb3RvIHBzOwogICAgICAgICAgICAgICAgfQogICAgICAgIH1lbHNlewogICAgICAgIH0KfWVsc2V7CgogICBlY2hvIG0uIiBQbGVhc2UgY2VrIHlvdXIgY29uZWN0aW9uIVxuIjsKICAgIGV4aXQ7Cn0KfVN5c3RlbSgiY2xlYXIiKTtwdygpOyBmdW5jdGlvbiB0bXIoJHRtZXIpeyRjb2xvciA9IGFycmF5KCJcMDMzWzE7MzdtIiwiXDAzM1swOzMxbSIsIlwwMzNbMDszM20iLCJcMDMzWzA7MzJtIiwiXDAzM1swOzM0bSIsIlwwMzNbMDszNW0iKTskdGltZXI9dGltZSgpKyR0bWVyO3doaWxlKHRydWUpOmVjaG8iXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcciI7JHJlcz0kdGltZXItdGltZSgpOyBpZigkcmVzIDwgMSl7YnJlYWs7fSR0bSA9ICBkYXRlKCcgaTpzICcsJHJlcyk7ZWNobyIgXDAzM1sxOzM3bSBbIi4kY29sb3JbcmFuZCgwLGNvdW50KCRjb2xvciktMSldLiR0bS4iXDAzM1sxOzM3bV0iO3NsZWVwKDEpO2VuZHdoaWxlO30KIGZ1bmN0aW9uIGdnKCR1cmwsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgJHVhKVsxXTt9CiBmdW5jdGlvbiBwcCgkdXJsLCAkZGF0YSwgJHVhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgJHVhKVsxXTt9CmZ1bmN0aW9uIGJhc2U2NCgkc3RyKXtyZXR1cm4gYmFzZTY0X2VuY29kZSgkc3RyKTt9CmZ1bmN0aW9uIGdldCgkdXJsKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIGdldHNvbHZlKCRzb2wpe3JldHVybiBjdXJsKCRzb2wsIG51bGwsIHNvbHZlKCkpWzFdO30KZnVuY3Rpb24gYW5zd2VyKCR4LCR5LCR6KXtpZigkeCArICR5ID09ICR6KXtyZXR1cm4gImFkZCI7fWVsc2VpZigkeCAtICR5ID09ICR6KXtyZXR1cm4gInN1YiI7fWVsc2VpZigkeCAqICR5ID09ICR6KXtyZXR1cm4gIm11bHRpcGx5Ijt9ZWxzZWlmKCR4ICUgJHkpe3JldHVybiAiZGl2aWRlIjt9ZWxzZXtyZXR1cm4gMDt9fQpmdW5jdGlvbiBjdXJsKCR1cmwsICRwb3N0ID0gMCwgJGh0dHBoZWFkZXIgPSAwLCAkcHJveHkgPSAwKXsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUZJTEUsImNvb2tpZS50eHQiKTsKICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUVKQVIsImNvb2tpZS50eHQiKTsKICAgICAgICBpZigkcG9zdCl7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRwb3N0KTsKICAgICAgICB9CiAgICAgICAgaWYoJGh0dHBoZWFkZXIpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGh0dHBoZWFkZXIpOwogICAgICAgIH0KICAgICAgICBpZigkcHJveHkpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUFBST1hZVFVOTkVMLCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZLCAkcHJveHkpOwogICAgICAgICAgIAogICAgICAgIH0KICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSEVBREVSLCB0cnVlKTsKICAgICAgICAkcmVzcG9uc2UgPSBjdXJsX2V4ZWMoJGNoKTsKICAgICAgICAkaHR0cGNvZGUgPSBjdXJsX2dldGluZm8oJGNoKTsKICAgICAgICBpZighJGh0dHBjb2RlKSByZXR1cm4gIkN1cmwgRXJyb3IgOiAiLmN1cmxfZXJyb3IoJGNoKTsgZWxzZXsKICAgICAgICAgICAgJGhlYWRlciA9IHN1YnN0cigkcmVzcG9uc2UsIDAsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgICAgICRib2R5ID0gc3Vic3RyKCRyZXNwb25zZSwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAgICAgY3VybF9jbG9zZSgkY2gpOwogICAgICAgICAgICByZXR1cm4gYXJyYXkoJGhlYWRlciwgJGJvZHkpOwogICAgICAgIH0KICAgIH0KZnVuY3Rpb24gaCgpewokdWFbXT0iSG9zdDogbHVja3lkaWNlLm5ldCI7CiR1YVtdPSJBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgiOwokdWFbXT0icmVmZXJlcjpodHRwczovL2x1Y2t5ZGljZS5uZXQvZmF1Y2V0IjsKJHVhW109IlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDEiOwokdWFbXT0iVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDcuMS4yOyBSZWRtaSA0QSBCdWlsZC9OMkc0N0gpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82Ni4wLjMzNTkuMTU4IE1vYmlsZSBTYWZhcmkvNTM3LjM2IjsKJHVhW109IngtcmVxdWVzdGVkLXdpdGg6IFhNTEh0dHBSZXF1ZXN0IjsKICByZXR1cm4gJHVhOwp9CmZ1bmN0aW9uIGhlYWQoKXsKJHVhW109Ikhvc3Q6IGJsYXRjb2luLm5ldCI7CiR1YVtdPSJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCI7CgokdWFbXT0iVXNlci1BZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwokdWFbXT0iQ29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJDb29raWUiKTsKICByZXR1cm4gJHVhOwp9CmZ1bmN0aW9uIHNvbHZlKCl7CiR1YVtdPSJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIjsKJHVhW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJHVhW109ImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogcmV0dXJuICR1YTsKfQpmdW5jdGlvbiB2MygpewokaFtdPSJIb3N0OiB3d3cuZ29vZ2xlLmNvbSI7CiRoW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJGhbXT0iY29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJjb29raWVfYW5zaG9yIik7CiRoW109InJlZmVyZXI6aHR0cHM6Ly9lYXJuZG9nZS54eXovIjsKICAgIHJldHVybiAkaDsKICAgIH0KZnVuY3Rpb24gcmV2MygpewokYWNyID1maWxlX2dldF9jb250ZW50cygidXJsX2Fuc2hvciIpOwokY29yPWV4cGxvZGUoJyYnLGV4cGxvZGUoJyZrPScsJGFjcilbMV0pWzBdOwokayA9IGV4cGxvZGUoIiYiLCRhY3IpWzFdOwokY28gPSBleHBsb2RlKCImIiwkYWNyKVsyXTsKJHYgPSBleHBsb2RlKCImIiwkYWNyKVs0XTsKJHYzID0gY3VybCgkYWNyLCBudWxsLHYzKCkpWzFdOwokdjN0b2tlbiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJyZWNhcHRjaGEtdG9rZW4iIHZhbHVlPSInLCR2MylbMV0pWzBdOwokYWNyMiA9ICJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyL3JlbG9hZD9rPSRjb3IiOwokZGF0YSA9ICIkdiZyZWFzb249cSZjPSR2M3Rva2VuJiR2JiRjbyI7CiR2M192ZXJpZiA9IGN1cmwoJGFjcjIsICRkYXRhLCB2MygpKVsxXTsKJHYzMSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJycmVzcCIsIicsJHYzX3ZlcmlmKVsxXSlbMF07CiByZXR1cm4gJHYzMTsKIH0KZnVuY3Rpb24gY2FwdGNoYSgpewokZ21iYXI9ZmlsZV9nZXRfY29udGVudHMoJ2ltYWdlLmpwZycpOwokYmFzZT1iYXNlNjQoJGdtYmFyKTsKJHVhID0gYXJyYXkoKTsKJHVhW10gPSAiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXSA9ICJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iOwokY2ggPSBjdXJsX2luaXQoKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgImh0dHBzOi8vdmlzaW9uLmdvb2dsZWFwaXMuY29tL3YxL2ltYWdlczphbm5vdGF0ZT9rZXk9QUl6YVN5QzN5LUVtNDJodFNCOFVFWlBxcHRKNzhybHZMNThfaDZZIik7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCAkdWEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAneyJyZXF1ZXN0cyI6W3siaW1hZ2UiOnsiY29udGVudCI6IicuJGJhc2UuJyJ9LCJmZWF0dXJlcyI6W3sidHlwZSI6IlRFWFRfREVURUNUSU9OIn1dfV19Jyk7CiRyZXMgPSBjdXJsX2V4ZWMoJGNoKTsKJHZhcjE9IGV4cGxvZGUoJyJ0ZXh0IjogIkVudGVyIHRoZSBmb2xsb3dpbmc6XG4nLCAkcmVzKTsKJHZhcjIgPSBleHBsb2RlKCdcbiInLCAkdmFyMVsxXSk7CiR2YXIzID0gJHZhcjJbMF07CiRjYXA9c3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwokY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKcmV0dXJuICRjYXBjaGE7Cn0KZnVuY3Rpb24gc29sdmVtZWRpYSgkc29sKXsKICAgICAgICB3aGlsZSh0cnVlKXsKICAgICAgICAgICAgJHVhX3NvbCA9IGFycmF5KCJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIiwidXNlci1hZ2VudDogIi5maWxlX2dldF9jb250ZW50cygiVXNlcl9BZ2VudCIpLCJhY2NlcHQtbGFuZ3VhZ2U6IGlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43Iik7CiAgICAgICAgICAgICR1YV9pbWcgPSBhcnJheSgiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICAgICAgJGNoYWxsZW5nZSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJjaGFsbGVuZ2UiOiInLGdnKCRzb2wsJHVhX3NvbCkpWzFdKVswXTsKICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoImltYWdlLmpwZyIsIGdnKCdodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPScuJGNoYWxsZW5nZS4nO3c9MzAwO2g9MTUwO2ZnPTAwMDAwMDtiZz1mOGY4ZjgnLCR1YV9zb2wpKTsKICAgICAgICAgICAgJGJhc2UgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCdpbWFnZS5qcGcnKSk7CiAgICAgICAgICAgICRyZXMgPSBwcCgiaHR0cHM6Ly92aXNpb24uZ29vZ2xlYXBpcy5jb20vdjEvaW1hZ2VzOmFubm90YXRlP2tleT1BSXphU3lDM3ktRW00Mmh0U0I4VUVaUHFwdEo3OHJsdkw1OF9oNlkiLCd7InJlcXVlc3RzIjpbeyJpbWFnZSI6eyJjb250ZW50IjoiJy4kYmFzZS4nIn0sImZlYXR1cmVzIjpbeyJ0eXBlIjoiVEVYVF9ERVRFQ1RJT04ifV19XX0nLCR1YV9pbWcpOwogICAgICAgICAgICAkdmFyMT0gZXhwbG9kZSgnInRleHQiOiAiRW50ZXIgdGhlIGZvbGxvd2luZzpcbicsICRyZXMpOwogICAgICAgICAgICAkdmFyMiA9IGV4cGxvZGUoJ1xuIicsICR2YXIxWzFdKTsKICAgICAgICAgICAgJHZhcjMgPSAkdmFyMlswXTsKICAgICAgICAgICAgJGNhcCA9IHN0cl9yZXBsYWNlKCdcbicsJyAnLCR2YXIzKTsKICAgICAgICAgICAgJGNhcGNoYSA9IHByZWdfcmVwbGFjZSgiL1teYS16XS8iLCAiIiwgJGNhcCk7CiAgICAgICAgICAgIGlmKCRjYXBjaGEpewogICAgICAgICAgICBlY2hvICIkcHV0aWggVHJ5bmcgQnlwYXNzICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjsKICAgICAgICAgICAgcmV0dXJuICJhZGNvcHlfcmVzcG9uc2U9Ii4kY2FwY2hhLiImYWRjb3B5X2NoYWxsZW5nZT0iLiRjaGFsbGVuZ2U7CiAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkcHV0aWggUGxlYXNlIFdhaXQgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjt9fX0KZnVuY3Rpb24gYm90KCR4LCR5LCR6KXtyZXR1cm4gWyIrIi4keS4iKyIuJHouIisiLiR4LCIrIi4keC4iKyIuJHkuIisiLiR6LCIrIi4keC4iKyIuJHouIisiLiR5LCIrIi4keS4iKyIuJHguIisiLiR6LCIrIi4kei4iKyIuJHkuIisiLiR4LCIrIi4kei4iKyIuJHguIisiLiR5XTt9CmZ1bmN0aW9uIGJuMSgpewpzeXN0ZW0oImNsZWFyIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZWNobyBmYXN0KCIgIFwwMzNbMTs5N21EYXRlIDoiLmRhdGUoIiBEIG0gWSAiKSk7CmVjaG8gZmFzdCgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcMDMzWzE7OTdtVGltZSA6Ii5kYXRlKCIgSDppOnMgIikpOwplY2hvIHAuIlxuJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAAFxuIjsKZWNobyBtLiIgICAgIF9fICAgX19fX19fXyAgICAgICAgIF9fX19fXyAgICAgICAgICBfICAgICAgICAgICAgICAgICAgXG4iOwplY2hvIG0uIiAgICAgXCBcIC8gLyAgX18gXCAgICAgICB8ICBfX19ffCAgICAgICAgfCB8ICAgICAgICAgICAgICAgICBcbiI7CmVjaG8gbS4iICAgICAgXCBWIC98IHwgIHwgfF9fX19fX3wgfF9fIF9fIF8gXyBfXyB8IHxfIF9fIF8gX19fIF8gICBfIFxuIjsKZWNobyBtLiIgICAgICAgPiA8IHwgfCAgfCB8X19fX19ffCAgX18vIF9gIHwgJ18gXHwgX18vIF9gIC8gX198IHwgfCB8XG4iOwplY2hvIG0uIiAgICAgIC8gLiBcfCB8X198IHwgICAgICB8IHwgfCAoX3wgfCB8IHwgfCB8fCAoX3wgXF9fIFwgfF98IHxcbiI7CmVjaG8gbS4iICAgICAvXy8gXF9cX19fX18vICAgICAgIHxffCAgXF9fLF98X3wgfF98XF9fXF9fLF98X19fL1xfXywgfFxuIjsKZWNobyBtLiIgICAgICAgICAgICAgICAgICAgICAg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ZigkbG9rKXsKZWNobyJ7JG1lcmFofSAkbG9rXG4iOwplY2hvInskbWVyYWh9IFVwZGF0ZSBDb29raWVcbiI7CnN5c3RlbSgicm0gQ29va2llIik7CnN5c3RlbSgicm0gdXNlci1hZ2VudCIpOwpzeXN0ZW0oInJtIENvZGVfUGVzIik7CiRtYWlsID0gU2F2ZSgiQ29va2llIik7CiRwYXMgPSBTYXZlKCJ1c2VyLWFnZW50Iik7CiRwZXMgPSBTYXZlKCJDb2RlX1BlcyIpOwpleGl0O30KCgokZGF0YSA9ICJhPWRhc2hib3JkJnRva2VuPSR0ayZjaGFsbGVuZ2U9ZmFsc2UmcmVzcG9uc2U9ZmFsc2UmcGVzPSRwZXMiOwokcmVzID0gcG9zdCh2ZmF1Y2V0LCRkYXRhKTsKJHN1Yz1leHBsb2RlKCIhPCIsZXhwbG9kZSgiQ29uZ3JhdHVsYXRpb25zLCAiLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMpewoKJHJlcyA9IGdldChmYXVjZXQpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGg0IGNsYXNzPSJsaC0xIG1iLTEiPicsJHJlcylbNF0pWzBdOwplY2hvIGguIiA+XyRncHV0aWggRmF1Y2V0MSI7CmVjaG8gcC4iICRncHV0aWggJHN1YyAgXG4iOwp9CgoKCgokcmVzID0gZ2V0KCJodHRwczovL2JsYXRjb2luLm5ldC8/cGFnZT1mYXVjZXQyIik7CgokdGsgPSBleHBsb2RlKCInIixleHBsb2RlKCJ2YXIgdG9rZW4gPSAnIiwkcmVzKVsxXSlbMF07CgoKCiRkYXRhID0gImE9ZmF1Y2V0MiZ0b2tlbj0kdGsmY2hhbGxlbmdlPWZhbHNlJnJlc3BvbnNlPWZhbHNlJnBlcz0kcGVzIjsKJHJlcyA9IHBvc3QoImh0dHBzOi8vYmxhdGNvaW4ubmV0L3N5c3RlbS9hamF4LnBocCIsJGRhdGEpOwokc3VjPWV4cGxvZGUoIiE8IixleHBsb2RlKCJDb25ncmF0dWxhdGlvbnMsICIsJHJlcylbMV0pWzBdOwokc3RzPWV4cGxvZGUoJzwvZGl2PicsZXhwbG9kZSgnPGRpdiBjbGFzcz0iYWxlcnQgdGV4dC1jZW50ZXIgYWxlcnQtZGFuZ2VyIj48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZSI+PC9pPiAnLCRyZXMpWzFdKVswXTsKaWYoJHN1Yyl7CmVjaG8gaC4iID5fJGdwdXRpaCBGYXVjZXQyIjsKZWNobyBwLiIgJHN1YyAgXG4iOwp9CiRyZXMgPSBnZXQoImh0dHBzOi8vYmxhdGNvaW4ubmV0Lz9wYWdlPWZhdWNldDMiKTsKCiR0ayA9IGV4cGxvZGUoIiciLGV4cGxvZGUoInZhciB0b2tlbiA9ICciLCRyZXMpWzFdKVswXTsKCgoKJGRhdGEgPSAiYT1mYXVjZXQzJnRva2VuPSR0ayZjaGFsbGVuZ2U9ZmFsc2UmcmVzcG9uc2U9ZmFsc2UmcGVzPSRwZXMiOwokcmVzID0gcG9zdCgiaHR0cHM6Ly9ibGF0Y29pbi5uZXQvc3lzdGVtL2FqYXgucGhwIiwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiITwiLGV4cGxvZGUoIkNvbmdyYXR1bGF0aW9ucywgIiwkcmVzKVsxXSlbMF07CiRzdHM9ZXhwbG9kZSgnPC9kaXY+JyxleHBsb2RlKCc8ZGl2IGNsYXNzPSJhbGVydCB0ZXh0LWNlbnRlciBhbGVydC1kYW5nZXIiPjxpIGNsYXNzPSJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlIj48L2k+ICcsJHJlcylbMV0pWzBdOwppZigkc3VjKXsKZWNobyBoLiIgPl8kZ3B1dGloIEZhdWNldDMiOwplY2hvIHAuIiAkZ3B1dGloICRzdWMgIFxuIjsKfQokcmVzID0gZ2V0KCJodHRwczovL2JsYXRjb2luLm5ldC8/cGFnZT1mYXVjZXQ0Iik7CgokdGsgPSBleHBsb2RlKCInIixleHBsb2RlKCJ2YXIgdG9rZW4gPSAnIiwkcmVzKVsxXSlbMF07CgoKCiRkYXRhID0gImE9ZmF1Y2V0NCZ0b2tlbj0kdGsmY2hhbGxlbmdlPWZhbHNlJnJlc3BvbnNlPWZhbHNlJnBlcz0kcGVzIjsKJHJlcyA9IHBvc3QoImh0dHBzOi8vYmxhdGNvaW4ubmV0L3N5c3RlbS9hamF4LnBocCIsJGRhdGEpOwokc3VjPWV4cGxvZGUoIiE8IixleHBsb2RlKCJDb25ncmF0dWxhdGlvbnMsICIsJHJlcylbMV0pWzBdOwokc3RzPWV4cGxvZGUoJzwvZGl2PicsZXhwbG9kZSgnPGRpdiBjbGFzcz0iYWxlcnQgdGV4dC1jZW50ZXIgYWxlcnQtZGFuZ2VyIj48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZSI+PC9pPiAnLCRyZXMpWzFdKVswXTsKaWYoJHN1Yyl7CmVjaG8gaC4iID5fJGdwdXRpaCBGYXVjZXQ0IjsKZWNobyBwLiIgICRzdWMgIFxuIjsKfQokcmVzID0gZ2V0KCJodHRwczovL2JsYXRjb2luLm5ldC8/cGFnZT1mYXVjZXQ1Iik7CgokdGsgPSBleHBsb2RlKCInIixleHBsb2RlKCJ2YXIgdG9rZW4gPSAnIiwkcmVzKVsxXSlbMF07CgoKCiRkYXRhID0gImE9ZmF1Y2V0NSZ0b2tlbj0kdGsmY2hhbGxlbmdlPWZhbHNlJnJlc3BvbnNlPWZhbHNlJnBlcz0kcGVzIjsKJHJlcyA9IHBvc3QoImh0dHBzOi8vYmxhdGNvaW4ubmV0L3N5c3RlbS9hamF4LnBocCIsJGRhdGEpOwokc3VjPWV4cGxvZGUoIiE8IixleHBsb2RlKCJDb25ncmF0dWxhdGlvbnMsICIsJHJlcylbMV0pWzBdOwokc3RzPWV4cGxvZGUoJzwvZGl2PicsZXhwbG9kZSgnPGRpdiBjbGFzcz0iYWxlcnQgdGV4dC1jZW50ZXIgYWxlcnQtZGFuZ2VyIj48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZSI+PC9pPiAnLCRyZXMpWzFdKVswXTsKaWYoJHN1Yyl7CmVjaG8gaC4iID5fJGdwdXRpaCBGYXVjZXQ1IjsKZWNobyBwLiIgJGdwdXRpaCAkc3VjICBcbiI7Cn0KCiRyZXMgPSBnZXQoImh0dHBzOi8vYmxhdGNvaW4ubmV0Lz9wYWdlPWZhdWNldDYiKTsKCiR0ayA9IGV4cGxvZGUoIiciLGV4cGxvZGUoInZhciB0b2tlbiA9ICciLCRyZXMpWzFdKVswXTsKCgoKJGRhdGEgPSAiYT1mYXVjZXQ2JnRva2VuPSR0ayZjaGFsbGVuZ2U9ZmFsc2UmcmVzcG9uc2U9ZmFsc2UmcGVzPSRwZXMiOwokcmVzID0gcG9zdCgiaHR0cHM6Ly9ibGF0Y29pbi5uZXQvc3lzdGVtL2FqYXgucGhwIiwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiITwiLGV4cGxvZGUoIkNvbmdyYXR1bGF0aW9ucywgIiwkcmVzKVsxXSlbMF07CiRzdHM9ZXhwbG9kZSgnPC9kaXY+JyxleHBsb2RlKCc8ZGl2IGNsYXNzPSJhbGVydCB0ZXh0LWNlbnRlciBhbGVydC1kYW5nZXIiPjxpIGNsYXNzPSJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlIj48L2k+ICcsJHJlcylbMV0pWzBdOwppZigkc3VjKXsKZWNobyBoLiIgPl8kZ3B1dGloIEZhdWNldDYiOwplY2hvIHAuIiAkc3VjICBcbiI7Cn0KJHJlcyA9IGdldCgiaHR0cHM6Ly9ibGF0Y29pbi5uZXQvP3BhZ2U9ZmF1Y2V0NyIpOwoKJHRrID0gZXhwbG9kZSgiJyIsZXhwbG9kZSgidmFyIHRva2VuID0gJyIsJHJlcylbMV0pWzBdOwoKCgokZGF0YSA9ICJhPWZhdWNldDcmdG9rZW49JHRrJmNoYWxsZW5nZT1mYWxzZSZyZXNwb25zZT1mYWxzZSZwZXM9JHBlcyI7CiRyZXMgPSBwb3N0KCJodHRwczovL2JsYXRjb2luLm5ldC9zeXN0ZW0vYWpheC5waHAiLCRkYXRhKTsKJHN1Yz1leHBsb2RlKCIhPCIsZXhwbG9kZSgiQ29uZ3JhdHVsYXRpb25zLCAiLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMpewplY2hvIGguIiA+XyRncHV0aWggRmF1Y2V0NyI7CmVjaG8gcC4iICRzdWMgIFxuIjsKfWVsc2V7fQoKCgokcmVzID0gZ2V0KGRhc2gpOwokdXNlID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnZGl2IGNsYXNzPSJ0ZXh0LXdhcm5pbmciPjxiPicsJHJlcylbMV0pWzBdOwokYmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGRpdiBjbGFzcz0idGV4dC1wcmltYXJ5Ij48Yj4nLCRyZXMpWzFdKVswXTsKZWNobyBoLiIgPl8gQmFsYW5jZSIubS4iIH4+Ii5wLiIgJGJhbCAvICIuJHVzZS4iIFxuIjsKZWNobyBwLiJcbyUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJQBcbiI7CiRyZXMgPSBnZXQoImh0dHBzOi8vYmxhdGNvaW4ubmV0Lz9wYWdlPWZhdWNldDMiKTsKJHRpbWUgPSBleHBsb2RlKCdtaW51dGVzJyxleHBsb2RlKCdjbGFpbVRpbWUiPicsJHJlcylbMV0pWzBdOwppZigkdGltZSl7CnRtcig5MDApOwp9Cgpnb3RvIG1hbnVhbDsKCgo="}}
