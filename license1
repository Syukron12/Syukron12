{"script":{"btcbunch":"ZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgiQXNpYS9KYWthcnRhIik7c3lzdGVtKCJjbGVhciIpOyRoaWphdSA9ICJcMzNbMzI7MW0iOyRiaXJ1ID0gIlwzM1swOzM2bSI7JGJpcnUxID0gIlxlWzE7MzRtIjskbWVyYWggPSAiXDMzWzMxOzFtIjskcHV0aWggPSAiXGVbMTszN20iOyRkYXJrPSJcMDMzWzE7MzBtIjska3VuaW5nID0gIlwzM1sxOzMzbSI7JGN5YW4gPSAiXGVbMTszNm0iOyR1bmd1ID0gIlxlWzE7MzVtIjskYWJ1ID0gIlxlWzE7MzBtIjskZW5kID0gIlwwMzNbMG0iOyRiYWJ1ID0gIlwwMzNbMTAwbSI7JGJtZXJhaCA9ICJcMDMzWzEwMW0iOyRic3RhYmlsbyA9ICJcMDMzWzEwMm0iOyRia3VuaW5nID0gIlwwMzNbMTAzbSI7JGJiaXJ1ID0gIlwwMzNbMTA0bSI7JGJwaW5rID0gIlwwMzNbMTA1bSI7JGJjeWFuID0gIlwwMzNbMTA2bSI7JGJwdXRpaCA9ICJcMDMzWzEwN20iOyRiaXJ1PSJcMDMzWzE7MzRtIjska3VuaW5nPSJcMDMzWzE7MzNtIjskbWVyYWg9IlwwMzNbMTszMW0iOyRwdXRpaD0iXDAzM1sxOzM3bSI7JGhpamF1PSJcMDMzWzE7MzJtIjskY3lhbj0iXDAzM1sxOzM2bSI7JHVuZ3U9IlwwMzNbMTszNW0iOyRkYXJrPSJcMDMzWzE7MzBtIjskYWJ1ID0gIlwwMzNbMDs5MG0iOyRhYnUxID0gIlwwMzNbMTs5MG0iOyRtZXJhaDEgPSAiXDAzM1sxOzkxbSI7JGVuZCA9ICJcMDMzWzBtIjskYmxvY2thYnUgPSAiXDAzM1sxMDBtIjskYmxvY2ttZXJhaCA9ICJcMDMzWzEwMW0iOyRibG9ja3N0YWJpbG8gPSAiXDAzM1sxMDJtIjskYmxvY2trdW5pbmcgPSAiXDAzM1sxMDNtIjskYmxvY2tiaXJ1ID0gIlwwMzNbMTA0bSI7JGJsb2NrcGluayA9ICJcMDMzWzEwNW0iOyRibG9ja2N5YW4gPSAiXDAzM1sxMDZtIjskYmxvY2twdXRpaCA9ICJcMDMzWzEwN20iOyR0ZXJtdXg9ICRjeWFuLiI+XyAiOwpjb25zdAp0aXRsZSA9ICJmYXl0Y29pbiIsCmRhc2ggPSAiaHR0cHM6Ly9idGNidW5jaC5jb20vZGFzaGJvYXJkIiwKZmF1Y2V0ID0gImh0dHBzOi8vYnRjYnVuY2guY29tL2ZhdWNldCIsCnZmYXVjZXQgPSAiaHR0cHM6Ly9idGNidW5jaC5jb20vZmF1Y2V0L3ZlcmlmeSI7CgpmdW5jdGlvbiBzKCl7JHJlcz1maWxlX2dldF9jb250ZW50cyhiYXNlNjRfZGVjb2RlKCJhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwxTjVkV3R5YjI0eE1pOVRlWFZyY205dU1USXZiV0ZwYmk5elpYSjJaWEl1Y0dodyIpKTskZHU9ZXhwbG9kZSgnIycsZXhwbG9kZSgnIycudGl0bGUuJzonLCRyZXMpWzFdKVswXTskY3U9ZXhwbG9kZSgnfCcsJGR1KVswXTs7aWYoJGN1ID09ICJvZmYiIHx8ICRjdSA9PSBudWxsKXtibjEoKTtlY2hvJG1lcmFoLiJcMzNbMzE7MW0gU2NyaXB0IERpIE5vbmFrdGlma2FuXG4iO2VjaG8kbWVyYWguIlwzM1szMTsxbSBCeSBNc2sgT2ZmaWNpYWwgXG4iO2V4aXQ7fWlmKCRjdT09Im9uIil7fX1zKCk7CmZ1bmN0aW9uIGFuaW1hc2koJHN0cikgeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2ggKCRhcnIgYXMgJGF6KSB7IGVjaG8gJGF6OyB1c2xlZXAoMzAwKTsgfX1mdW5jdGlvbiBjZWsoJHN0cikgeyRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2goJGFyciBhcyAkYXopIHtlY2hvICRhejsgdXNsZWVwKDkwMDApO319ZnVuY3Rpb24gZmFzdCgkc3RyKXskcmFyID0gc3RyX3NwbGl0KCRzdHIpO2ZvcmVhY2goJHJhciBhcyAkenope2VjaG8gJHp6O3VzbGVlcCgzMDAwKTt9fWZ1bmN0aW9uIGFuKCRzdHIpeyAkYXJyID0gc3RyX3NwbGl0KCRzdHIpOyBmb3JlYWNoICgkYXJyIGFzICRheil7IGVjaG8gJGF6OyB1c2xlZXAoMTk5OTkpO319ZnVuY3Rpb24gbG9hZCgkZGF0YSwgJGZpbGUpeyRoYW5kbGUgPSBmb3BlbigkZmlsZSwgJ3cnKTtmd3JpdGUoJGhhbmRsZSwgJGRhdGEpO2ZjbG9zZSgkaGFuZGxlKTsgfWZ1bmN0aW9uIGdhcmlzKCl7ZWNobyAkcHV0aWguIuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCIuJGVuZC4iXG4iO30KLyogRlVOQ1RJT04gKi8KZnVuY3Rpb24gYygpe3N5c3RlbSgnY2xlYXInKTt9CmZ1bmN0aW9uIHdlYigkdXJsKXskY2g9Y3VybF9pbml0KCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfVVJMLCR1cmwpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7cmV0dXJuIGN1cmxfZXhlYygkY2gpO30KZnVuY3Rpb24geCgkYXdhbCwkYWtoaXIsJHJlcywkbm8peyRkYXRhID0gZXhwbG9kZSgkYXdhbCxleHBsb2RlKCRha2hpciwkcmVzKVskbm9dKVswXTtyZXR1cm4gJGRhdGE7fQoKZnVuY3Rpb24gU2xvdygkbXNnKXskc2xvdyA9IHN0cl9zcGxpdCgkbXNnKTtmb3JlYWNoKCAkc2xvdyBhcyAkc2xvd21vICl7IGVjaG8gJHNsb3dtbzsgdXNsZWVwKDEwMDApO319CQoKZnVuY3Rpb24gU2F2ZSgkbmFtYWRhdGEpe2lmKGZpbGVfZXhpc3RzKCRuYW1hZGF0YSkpeyRkYXRhID0gZmlsZV9nZXRfY29udGVudHMoJG5hbWFkYXRhKTt9ZWxzZXskZGF0YSA9IHJlYWRsaW5lKCJcMDMzWzE7MzJtIElucHV0ICIuJG5hbWFkYXRhLiIgOiAgIik7ZmlsZV9wdXRfY29udGVudHMoJG5hbWFkYXRhLCRkYXRhKTt9cmV0dXJuICRkYXRhO31zKCk7CmZ1bmN0aW9uIHB3KCl7CnBzOgokZD1kYXRlKCJEIik7CgokZ2V0PWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl3ZHk1d2FIQT0iKSk7CgokbGluayA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbms7CiRsaW5rMiA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbmsyOyAkcHcgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5QYXNzd29yZDsgaWYoJGxpbmspewokcmVhZCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCJrZXkudHh0Iik7CmlmKCRyZWFkICE9ICRwdyl7CmJuMSgpOwplY2hvICIkaGlqYXUgIExJbmsgIDokcHV0aWggJGxpbmtcbiI7CgogICAgICAgICAgICAkcCA9IHJlYWRsaW5lKCIkaGlqYXUgSW5wdXQgRGlzaW5pOiAiKTsKICAgICAgICAgICAgICAgIGlmKCRwID09ICRwdyl7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJ2tleS50eHQnLCRwKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkbWVyYWggUGFzc3dvcmQgQ29ycmVjdCDiiJogXG4iOwogICAgICAgICAgICAgICAgICAgIHNsZWVwKDEpOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJG1lcmFoICBJbnZhbGlkIFBhc3N3b3JkIVxuIjsKICAgICAgICAgICAgICAgICAgICBnb3RvIHBzOwogICAgICAgICAgICAgICAgfQogICAgICAgIH1lbHNlewogICAgICAgIH0KfWVsc2V7CgogICBlY2hvICIkbWVyYWggUGxlYXNlIGNlayB5b3VyIGNvbmVjdGlvbiFcbiI7CiAgICBleGl0Owp9fVN5c3RlbSgiY2xlYXIiKTsKCiBmdW5jdGlvbiB0bXIoJHRtZXIpeyRjb2xvciA9IGFycmF5KCJcMDMzWzE7MzdtIiwiXDAzM1swOzMxbSIsIlwwMzNbMDszM20iLCJcMDMzWzA7MzJtIiwiXDAzM1swOzM0bSIsIlwwMzNbMDszNW0iKTskdGltZXI9dGltZSgpKyR0bWVyO3doaWxlKHRydWUpOmVjaG8iXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcciI7JHJlcz0kdGltZXItdGltZSgpOyBpZigkcmVzIDwgMSl7YnJlYWs7fSR0bSA9ICBkYXRlKCcgaTpzICcsJHJlcyk7ZWNobyIgXDAzM1sxOzM3bSBbIi4kY29sb3JbcmFuZCgwLGNvdW50KCRjb2xvciktMSldLiR0bS4iXDAzM1sxOzM3bV0iO3NsZWVwKDEpO2VuZHdoaWxlO30KIGZ1bmN0aW9uIGdnKCR1cmwsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgJHVhKVsxXTt9CiBmdW5jdGlvbiBwcCgkdXJsLCAkZGF0YSwgJHVhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgJHVhKVsxXTt9CmZ1bmN0aW9uIGJhc2U2NCgkc3RyKXtyZXR1cm4gYmFzZTY0X2VuY29kZSgkc3RyKTt9CmZ1bmN0aW9uIGdldCgkdXJsKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIGdldHNvbHZlKCRzb2wpe3JldHVybiBjdXJsKCRzb2wsIG51bGwsIHNvbHZlKCkpWzFdO30KZnVuY3Rpb24gYW5zd2VyKCR4LCR5LCR6KXtpZigkeCArICR5ID09ICR6KXtyZXR1cm4gImFkZCI7fWVsc2VpZigkeCAtICR5ID09ICR6KXtyZXR1cm4gInN1YiI7fWVsc2VpZigkeCAqICR5ID09ICR6KXtyZXR1cm4gIm11bHRpcGx5Ijt9ZWxzZWlmKCR4ICUgJHkpe3JldHVybiAiZGl2aWRlIjt9ZWxzZXtyZXR1cm4gMDt9fQpmdW5jdGlvbiBjdXJsKCR1cmwsICRwb3N0ID0gMCwgJGh0dHBoZWFkZXIgPSAwLCAkcHJveHkgPSAwKXsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUZJTEUsImNvb2tpZS50eHQiKTsKICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUVKQVIsImNvb2tpZS50eHQiKTsKICAgICAgICBpZigkcG9zdCl7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRwb3N0KTsKICAgICAgICB9CiAgICAgICAgaWYoJGh0dHBoZWFkZXIpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGh0dHBoZWFkZXIpOwogICAgICAgIH0KICAgICAgICBpZigkcHJveHkpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUFBST1hZVFVOTkVMLCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZLCAkcHJveHkpOwogICAgICAgICAgICAvLyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUFJPWFlUWVBFLCBDVVJMUFJPWFlfU09DS1M1KTsKICAgICAgICB9CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgdHJ1ZSk7CiAgICAgICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgJGh0dHBjb2RlID0gY3VybF9nZXRpbmZvKCRjaCk7CiAgICAgICAgaWYoISRodHRwY29kZSkgcmV0dXJuICJDdXJsIEVycm9yIDogIi5jdXJsX2Vycm9yKCRjaCk7IGVsc2V7CiAgICAgICAgICAgICRoZWFkZXIgPSBzdWJzdHIoJHJlc3BvbnNlLCAwLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICAkYm9keSA9IHN1YnN0cigkcmVzcG9uc2UsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICAgICAgICAgcmV0dXJuIGFycmF5KCRoZWFkZXIsICRib2R5KTsKICAgICAgICB9CiAgICB9CmZ1bmN0aW9uIGgoKXsKJHVhW109Ikhvc3Q6IGx1Y2t5ZGljZS5uZXQiOwokdWFbXT0iQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IjsKJHVhW109InJlZmVyZXI6aHR0cHM6Ly9sdWNreWRpY2UubmV0L2ZhdWNldCI7CiR1YVtdPSJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxIjsKJHVhW109IlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjEuMjsgUmVkbWkgNEEgQnVpbGQvTjJHNDdIKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjYuMC4zMzU5LjE1OCBNb2JpbGUgU2FmYXJpLzUzNy4zNiI7CiR1YVtdPSJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCI7CiAgcmV0dXJuICR1YTsKfQpmdW5jdGlvbiBoZWFkKCl7CiR1YVtdPSJIb3N0OiBidGNidW5jaC5jb20iOwokdWFbXT0ieC1yZXF1ZXN0ZWQtd2l0aDogWE1MSHR0cFJlcXVlc3QiOwokdWFbXT0iVXNlci1BZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwokdWFbXT0iQ29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJDb29raWUiKTsKICByZXR1cm4gJHVhOwp9CmZ1bmN0aW9uIHNvbHZlKCl7CiR1YVtdPSJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIjsKJHVhW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJHVhW109ImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogcmV0dXJuICR1YTsKfQpmdW5jdGlvbiB2MygpewokaFtdPSJIb3N0OiB3d3cuZ29vZ2xlLmNvbSI7CiRoW109IkNvb2tpZTogIi5maWxlX2dldF9jb250ZW50cygiY29va2llX2FuY2hvciIpOwokaFtdPSJVc2VyLUFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50Iik7CnJldHVybiAkaDsKfQpmdW5jdGlvbiByZXYzKCl7Cgp3aGlsZSh0cnVlKXsKJGFjciA9ZmlsZV9nZXRfY29udGVudHMoInVybF9hbmNob3IiKTsKJGNvcj1leHBsb2RlKCcmJyxleHBsb2RlKCcmaz0nLCRhY3IpWzFdKVswXTsKJGsgPSBleHBsb2RlKCImIiwkYWNyKVsxXTsKJGNvID0gZXhwbG9kZSgiJiIsJGFjcilbMl07CiR2ID0gZXhwbG9kZSgiJiIsJGFjcilbNF07CiR2MyA9IGN1cmwoJGFjcixudWxsLHYzKCkpWzFdOwokdjN0b2tlbiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJyZWNhcHRjaGEtdG9rZW4iIHZhbHVlPSInLCR2MylbMV0pWzBdOwokYWNyMiA9ICJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyL3JlbG9hZD9rPSRjb3IiOwokZGF0YSA9ICIkdiZyZWFzb249cSZjPSR2M3Rva2VuJiR2JiRjbyI7CiR2M192ZXJpZiA9IGN1cmwoJGFjcjIsICRkYXRhLCB2MygpKVsxXTsKJHYzMSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJycmVzcCIsIicsJHYzX3ZlcmlmKVsxXSlbMF07CiAgaWYoJHYzMSl7CiAgICAgICAgICAgICAgICBlY2hvIFNsb3coInskbWVyYWh9IGdldCBjYXB0Y2hhLiAgICAgXHIiKTsgCnNsZWVwKDEpOwogICAgICAgICAgICAgICAgcmV0dXJuICR2MzE7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgU2xvdygiIHskbWVyYWh9IHBsZWFzZSB3YWl0ICAgICAgICAgICAgXHIiKTsKICAgICAgICAgICAgfQogICAgfQp9cHcoKTsKZnVuY3Rpb24gY2FwdGNoYSgpewokZ21iYXI9ZmlsZV9nZXRfY29udGVudHMoJ2ltYWdlLmpwZycpOwokYmFzZT1iYXNlNjQoJGdtYmFyKTsKJHVhID0gYXJyYXkoKTsKJHVhW10gPSAiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXSA9ICJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iOwokY2ggPSBjdXJsX2luaXQoKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgImh0dHBzOi8vdmlzaW9uLmdvb2dsZWFwaXMuY29tL3YxL2ltYWdlczphbm5vdGF0ZT9rZXk9QUl6YVN5QzN5LUVtNDJodFNCOFVFWlBxcHRKNzhybHZMNThfaDZZIik7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCAkdWEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAneyJyZXF1ZXN0cyI6W3siaW1hZ2UiOnsiY29udGVudCI6IicuJGJhc2UuJyJ9LCJmZWF0dXJlcyI6W3sidHlwZSI6IlRFWFRfREVURUNUSU9OIn1dfV19Jyk7CiRyZXMgPSBjdXJsX2V4ZWMoJGNoKTsKJHZhcjE9IGV4cGxvZGUoJyJ0ZXh0IjogIkVudGVyIHRoZSBmb2xsb3dpbmc6XG4nLCAkcmVzKTsKJHZhcjIgPSBleHBsb2RlKCdcbiInLCAkdmFyMVsxXSk7CiR2YXIzID0gJHZhcjJbMF07CiRjYXA9c3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwokY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKcmV0dXJuICRjYXBjaGE7Cn0KZnVuY3Rpb24gc29sdmVtZWRpYSgkc29sKXsKICAgICAgICB3aGlsZSh0cnVlKXsKICAgICAgICAgICAgJHVhX3NvbCA9IGFycmF5KCJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIiwidXNlci1hZ2VudDogIi5maWxlX2dldF9jb250ZW50cygiVXNlcl9BZ2VudCIpLCJhY2NlcHQtbGFuZ3VhZ2U6IGlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43Iik7CiAgICAgICAgICAgICR1YV9pbWcgPSBhcnJheSgiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICAgICAgJGNoYWxsZW5nZSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJjaGFsbGVuZ2UiOiInLGdnKCRzb2wsJHVhX3NvbCkpWzFdKVswXTsKICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoImltYWdlLmpwZyIsIGdnKCdodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPScuJGNoYWxsZW5nZS4nO3c9MzAwO2g9MTUwO2ZnPTAwMDAwMDtiZz1mOGY4ZjgnLCR1YV9zb2wpKTsKICAgICAgICAgICAgJGJhc2UgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCdpbWFnZS5qcGcnKSk7CiAgICAgICAgICAgICRyZXMgPSBwcCgiaHR0cHM6Ly92aXNpb24uZ29vZ2xlYXBpcy5jb20vdjEvaW1hZ2VzOmFubm90YXRlP2tleT1BSXphU3lDM3ktRW00Mmh0U0I4VUVaUHFwdEo3OHJsdkw1OF9oNlkiLCd7InJlcXVlc3RzIjpbeyJpbWFnZSI6eyJjb250ZW50IjoiJy4kYmFzZS4nIn0sImZlYXR1cmVzIjpbeyJ0eXBlIjoiVEVYVF9ERVRFQ1RJT04ifV19XX0nLCR1YV9pbWcpOwogICAgICAgICAgICAkdmFyMT0gZXhwbG9kZSgnInRleHQiOiAiRW50ZXIgdGhlIGZvbGxvd2luZzpcbicsICRyZXMpOwogICAgICAgICAgICAkdmFyMiA9IGV4cGxvZGUoJ1xuIicsICR2YXIxWzFdKTsKICAgICAgICAgICAgJHZhcjMgPSAkdmFyMlswXTsKICAgICAgICAgICAgJGNhcCA9IHN0cl9yZXBsYWNlKCdcbicsJyAnLCR2YXIzKTsKICAgICAgICAgICAgJGNhcGNoYSA9IHByZWdfcmVwbGFjZSgiL1teYS16XS8iLCAiIiwgJGNhcCk7CiAgICAgICAgICAgIGlmKCRjYXBjaGEpewogICAgICAgICAgICBlY2hvICIkcHV0aWggVHJ5bmcgQnlwYXNzICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjsKICAgICAgICAgICAgcmV0dXJuICJhZGNvcHlfcmVzcG9uc2U9Ii4kY2FwY2hhLiImYWRjb3B5X2NoYWxsZW5nZT0iLiRjaGFsbGVuZ2U7CiAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkcHV0aWggUGxlYXNlIFdhaXQgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjt9fX0KZnVuY3Rpb24gYm90KCR4LCR5LCR6KXtyZXR1cm4gWyIrIi4keS4iKyIuJHouIisiLiR4LCIrIi4keC4iKyIuJHkuIisiLiR6LCIrIi4keC4iKyIuJHouIisiLiR5LCIrIi4keS4iKyIuJHguIisiLiR6LCIrIi4kei4iKyIuJHkuIisiLiR4LCIrIi4kei4iKyIuJHguIisiLiR5XTt9CmZ1bmN0aW9uIGJuMSgpewpzeXN0ZW0oImNsZWFyIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZWNobyBmYXN0KCIgIFwwMzNbMTs5N21EYXRlIDoiLmRhdGUoIiBEIG0gWSAiKSk7CmVjaG8gZmFzdCgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcMDMzWzE7OTdtVGltZSA6Ii5kYXRlKCIgSDppOnMgIikpOwplY2hvIGZhc3QoIlwwMzNbMTs5N21cbuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgX18gICBfX19fX19fICAgICAgICAgX19fX19fICAgICAgICAgIF8gICAgICAgICAgICAgICAgICBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgIFwgXCAvIC8gIF9fIFwgICAgICAgfCAgX19fX3wgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICAgXCBWIC98IHwgIHwgfF9fX19fX3wgfF9fIF9fIF8gXyBfXyB8IHxfIF9fIF8gX19fIF8gICBfIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgICA+IDwgfCB8ICB8IHxfX19fX198ICBfXy8gX2AgfCAnXyBcfCBfXy8gX2AgLyBfX3wgfCB8IHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgICAvIC4gXHwgfF9ffCB8ICAgICAgfCB8IHwgKF98IHwgfCB8IHwgfHwgKF98IFxfXyBcIHxffCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAvXy8gXF9cX19fX18vICAgICAgIHxffCAgXF9fLF98X3wgfF98XF9fXF9fLF98X19fL1xfXywgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX18vIHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfF9fXy8gXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtXG7ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcbiIpO30KICAgIGZ1bmN0aW9uIGJuMigpewogCmZhc3QoICJcMzNbMzE7MW3ilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gQ1JFQVRPUiAgIDpcZVsxOzM3bSBNU0tcbiIuJGVuZCk7CmZhc3QoICJcMzNbMzE7MW3ilZrilojilojilZfilojilojilZTilZ3ilojilojilZTilZDilZDilojilojilZciLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gVEhBTktTIFRPIDpcZVsxOzM3bSBUSEUgT05FIEFMTUlHSFRZIEdPRFxuIi4kZW5kKTsKZmFzdCggIiBcMzNbMzE7MW3ilZrilojilojilojilZTilZ0g4paI4paI4pWRICDilojilojilZEiLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU1VQUE9SVCAgIDpcZVsxOzM3bSBBTEwgVEVBTSBYRC1GQU5UQVNZXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN20g4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkSAg4paI4paI4pWRIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFNVUFBPUlQgICA6XGVbMTszN20gQkFCWUJPVCBDSEFOTkVMXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilojilojilZTilZ0g4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWU4pWdIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFNDUklQVCAgICA6XGVbMTszN20gYnRjYnVuY2guY29tXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gVkVSU0lPTiAgIDpcZVsxOzM3bSAxLjBcbiIuJGVuZCk7ICAKZ2FyaXMoKTsKZmFzdCgieyRtZXJhaH3inJMgV0FSTklORyEgUFJPR1JBTSBJTEVHQUwgU0VHQUxBIFJFU0lLTyBESSBUQU5HR1VORyBTRU5ESVJJXG4iKTsKZ2FyaXMoKTt9Ci8qIEVORCBGVU5DVElPTiAqLwpibjEoKTsKJHVzZXIgPSBTYXZlKCJDb29raWUiKTsKJHBhcyA9IFNhdmUoInVzZXItYWdlbnQiKTsKJHNvbCA9IFNhdmUoInVybF9zb2x2ZSIpOwoKc3lzdGVtKCJjbGVhciIpOwpibjIoKTsKJHJlcyA9IGdldChkYXNoKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHA+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwoKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnY2xhc3M9InRleHQtNzAwIG14LTIiID4nLCRyZXMpWzNdKVswXTsKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXl0Y29pbi5jb20vcHRjIik7CiRwdCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNCBjbGFzcz0ibGgtMSBtYi0xIj4nLCRyZXMpWzFdKVswXTsKZWNobyAiJHdoaXRlIEJhbGFuY2UgJGt1bmluZyB+PiRyZWQgJGJhbCAiLiRlbmQuIlxuIjsKZWNobyAiJHdoaXRlIENsYWltbGVmdCRrdW5pbmcgfj4kcmVkICRsaSAgIi4kZW5kLiJcbiI7CgpnYXJpcygpOwptZW51OgplY2hvIFNsb3coIiAkcmVkezF9JGhpamF1IEJ5cGFzcyBGYXVjZXQkeWVsbG93ICAiLiRlbmQuIlxuIik7CmVjaG8gU2xvdygiICRyZWR7Mn0kaGlqYXUgQnlwYXNzIFB0YyR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKJHBpbGloID0gcmVhZGxpbmUoIiR3aGl0ZSBJbnB1dCBOdW1iZXIgOiAiKTsKZ2FyaXMoKTsKaWYoJHBpbGloID09IDEpewpnb3RvIG1hbnVhbDsKfWVsc2VpZigkcGlsaWggPT0gMil7CmdvdG8gcHQ7Cn1lbHNlewplY2hvICIkcmVkIEJhZCBTZWxlY3QgTnVtYmVyISBcciI7CnNsZWVwKDIpOwpnb3RvIG1lbnU7Cn0KCm1hbnVhbDoKd2hpbGUodHJ1ZSl7CgoKJHJlcyA9IGdldChmYXVjZXQpOwppZihwcmVnX21hdGNoKCIvRmlyZXdhbGwvIiwkcmVzKSl7ZWNobyIgIi4kYmxvY2ttZXJhaC4kcHV0aWguIiBGaXJld2FsbCAiLiRlbmQuIlxuIjtHb3RvIHM7fQokY3NyZiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGsgPSBleHBsb2RlKCciJyxleHBsb2RlKCduYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGltZSA9IGV4cGxvZGUoJyAtIDE7JyxleHBsb2RlKCd2YXIgd2FpdCA9ICcsJHJlcylbMV0pWzBdOwppZigkdGltZSl7CnRtcigkdGltZSk7Cn0KJHVybD1maWxlX2dldF9jb250ZW50cygidXJsX3NvbHZlIik7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwokY2hhbGxlbmdlPWV4cGxvZGUoJyInLGV4cGxvZGUoJyJjaGFsbGVuZ2UiOiInLCRyZXMpWzFdKVswXTsKJHVybD0iaHR0cHM6Ly9hcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tL3BhcGkvbWVkaWE/Yz0kY2hhbGxlbmdlO3c9MzAwO2g9MTUwO2ZnPTAwMDAwMDtiZz1mOGY4ZjgiOwokcmVzPWN1cmwoJHVybCwnJyxzb2x2ZSgpKVsxXTsKbG9hZCgkcmVzLCdpbWFnZS5qcGcnKTsKJGNhcD1jYXB0Y2hhKCk7CgokcmVzID0gZ2V0KGZhdWNldCk7CmZvcigkaT0wOyRpPDc7JGkrKyl7CmlmKCRpPT02KXsKCQllY2hvIFNsb3coInskbWVyYWh9ICBJbnZhbGlkICAgICAgICAgICAgICAgICAgICAgICBcciIpOyAKCQlzbGVlcCgxKTsKCQlnb3RvIG1hbnVhbDsKCQkJfQoJCQlndXNzOgoJCQkkYiA9IGV4cGxvZGUoJ1wiI1wiIHJlbD1cIicsJHJlcyk7CgkJCSRiMSA9IGV4cGxvZGUoJ1wiJywkYlsxXSlbMF07CgkJCSRiMiA9IGV4cGxvZGUoJ1wiJywkYlsyXSlbMF07CgkJCSRiMyA9IGV4cGxvZGUoJ1wiJywkYlszXSlbMF07CgkJCSRib3QgPSBib3QoJGIxLCRiMiwkYjMpOyRib3RbJGldOwokY3NyZiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokdGsgPSBleHBsb2RlKCciJyxleHBsb2RlKCduYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwokZGF0YSA9ICJhbnRpYm90bGlua3M9JGJvdFskaV0mY3NyZl90b2tlbl9uYW1lPSRjc3JmJnRva2VuPSR0ayZjYXB0Y2hhPXNvbHZlbWVkaWEmYWRjb3B5X3Jlc3BvbnNlPSRjYXAmYWRjb3B5X2NoYWxsZW5nZT0kY2hhbGxlbmdlIjsKJHJlcyA9IHBvc3QodmZhdWNldCwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiJywiLGV4cGxvZGUoIkdvb2Qgam9iIScsICciLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMhPSIiKXsKJHJlcyA9IGdldChkYXNoKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGg1IGNsYXNzPSJmb250LXNpemUtMTUgdGV4dC10cnVuY2F0ZSI+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnY2xhc3M9InRleHQtNzAwIG14LTIiID4nLCRyZXMpWzNdKVswXTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJGdwdXRpaCBHb29kIGpvYiwgJHN1YyAgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIEJhbGFuY2UkeWVsbG93IH4+JHB1dGloICRiYWwgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIENsYWltJHllbGxvdyB+PiRwdXRpaCAkbGkgXG4iKTsKZ2FyaXMoKTsKaWYoJGxpPT0iMC8xMDAwIil7CmVjaG8iJG1lcmFoIENsYWltIExlZnQgSGFiaXNcbiI7CmV4aXQ7Cn0KZ290byBtYW51YWw7Cn1lbHNlewp9fQp9CgpwdDoKd2hpbGUodHJ1ZSl7CgokcmVzPWdldCgiaHR0cHM6Ly9idGNidW5jaC5jb20vcHRjIik7CiRpZCA9IGV4cGxvZGUoIiciLGV4cGxvZGUoJ2h0dHBzOi8vYnRjYnVuY2guY29tL3B0Yy92aWV3LycsJHJlcylbMV0pWzBdOwppZigkaWQ9PW51bGwpewplY2hvInskbWVyYWh9IFB0YyBIYWJpc1xuIjsKZ290byBtZW51O30KJHRpbWUgPSBleHBsb2RlKCJzZWNvbmRzIixleHBsb2RlKCc8aDUgY2xhc3M9ImZ3LWJvbGRlciBtYi0wIHRleHQtd2FybmluZyI+JywkcmVzKVsxXSlbMF07CiRyZXM9Z2V0KCJodHRwczovL2J0Y2J1bmNoLmNvbS9wdGMvdmlldy8kaWQiKTsKJGNzcmY9ZXhwbG9kZSgnIicsZXhwbG9kZSgnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZl90b2tlbl9uYW1lIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0az1leHBsb2RlKCciJyxleHBsb2RlKCc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ0b2tlbiIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwp0bXIoJHRpbWUpOwokdXJsPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfc29sdmUiKTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwpsb2FkKCRyZXMsJ2ltYWdlLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKaWYoJGNhcCE9IiIpewokZGF0YT0iY2FwdGNoYT1zb2x2ZW1lZGlhJmFkY29weV9yZXNwb25zZT0kY2FwJmFkY29weV9jaGFsbGVuZ2U9JGNoYWxsZW5nZSZjc3JmX3Rva2VuX25hbWU9JGNzcmYmdG9rZW49JHRrIjsKJHJlcz1wb3N0KCJodHRwczovL2J0Y2J1bmNoLmNvbS9wdGMvdmVyaWZ5LyRpZCIsJGRhdGEpOwokc3VjPWV4cGxvZGUoJ2hhcyBiZWVuICcsZXhwbG9kZSgiR29vZCBqb2IhJywgJyIsJHJlcylbMV0pWzBdOwppZigkc3VjIT0iIil7CiRyZXMgPSBnZXQoZGFzaCk7CiR1c2VybmFtZSA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNSBjbGFzcz0iZm9udC1zaXplLTE1IHRleHQtdHJ1bmNhdGUiPicsJHJlcylbMV0pWzBdOwokYmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHAgY2xhc3M9ImZvbnQtc2Fucy1zZXJpZiBsaC0xIG1iLTEgZnMtMiI+JywkcmVzKVsxXSlbMF07CiRyZXMgPSBnZXQoZmF1Y2V0KTsKJGNsYSA9IGV4cGxvZGUoIjwvcD4iLGV4cGxvZGUoJzxpIGNsYXNzPSJmYXMgZmEtZ2lmdHMgdGV4dC1zdWNjZXNzIGZhLTJ4Ij48L2k+JywkcmVzKVsxXSlbMF07CiRsaWYgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cCBjbGFzcz0ibGgtMSBtYi0xIGZvbnQtd2VpZ2h0LWJvbGQiPicsJGNsYSlbMV0pWzBdOwplY2hvIFNsb3coIiRoaWphdSA+ICRncHV0aWggR29vZCBqb2IsICRzdWMgYWRkZWQgdG8geW91ciBiYWxhbmNlIFxuIik7CmVjaG8gU2xvdygiJGhpamF1ID4gJHdoaXRlIEJhbGFuY2UkeWVsbG93IH4+JHB1dGloICRiYWwgXG4iKTsKCmdhcmlzKCk7Cn1lbHNle319fQoKCnM6CndoaWxlKHRydWUpewokdXJsPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfc29sdmUiKTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwpsb2FkKCRyZXMsJ2ltYWdlLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKaWYoJGNhcCE9IiIpewplY2hvIFNsb3coInskbWVyYWh9IEdldCBTb2x2ZSBcciIpOyAKc2xlZXAoMSk7Cn1lbHNlewoKZ290byBzOwogICAgfQokdXJsPSJodHRwczovL2J0Y2J1bmNoLmNvbS9maXJld2FsbCI7CiRyZXM9Y3VybCgkdXJsLCcnLGhlYWQoKSlbMV07CiRjc3JmPWV4cGxvZGUoJyInLGV4cGxvZGUoJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNzcmZfdG9rZW5fbmFtZSIgdmFsdWU9IicsJHJlcylbMV0pWzBdOwoKJHVybD0iaHR0cHM6Ly9idGNidW5jaC5jb20vZmlyZXdhbGwvdmVyaWZ5IjsKJGRhdGE9ImFkY29weV9yZXNwb25zZT0iLiRjYXAuIiZhZGNvcHlfY2hhbGxlbmdlPSIuJGNoYWxsZW5nZS4iJmNhcHRjaGFUeXBlPXNvbHZlbWVkaWEmY3NyZl90b2tlbl9uYW1lPSIuJGNzcmY7CiRyZXM9Y3VybCgkdXJsLCRkYXRhLGhlYWQoKSlbMV07CiRjbGEgPSBleHBsb2RlKCI8L3A+IixleHBsb2RlKCc8aSBjbGFzcz0iZmFzIGZhLWZpcmUgZmEtdy0yMCBmcy0yIHRleHQtZGFuZ2VyIj48L2k+JywkcmVzKVsxXSlbMF07CiRzdWMgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKCmlmKCRzdWMpewpmYXN0KCRoaWphdS4gIj5fIFN1Y2Nlc3MgQnlwYXNzIEZpcmV3YWxsXHIiKTsKc2xlZXAoNSk7CgpnYXJpcygpOwpnb3RvIG1hbnVhbDsKfWVsc2V7Cgpnb3RvIHM7fX0KCj8+Cg==",
"faucetuno":"CmRhdGVfZGVmYXVsdF90aW1lem9uZV9zZXQoIkFzaWEvSmFrYXJ0YSIpO3N5c3RlbSgiY2xlYXIiKTskaGlqYXUgPSAiXDMzWzMyOzFtIjskYmlydSA9ICJcMzNbMDszNm0iOyRiaXJ1MSA9ICJcZVsxOzM0bSI7JG1lcmFoID0gIlwzM1szMTsxbSI7JHB1dGloID0gIlxlWzE7MzdtIjskZGFyaz0iXDAzM1sxOzMwbSI7JGt1bmluZyA9ICJcMzNbMTszM20iOyRjeWFuID0gIlxlWzE7MzZtIjskdW5ndSA9ICJcZVsxOzM1bSI7JGFidSA9ICJcZVsxOzMwbSI7JGVuZCA9ICJcMDMzWzBtIjskYmFidSA9ICJcMDMzWzEwMG0iOyRibWVyYWggPSAiXDAzM1sxMDFtIjskYnN0YWJpbG8gPSAiXDAzM1sxMDJtIjskYmt1bmluZyA9ICJcMDMzWzEwM20iOyRiYmlydSA9ICJcMDMzWzEwNG0iOyRicGluayA9ICJcMDMzWzEwNW0iOyRiY3lhbiA9ICJcMDMzWzEwNm0iOyRicHV0aWggPSAiXDAzM1sxMDdtIjskYmlydT0iXDAzM1sxOzM0bSI7JGt1bmluZz0iXDAzM1sxOzMzbSI7JG1lcmFoPSJcMDMzWzE7MzFtIjskcHV0aWg9IlwwMzNbMTszN20iOyRoaWphdT0iXDAzM1sxOzMybSI7JGN5YW49IlwwMzNbMTszNm0iOyR1bmd1PSJcMDMzWzE7MzVtIjskZGFyaz0iXDAzM1sxOzMwbSI7JGFidSA9ICJcMDMzWzA7OTBtIjskYWJ1MSA9ICJcMDMzWzE7OTBtIjskbWVyYWgxID0gIlwwMzNbMTs5MW0iOyRlbmQgPSAiXDAzM1swbSI7JGJsb2NrYWJ1ID0gIlwwMzNbMTAwbSI7JGJsb2NrbWVyYWggPSAiXDAzM1sxMDFtIjskYmxvY2tzdGFiaWxvID0gIlwwMzNbMTAybSI7JGJsb2Nra3VuaW5nID0gIlwwMzNbMTAzbSI7JGJsb2NrYmlydSA9ICJcMDMzWzEwNG0iOyRibG9ja3BpbmsgPSAiXDAzM1sxMDVtIjskYmxvY2tjeWFuID0gIlwwMzNbMTA2bSI7JGJsb2NrcHV0aWggPSAiXDAzM1sxMDdtIjskdGVybXV4PSAkY3lhbi4iPl8gIjsKY29uc3QKdGl0bGUgPSAiZmF5dGNvaW4iLApkYXNoID0gImh0dHBzOi8vYnRjYnVuY2guY29tL2Rhc2hib2FyZCIsCmZhdWNldCA9ICJodHRwczovL2J0Y2J1bmNoLmNvbS9mYXVjZXQiLAp2ZmF1Y2V0ID0gImh0dHBzOi8vYnRjYnVuY2guY29tL2ZhdWNldC92ZXJpZnkiOwoKZnVuY3Rpb24gcygpeyRyZXM9ZmlsZV9nZXRfY29udGVudHMoYmFzZTY0X2RlY29kZSgiYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMU41ZFd0eWIyNHhNaTlUZVhWcmNtOXVNVEl2YldGcGJpOXpaWEoyWlhJdWNHaHciKSk7JGR1PWV4cGxvZGUoJyMnLGV4cGxvZGUoJyMnLnRpdGxlLic6JywkcmVzKVsxXSlbMF07JGN1PWV4cGxvZGUoJ3wnLCRkdSlbMF07O2lmKCRjdSA9PSAib2ZmIiB8fCAkY3UgPT0gbnVsbCl7Ym4xKCk7ZWNobyRtZXJhaC4iXDMzWzMxOzFtIFNjcmlwdCBEaSBOb25ha3RpZmthblxuIjtlY2hvJG1lcmFoLiJcMzNbMzE7MW0gQnkgTXNrIE9mZmljaWFsIFxuIjtleGl0O31pZigkY3U9PSJvbiIpe319cygpOwpmdW5jdGlvbiBhbmltYXNpKCRzdHIpIHsgJGFyciA9IHN0cl9zcGxpdCgkc3RyKTtmb3JlYWNoICgkYXJyIGFzICRheikgeyBlY2hvICRhejsgdXNsZWVwKDMwMCk7IH19ZnVuY3Rpb24gY2VrKCRzdHIpIHskYXJyID0gc3RyX3NwbGl0KCRzdHIpOyBmb3JlYWNoKCRhcnIgYXMgJGF6KSB7ZWNobyAkYXo7IHVzbGVlcCg5MDAwKTt9fWZ1bmN0aW9uIGZhc3QoJHN0cil7JHJhciA9IHN0cl9zcGxpdCgkc3RyKTtmb3JlYWNoKCRyYXIgYXMgJHp6KXtlY2hvICR6ejt1c2xlZXAoMzAwMCk7fX1mdW5jdGlvbiBhbigkc3RyKXsgJGFyciA9IHN0cl9zcGxpdCgkc3RyKTsgZm9yZWFjaCAoJGFyciBhcyAkYXopeyBlY2hvICRhejsgdXNsZWVwKDE5OTk5KTt9fWZ1bmN0aW9uIGxvYWQoJGRhdGEsICRmaWxlKXskaGFuZGxlID0gZm9wZW4oJGZpbGUsICd3Jyk7ZndyaXRlKCRoYW5kbGUsICRkYXRhKTtmY2xvc2UoJGhhbmRsZSk7IH1mdW5jdGlvbiBnYXJpcygpe2VjaG8gJHB1dGloLiLilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAiLiRlbmQuIlxuIjt9Ci8qIEZVTkNUSU9OICovCmZ1bmN0aW9uIGMoKXtzeXN0ZW0oJ2NsZWFyJyk7fQpmdW5jdGlvbiB3ZWIoJHVybCl7JGNoPWN1cmxfaW5pdCgpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1VSTCwkdXJsKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpO3JldHVybiBjdXJsX2V4ZWMoJGNoKTt9CmZ1bmN0aW9uIHgoJGF3YWwsJGFraGlyLCRyZXMsJG5vKXskZGF0YSA9IGV4cGxvZGUoJGF3YWwsZXhwbG9kZSgkYWtoaXIsJHJlcylbJG5vXSlbMF07cmV0dXJuICRkYXRhO30KCmZ1bmN0aW9uIFNsb3coJG1zZyl7JHNsb3cgPSBzdHJfc3BsaXQoJG1zZyk7Zm9yZWFjaCggJHNsb3cgYXMgJHNsb3dtbyApeyBlY2hvICRzbG93bW87IHVzbGVlcCgxMDAwKTt9fQkKCmZ1bmN0aW9uIFNhdmUoJG5hbWFkYXRhKXtpZihmaWxlX2V4aXN0cygkbmFtYWRhdGEpKXskZGF0YSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRuYW1hZGF0YSk7fWVsc2V7JGRhdGEgPSByZWFkbGluZSgiXDAzM1sxOzMybSBJbnB1dCAiLiRuYW1hZGF0YS4iIDogICIpO2ZpbGVfcHV0X2NvbnRlbnRzKCRuYW1hZGF0YSwkZGF0YSk7fXJldHVybiAkZGF0YTt9cygpOwpmdW5jdGlvbiBwdygpewpwczoKJGQ9ZGF0ZSgiRCIpOwoKJGdldD1maWxlX2dldF9jb250ZW50cyhiYXNlNjRfZGVjb2RlKCJhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwxTjVkV3R5YjI0eE1pOVRlWFZyY205dU1USXZiV0ZwYmk5d2R5NXdhSEE9IikpOwoKJGxpbmsgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5MaW5rOwokbGluazIgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5MaW5rMjsgJHB3ID0ganNvbl9kZWNvZGUoJGdldCktPlBhc3N3b3JkLT4kZC0+UGFzc3dvcmQ7IGlmKCRsaW5rKXsKJHJlYWQgPSBmaWxlX2dldF9jb250ZW50cygia2V5X2ZhdWNldHVuby50eHQiKTsKaWYoJHJlYWQgIT0gJHB3KXsKYm4xKCk7CmVjaG8gIiRoaWphdSAgTEluayAgOiRwdXRpaCAkbGlua1xuIjsKCiAgICAgICAgICAgICRwID0gcmVhZGxpbmUoIiRoaWphdSBJbnB1dCBEaXNpbmk6ICIpOwogICAgICAgICAgICAgICAgaWYoJHAgPT0gJHB3KXsKICAgICAgICAgICAgICAgICAgICBibjEoKTsKICAgICAgICAgICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygna2V5X2ZhdWNldHVuby50eHQnLCRwKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICIkbWVyYWggUGFzc3dvcmQgQ29ycmVjdCDiiJogXG4iOwogICAgICAgICAgICAgICAgICAgIHNsZWVwKDEpOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgYm4xKCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJG1lcmFoICBJbnZhbGlkIFBhc3N3b3JkIVxuIjsKICAgICAgICAgICAgICAgICAgICBnb3RvIHBzOwogICAgICAgICAgICAgICAgfQogICAgICAgIH1lbHNlewogICAgICAgIH0KfWVsc2V7CgogICBlY2hvICIkbWVyYWggUGxlYXNlIGNlayB5b3VyIGNvbmVjdGlvbiFcbiI7CiAgICBleGl0Owp9fVN5c3RlbSgiY2xlYXIiKTsKCiBmdW5jdGlvbiB0bXIoJHRtZXIpeyRjb2xvciA9IGFycmF5KCJcMDMzWzE7MzdtIiwiXDAzM1swOzMxbSIsIlwwMzNbMDszM20iLCJcMDMzWzA7MzJtIiwiXDAzM1swOzM0bSIsIlwwMzNbMDszNW0iKTskdGltZXI9dGltZSgpKyR0bWVyO3doaWxlKHRydWUpOmVjaG8iXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcciI7JHJlcz0kdGltZXItdGltZSgpOyBpZigkcmVzIDwgMSl7YnJlYWs7fSR0bSA9ICBkYXRlKCcgaTpzICcsJHJlcyk7ZWNobyIgXDAzM1sxOzM3bSBbIi4kY29sb3JbcmFuZCgwLGNvdW50KCRjb2xvciktMSldLiR0bS4iXDAzM1sxOzM3bV0iO3NsZWVwKDEpO2VuZHdoaWxlO30KIGZ1bmN0aW9uIGdnKCR1cmwsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgJHVhKVsxXTt9CiBmdW5jdGlvbiBwcCgkdXJsLCAkZGF0YSwgJHVhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgJHVhKVsxXTt9CmZ1bmN0aW9uIGJhc2U2NCgkc3RyKXtyZXR1cm4gYmFzZTY0X2VuY29kZSgkc3RyKTt9CmZ1bmN0aW9uIGdldCgkdXJsKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIGdldHNvbHZlKCRzb2wpe3JldHVybiBjdXJsKCRzb2wsIG51bGwsIHNvbHZlKCkpWzFdO30KZnVuY3Rpb24gYW5zd2VyKCR4LCR5LCR6KXtpZigkeCArICR5ID09ICR6KXtyZXR1cm4gImFkZCI7fWVsc2VpZigkeCAtICR5ID09ICR6KXtyZXR1cm4gInN1YiI7fWVsc2VpZigkeCAqICR5ID09ICR6KXtyZXR1cm4gIm11bHRpcGx5Ijt9ZWxzZWlmKCR4ICUgJHkpe3JldHVybiAiZGl2aWRlIjt9ZWxzZXtyZXR1cm4gMDt9fQpmdW5jdGlvbiBjdXJsKCR1cmwsICRwb3N0ID0gMCwgJGh0dHBoZWFkZXIgPSAwLCAkcHJveHkgPSAwKXsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7CiAgICAgIC8vICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFRklMRSwiY29va2llLnR4dCIpOwogICAgLy8gICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFSkFSLCJjb29raWUudHh0Iik7CiAgICAgICAgaWYoJHBvc3QpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAkcG9zdCk7CiAgICAgICAgfQogICAgICAgIGlmKCRodHRwaGVhZGVyKXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRodHRwaGVhZGVyKTsKICAgICAgICB9CiAgICAgICAgaWYoJHByb3h5KXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBQUk9YWVRVTk5FTCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QUk9YWSwgJHByb3h5KTsKICAgICAgICAgICAgLy8gY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZVFlQRSwgQ1VSTFBST1hZX1NPQ0tTNSk7CiAgICAgICAgfQogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IRUFERVIsIHRydWUpOwogICAgICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgICAgICRodHRwY29kZSA9IGN1cmxfZ2V0aW5mbygkY2gpOwogICAgICAgIGlmKCEkaHR0cGNvZGUpIHJldHVybiAiQ3VybCBFcnJvciA6ICIuY3VybF9lcnJvcigkY2gpOyBlbHNlewogICAgICAgICAgICAkaGVhZGVyID0gc3Vic3RyKCRyZXNwb25zZSwgMCwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAgICAgJGJvZHkgPSBzdWJzdHIoJHJlc3BvbnNlLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7CiAgICAgICAgICAgIHJldHVybiBhcnJheSgkaGVhZGVyLCAkYm9keSk7CiAgICAgICAgfQogICAgfQpmdW5jdGlvbiBoKCl7CiR1YVtdPSJIb3N0OiBsdWNreWRpY2UubmV0IjsKJHVhW109IkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCI7CiR1YVtdPSJyZWZlcmVyOmh0dHBzOi8vbHVja3lkaWNlLm5ldC9mYXVjZXQiOwokdWFbXT0iVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMSI7CiR1YVtdPSJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4xLjI7IFJlZG1pIDRBIEJ1aWxkL04yRzQ3SCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzY2LjAuMzM1OS4xNTggTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXT0ieC1yZXF1ZXN0ZWQtd2l0aDogWE1MSHR0cFJlcXVlc3QiOwogIHJldHVybiAkdWE7Cn0KZnVuY3Rpb24gaGVhZCgpewokdWFbXT0iSG9zdDogZmF1Y2V0dW5vLmNvbSI7CiR1YVtdPSJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCI7CiR1YVtdPSJVc2VyLUFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50X2ZhdWNldHVubyIpOwokdWFbXT0iQ29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJDb29raWVfZmF1Y2V0dW5vIik7CiAgcmV0dXJuICR1YTsKfQpmdW5jdGlvbiBzb2x2ZSgpewokdWFbXT0iSG9zdDogYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbSI7CiR1YVtdPSJ1c2VyLWFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50Iik7CiR1YVtdPSJhY2NlcHQtbGFuZ3VhZ2U6IGlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43IjsKIHJldHVybiAkdWE7Cn0KZnVuY3Rpb24gdjMoKXsKJGhbXT0iSG9zdDogd3d3Lmdvb2dsZS5jb20iOwokaFtdPSJDb29raWU6ICIuZmlsZV9nZXRfY29udGVudHMoImNvb2tpZV9hbmNob3IiKTsKJGhbXT0iVXNlci1BZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwpyZXR1cm4gJGg7Cn0KZnVuY3Rpb24gcmV2MygpewoKd2hpbGUodHJ1ZSl7CiRhY3IgPWZpbGVfZ2V0X2NvbnRlbnRzKCJ1cmxfYW5jaG9yIik7CiRjb3I9ZXhwbG9kZSgnJicsZXhwbG9kZSgnJms9JywkYWNyKVsxXSlbMF07CiRrID0gZXhwbG9kZSgiJiIsJGFjcilbMV07CiRjbyA9IGV4cGxvZGUoIiYiLCRhY3IpWzJdOwokdiA9IGV4cGxvZGUoIiYiLCRhY3IpWzRdOwokdjMgPSBjdXJsKCRhY3IsbnVsbCx2MygpKVsxXTsKJHYzdG9rZW4gPSBleHBsb2RlKCciJyxleHBsb2RlKCdpZD0icmVjYXB0Y2hhLXRva2VuIiB2YWx1ZT0iJywkdjMpWzFdKVswXTsKJGFjcjIgPSAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpMi9yZWxvYWQ/az0kY29yIjsKJGRhdGEgPSAiJHYmcmVhc29uPXEmYz0kdjN0b2tlbiYkdiYkY28iOwokdjNfdmVyaWYgPSBjdXJsKCRhY3IyLCAkZGF0YSwgdjMoKSlbMV07CiR2MzEgPSBleHBsb2RlKCciJyxleHBsb2RlKCcicnJlc3AiLCInLCR2M192ZXJpZilbMV0pWzBdOwogIGlmKCR2MzEpewogICAgICAgICAgICAgICAgZWNobyBTbG93KCJ7JG1lcmFofSBnZXQgY2FwdGNoYS4gICAgIFxyIik7IApzbGVlcCgxKTsKICAgICAgICAgICAgICAgIHJldHVybiAkdjMxOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIFNsb3coIiB7JG1lcmFofSBwbGVhc2Ugd2FpdCAgICAgICAgICAgIFxyIik7CiAgICAgICAgICAgIH0KICAgIH0KfXB3KCk7CmZ1bmN0aW9uIGNhcHRjaGEoKXsKJGdtYmFyPWZpbGVfZ2V0X2NvbnRlbnRzKCdpbWFnZS5qcGcnKTsKJGJhc2U9YmFzZTY0KCRnbWJhcik7CiR1YSA9IGFycmF5KCk7CiR1YVtdID0gIlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMTsgUk1YMzE5MSBCdWlsZC9SUDFBLjIwMDcyMC4wMTE7KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvOTguMC40NzU4Ljg3IE1vYmlsZSBTYWZhcmkvNTM3LjM2IjsKJHVhW10gPSAiY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9qc29uIjsKJGNoID0gY3VybF9pbml0KCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICJodHRwczovL3Zpc2lvbi5nb29nbGVhcGlzLmNvbS92MS9pbWFnZXM6YW5ub3RhdGU/a2V5PUFJemFTeUMzeS1FbTQyaHRTQjhVRVpQcXB0Sjc4cmx2TDU4X2g2WSIpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJHVhKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIDApOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJ3sicmVxdWVzdHMiOlt7ImltYWdlIjp7ImNvbnRlbnQiOiInLiRiYXNlLicifSwiZmVhdHVyZXMiOlt7InR5cGUiOiJURVhUX0RFVEVDVElPTiJ9XX1dfScpOwokcmVzID0gY3VybF9leGVjKCRjaCk7CiR2YXIxPSBleHBsb2RlKCcidGV4dCI6ICJFbnRlciB0aGUgZm9sbG93aW5nOlxuJywgJHJlcyk7CiR2YXIyID0gZXhwbG9kZSgnXG4iJywgJHZhcjFbMV0pOwokdmFyMyA9ICR2YXIyWzBdOwokY2FwPXN0cl9yZXBsYWNlKCdcbicsJyAnLCR2YXIzKTsKJGNhcGNoYSA9IHByZWdfcmVwbGFjZSgiL1teYS16XS8iLCAiIiwgJGNhcCk7CnJldHVybiAkY2FwY2hhOwp9CmZ1bmN0aW9uIHNvbHZlbWVkaWEoJHNvbCl7CiAgICAgICAgd2hpbGUodHJ1ZSl7CiAgICAgICAgICAgICR1YV9zb2wgPSBhcnJheSgiSG9zdDogYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbSIsInVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoIlVzZXJfQWdlbnQiKSwiYWNjZXB0LWxhbmd1YWdlOiBpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyIpOwogICAgICAgICAgICAkdWFfaW1nID0gYXJyYXkoIlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMTsgUk1YMzE5MSBCdWlsZC9SUDFBLjIwMDcyMC4wMTE7KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvOTguMC40NzU4Ljg3IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwiY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgICAgICAgICRjaGFsbGVuZ2UgPSBleHBsb2RlKCciJyxleHBsb2RlKCciY2hhbGxlbmdlIjoiJyxnZygkc29sLCR1YV9zb2wpKVsxXSlbMF07CiAgICAgICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCJpbWFnZS5qcGciLCBnZygnaHR0cHM6Ly9hcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tL3BhcGkvbWVkaWE/Yz0nLiRjaGFsbGVuZ2UuJzt3PTMwMDtoPTE1MDtmZz0wMDAwMDA7Ymc9ZjhmOGY4JywkdWFfc29sKSk7CiAgICAgICAgICAgICRiYXNlID0gYmFzZTY0X2VuY29kZShmaWxlX2dldF9jb250ZW50cygnZmF1Y2V0dW5vLmpwZycpKTsKICAgICAgICAgICAgJHJlcyA9IHBwKCJodHRwczovL3Zpc2lvbi5nb29nbGVhcGlzLmNvbS92MS9pbWFnZXM6YW5ub3RhdGU/a2V5PUFJemFTeUMzeS1FbTQyaHRTQjhVRVpQcXB0Sjc4cmx2TDU4X2g2WSIsJ3sicmVxdWVzdHMiOlt7ImltYWdlIjp7ImNvbnRlbnQiOiInLiRiYXNlLicifSwiZmVhdHVyZXMiOlt7InR5cGUiOiJURVhUX0RFVEVDVElPTiJ9XX1dfScsJHVhX2ltZyk7CiAgICAgICAgICAgICR2YXIxPSBleHBsb2RlKCcidGV4dCI6ICJFbnRlciB0aGUgZm9sbG93aW5nOlxuJywgJHJlcyk7CiAgICAgICAgICAgICR2YXIyID0gZXhwbG9kZSgnXG4iJywgJHZhcjFbMV0pOwogICAgICAgICAgICAkdmFyMyA9ICR2YXIyWzBdOwogICAgICAgICAgICAkY2FwID0gc3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwogICAgICAgICAgICAkY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKICAgICAgICAgICAgaWYoJGNhcGNoYSl7CiAgICAgICAgICAgIGVjaG8gIiRwdXRpaCBUcnluZyBCeXBhc3MgICAgICAgICAgICAgICAgICAgICAgICAgXHIiOwogICAgICAgICAgICByZXR1cm4gImFkY29weV9yZXNwb25zZT0iLiRjYXBjaGEuIiZhZGNvcHlfY2hhbGxlbmdlPSIuJGNoYWxsZW5nZTsKICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGVjaG8gIiRwdXRpaCBQbGVhc2UgV2FpdCAgICAgICAgICAgICAgICAgICAgICAgICAgXHIiO319fQpmdW5jdGlvbiBib3QoJHgsJHksJHope3JldHVybiBbIisiLiR5LiIrIi4kei4iKyIuJHgsIisiLiR4LiIrIi4keS4iKyIuJHosIisiLiR4LiIrIi4kei4iKyIuJHksIisiLiR5LiIrIi4keC4iKyIuJHosIisiLiR6LiIrIi4keS4iKyIuJHgsIisiLiR6LiIrIi4keC4iKyIuJHldO30KZnVuY3Rpb24gYm4xKCl7CnN5c3RlbSgiY2xlYXIiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAplY2hvIGZhc3QoIiAgXDAzM1sxOzk3bURhdGUgOiIuZGF0ZSgiIEQgbSBZICIpKTsKZWNobyBmYXN0KCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwwMzNbMTs5N21UaW1lIDoiLmRhdGUoIiBIOmk6cyAiKSk7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bVxu4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICBfXyAgIF9fX19fX18gICAgICAgICBfX19fX18gICAgICAgICAgXyAgICAgICAgICAgICAgICAgIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgXCBcIC8gLyAgX18gXCAgICAgICB8ICBfX19ffCAgICAgICAgfCB8ICAgICAgICAgICAgICAgICBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgICBcIFYgL3wgfCAgfCB8X19fX19ffCB8X18gX18gXyBfIF9fIHwgfF8gX18gXyBfX18gXyAgIF8gXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICAgID4gPCB8IHwgIHwgfF9fX19fX3wgIF9fLyBfYCB8ICdfIFx8IF9fLyBfYCAvIF9ffCB8IHwgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgIC8gLiBcfCB8X198IHwgICAgICB8IHwgfCAoX3wgfCB8IHwgfCB8fCAoX3wgXF9fIFwgfF98IHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgIC9fLyBcX1xfX19fXy8gICAgICAgfF98ICBcX18sX3xffCB8X3xcX19cX18sX3xfX18vXF9fLCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfXy8gfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8X19fLyBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N21cbuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIik7fQogICAgZnVuY3Rpb24gYm4yKCl7CiAKZmFzdCggIlwzM1szMTsxbeKWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtICBb4pyTXSBDUkVBVE9SICAgOlxlWzE7MzdtIE1TS1xuIi4kZW5kKTsKZmFzdCggIlwzM1szMTsxbeKVmuKWiOKWiOKVl+KWiOKWiOKVlOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBUSEFOS1MgVE8gOlxlWzE7MzdtIFRIRSBPTkUgQUxNSUdIVFkgR09EXG4iLiRlbmQpOwpmYXN0KCAiIFwzM1szMTsxbeKVmuKWiOKWiOKWiOKVlOKVnSDilojilojilZEgIOKWiOKWiOKVkSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBTVVBQT1JUICAgOlxlWzE7MzdtIEFMTCBURUFNIFhELUZBTlRBU1lcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3bSDilojilojilZTilojilojilZcg4paI4paI4pWRICDilojilojilZEiLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU1VQUE9SVCAgIDpcZVsxOzM3bSBCQUJZQk9UIENIQU5ORUxcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3beKWiOKWiOKVlOKVnSDilojilojilZfilojilojilojilojilojilojilZTilZ0iLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU0NSSVBUICAgIDpcZVsxOzM3bSBidGNidW5jaC5jb21cbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3beKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtICBb4pyTXSBWRVJTSU9OICAgOlxlWzE7MzdtIDEuMFxuIi4kZW5kKTsgIApnYXJpcygpOwpmYXN0KCJ7JG1lcmFofeKckyBXQVJOSU5HISBQUk9HUkFNIElMRUdBTCBTRUdBTEEgUkVTSUtPIERJIFRBTkdHVU5HIFNFTkRJUklcbiIpOwpnYXJpcygpO30KLyogRU5EIEZVTkNUSU9OICovCmJuMSgpOwokdXNlciA9IFNhdmUoIkNvb2tpZV9mYXVjZXR1bm8iKTsKJHBhcyA9IFNhdmUoInVzZXItYWdlbnRfZmF1Y2V0dW5vIik7CgoKc3lzdGVtKCJjbGVhciIpOwpibjIoKTsKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXVjZXR1bm8uY29tL2Rhc2hib2FyZCIpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGJhbCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxkaXYgY2xhc3M9InRleHQtM3hsIGZvbnQtbWVkaXVtIGxlYWRpbmctOCBtdC02Ij4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXVjZXR1bm8uY29tL2NsYWltIik7CgokbGkgPSBleHBsb2RlKCI8IixleHBsb2RlKCcgPGRpdiBjbGFzcz0idGV4dC0zeGwgZm9udC1tZWRpdW0gbGVhZGluZy04IG10LTYiPicsJHJlcylbNF0pWzBdOwokcmVzID0gZ2V0KCJodHRwczovL2ZheXRjb2luLmNvbS9wdGMiKTsKJHB0ID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGg0IGNsYXNzPSJsaC0xIG1iLTEiPicsJHJlcylbMV0pWzBdOwplY2hvICIkd2hpdGUgQmFsYW5jZSAka3VuaW5nIH4+JHJlZCAkYmFsICIuJGVuZC4iXG4iOwplY2hvICIkd2hpdGUgQ2xhaW1sZWZ0JGt1bmluZyB+PiRyZWQgJGxpICAiLiRlbmQuIlxuIjsKCmdhcmlzKCk7Cm1lbnU6CmVjaG8gU2xvdygiICRyZWR7MX0kaGlqYXUgQnlwYXNzIEZhdWNldCR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKCiRwaWxpaCA9IHJlYWRsaW5lKCIkd2hpdGUgSW5wdXQgTnVtYmVyIDogIik7CmdhcmlzKCk7CmlmKCRwaWxpaCA9PSAxKXsKZ290byBtYW51YWw7Cn1lbHNlaWYoJHBpbGloID09IDQ0Mil7CmdvdG8gcHQ7Cn1lbHNlewplY2hvICIkcmVkIEJhZCBTZWxlY3QgTnVtYmVyISBcciI7CnNsZWVwKDIpOwpnb3RvIG1lbnU7Cn0KCm1hbnVhbDoKd2hpbGUodHJ1ZSl7CgoKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXVjZXR1bm8uY29tL2NsYWltIik7CiRsaWwgPSBleHBsb2RlKCIvIixleHBsb2RlKCcgPGRpdiBjbGFzcz0idGV4dC0zeGwgZm9udC1tZWRpdW0gbGVhZGluZy04IG10LTYiPicsJHJlcylbNF0pWzBdOwppZigkbGlsPT0wKXsKZWNobyJ7JG1lcmFofSBDbGFpbWxlZnQgSGFiaXNcbiI7CmV4aXQ7Cn0KaWYocHJlZ19tYXRjaCgiL0ZpcmV3YWxsLyIsJHJlcykpe2VjaG8iICIuJGJsb2NrbWVyYWguJHB1dGloLiIgRmlyZXdhbGwgIi4kZW5kLiJcbiI7R290byBzO30KJGNzcmYgPSBleHBsb2RlKCciJyxleHBsb2RlKCdpZD0idG9rZW4iIHZhbHVlPSInLCRyZXMpWzFdKVswXTsKJHRrID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnbmFtZT0idG9rZW4iIHZhbHVlPSInLCRyZXMpWzFdKVswXTsKJHRpbWUgPSBleHBsb2RlKCcgLSAxOycsZXhwbG9kZSgndmFyIHdhaXQgPSAnLCRyZXMpWzFdKVswXTsKaWYoJHRpbWUpewp0bXIoJHRpbWUpOwp9CiR1cmw9Imh0dHBzOi8vYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbS9wYXBpL19jaGFsbGVuZ2UuanM/az1DZmVrZHhBRTR5WDJCMWtOdlVpdEpzZFM2QjI3LkFvYztmPV9BQ1B1enpsZVV0aWwuY2FsbGJhY2tzWzBdO2w9ZW47dD1pbWc7cz1zdGFuZGFyZDtjPWpzLGg1YyxoNWN0LHN2ZyxoNXYsdi9oMjY0LHYvd2VibSxoNWEsYS9tcDMsYS9vZ2csdWEvY2hyb21lLHVhL2Nocm9tZTEwNyxvcy9hbmRyb2lkLG9zL2FuZHJvaWQxMSxmd3YvQjlxZUlnLnl2Y2YxNCxodG1scGx1czthbT0zWndpcG1aMXE0LmFScnBrWm5Xcmp3O2NhPXNjcmlwdDt0cz0xNjcyNDc3MjU1O2N0PTE2NzI0Nzc4NjM7dGg9d2hpdGU7cj0wLjc1NjU2NzEwMDc2MTI3NDQiOwokcmVzPWN1cmwoJHVybCwnJyxzb2x2ZSgpKVsxXTsKJGNoYWxsZW5nZT1leHBsb2RlKCciJyxleHBsb2RlKCciY2hhbGxlbmdlIjoiJywkcmVzKVsxXSlbMF07CiR1cmw9Imh0dHBzOi8vYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbS9wYXBpL21lZGlhP2M9JGNoYWxsZW5nZTt3PTMwMDtoPTE1MDtmZz0wMDAwMDA7Ymc9ZjhmOGY4IjsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CmxvYWQoJHJlcywnZmF1Y2V0dW5vLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKaWYoJGNhcCl7CmVjaG8gU2xvdygieyRtZXJhaH0gR2V0IFNvbHZlIFxyIik7IAokcmVzID0gZ2V0KCJodHRwczovL2ZhdWNldHVuby5jb20vY2xhaW0iKTsKZm9yKCRpPTA7JGk8NzskaSsrKXsKaWYoJGk9PTYpewoJCWVjaG8gU2xvdygieyRtZXJhaH0gIEludmFsaWQgICAgICAgICAgICAgICAgICAgICAgIFxyIik7IAoJCXNsZWVwKDEpOwoJCWdvdG8gbWFudWFsOwoJCQl9CgkJCWd1c3M6CgkJCSRiID0gZXhwbG9kZSgnXCIjXCIgcmVsPVwiJywkcmVzKTsKCQkJJGIxID0gZXhwbG9kZSgnXCInLCRiWzFdKVswXTsKCQkJJGIyID0gZXhwbG9kZSgnXCInLCRiWzJdKVswXTsKCQkJJGIzID0gZXhwbG9kZSgnXCInLCRiWzNdKVswXTsKCQkJJGJvdCA9IGJvdCgkYjEsJGIyLCRiMyk7JGJvdFskaV07CiRjc3JmID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnaWQ9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0ayA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ25hbWU9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiRkYXRhID0gImFudGlib3RsaW5rcz0kYm90WyRpXSZjc3JmX3Rva2VuX25hbWU9JGNzcmYmdG9rZW49JHRrJmNhcHRjaGE9c29sdmVtZWRpYSZhZGNvcHlfcmVzcG9uc2U9JGNhcCZhZGNvcHlfY2hhbGxlbmdlPSRjaGFsbGVuZ2UiOwokcmVzID0gcG9zdCgiaHR0cHM6Ly9mYXVjZXR1bm8uY29tL2NsYWltL3ZlcmlmeSIsJGRhdGEpOwokc3VjPWV4cGxvZGUoIiciLGV4cGxvZGUoImh0bWw6ICciLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCInIixleHBsb2RlKCJpY29uOiAnIiwkcmVzKVsxXSlbMF07CmlmKCRzdHM9PSJzdWNjZXNzIil7CiRyZXMgPSBnZXQoImh0dHBzOi8vZmF1Y2V0dW5vLmNvbS9kYXNoYm9hcmQiKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHA+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8ZGl2IGNsYXNzPSJ0ZXh0LTN4bCBmb250LW1lZGl1bSBsZWFkaW5nLTggbXQtNiI+JywkcmVzKVsxXSlbMF07CiRyZXMgPSBnZXQoImh0dHBzOi8vZmF1Y2V0dW5vLmNvbS9jbGFpbSIpOwoKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnIDxkaXYgY2xhc3M9InRleHQtM3hsIGZvbnQtbWVkaXVtIGxlYWRpbmctOCBtdC02Ij4nLCRyZXMpWzRdKVswXTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJGdwdXRpaCBHb29kIGpvYiwgJHN1YyAgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIEJhbGFuY2UkeWVsbG93IH4+JHB1dGloICRiYWwgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPl8gJHdoaXRlIENsYWltJHllbGxvdyB+PiRwdXRpaCAkbGkgXG4iKTsKZ2FyaXMoKTsKCmdvdG8gbWFudWFsOwp9ZWxzZXsKfX19ZWxzZXsKZWNobyBTbG93KCJ7JG1lcmFofSAgUGxlYXNlIHdhaXQgICAgICAgICAgICAgICAgICAgIFxyIik7IAp9Cn0KCnB0Ogp3aGlsZSh0cnVlKXsKCiRyZXM9Z2V0KCJodHRwczovL2ZhdWNldHVuby5jb20vYWRzIik7CiRpZCA9IGV4cGxvZGUoIiciLGV4cGxvZGUoJ2h0dHBzOi8vZmF1Y2V0dW5vLmNvbS9hZHMvdmlldy8nLCRyZXMpWzFdKVswXTsKaWYoJGlkPT1udWxsKXsKZWNobyJ7JG1lcmFofSBQdGMgSGFiaXNcbiI7CmdvdG8gbWVudTt9CiR0aW1lID0gZXhwbG9kZSgic2VjIixleHBsb2RlKCdkYXRhLWx1Y2lkZT0iY2xvY2siIGNsYXNzPSJ3LTQgaC00IG1yLTIiPjwvaT4gVGltZXI6ICcsJHJlcylbMV0pWzBdOwokcmVzPWdldCgiaHR0cHM6Ly9mYXVjZXR1bm8uY29tL2Fkcy92aWV3LyRpZCIpOwokY3NyZj1leHBsb2RlKCciJyxleHBsb2RlKCc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjc3JmX3Rva2VuX25hbWUiIHZhbHVlPSInLCRyZXMpWzFdKVswXTsKJHRrPWV4cGxvZGUoJyInLGV4cGxvZGUoJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CnRtcigkdGltZSk7CiR1cmw9ZmlsZV9nZXRfY29udGVudHMoInVybF9zb2x2ZSIpOwokcmVzPWN1cmwoJHVybCwnJyxzb2x2ZSgpKVsxXTsKJGNoYWxsZW5nZT1leHBsb2RlKCciJyxleHBsb2RlKCciY2hhbGxlbmdlIjoiJywkcmVzKVsxXSlbMF07CiR1cmw9Imh0dHBzOi8vYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbS9wYXBpL21lZGlhP2M9JGNoYWxsZW5nZTt3PTMwMDtoPTE1MDtmZz0wMDAwMDA7Ymc9ZjhmOGY4IjsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CmxvYWQoJHJlcywnaW1hZ2UuanBnJyk7CiRjYXA9Y2FwdGNoYSgpOwppZigkY2FwIT0iIil7CiRkYXRhPSJjc3JmX3Rva2VuX25hbWU9JGNzcmYmdG9rZW49JHRrIjsKJHJlcz1wb3N0KCJodHRwczovL2ZhdWNldHVuby5jb20vYWRzL2FudGlib3QiLCRkYXRhKTsKCmlmKCRzdWMhPSIiKXsKJHJlcyA9IGdldChkYXNoKTsKJHVzZXJuYW1lID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPGg1IGNsYXNzPSJmb250LXNpemUtMTUgdGV4dC10cnVuY2F0ZSI+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cCBjbGFzcz0iZm9udC1zYW5zLXNlcmlmIGxoLTEgbWItMSBmcy0yIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwokY2xhID0gZXhwbG9kZSgiPC9wPiIsZXhwbG9kZSgnPGkgY2xhc3M9ImZhcyBmYS1naWZ0cyB0ZXh0LXN1Y2Nlc3MgZmEtMngiPjwvaT4nLCRyZXMpWzFdKVswXTsKJGxpZiA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxwIGNsYXNzPSJsaC0xIG1iLTEgZm9udC13ZWlnaHQtYm9sZCI+JywkY2xhKVsxXSlbMF07CmVjaG8gU2xvdygiJGhpamF1ID4gJGdwdXRpaCBHb29kIGpvYiwgJHN1YyBhZGRlZCB0byB5b3VyIGJhbGFuY2UgXG4iKTsKZWNobyBTbG93KCIkaGlqYXUgPiAkd2hpdGUgQmFsYW5jZSR5ZWxsb3cgfj4kcHV0aWggJGJhbCBcbiIpOwoKZ2FyaXMoKTsKfWVsc2V7fX19CgoKczoKd2hpbGUodHJ1ZSl7CiR1cmw9ZmlsZV9nZXRfY29udGVudHMoInVybF9zb2x2ZSIpOwokcmVzPWN1cmwoJHVybCwnJyxzb2x2ZSgpKVsxXTsKJGNoYWxsZW5nZT1leHBsb2RlKCciJyxleHBsb2RlKCciY2hhbGxlbmdlIjoiJywkcmVzKVsxXSlbMF07CiR1cmw9Imh0dHBzOi8vYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbS9wYXBpL21lZGlhP2M9JGNoYWxsZW5nZTt3PTMwMDtoPTE1MDtmZz0wMDAwMDA7Ymc9ZjhmOGY4IjsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CmxvYWQoJHJlcywnaW1hZ2UuanBnJyk7CiRjYXA9Y2FwdGNoYSgpOwppZigkY2FwIT0iIil7CmVjaG8gU2xvdygieyRtZXJhaH0gR2V0IFNvbHZlIFxyIik7IApzbGVlcCgxKTsKfWVsc2V7Cgpnb3RvIHM7CiAgICB9CiR1cmw9Imh0dHBzOi8vYnRjYnVuY2guY29tL2ZpcmV3YWxsIjsKJHJlcz1jdXJsKCR1cmwsJycsaGVhZCgpKVsxXTsKJGNzcmY9ZXhwbG9kZSgnIicsZXhwbG9kZSgnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZl90b2tlbl9uYW1lIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CgokdXJsPSJodHRwczovL2J0Y2J1bmNoLmNvbS9maXJld2FsbC92ZXJpZnkiOwokZGF0YT0iYWRjb3B5X3Jlc3BvbnNlPSIuJGNhcC4iJmFkY29weV9jaGFsbGVuZ2U9Ii4kY2hhbGxlbmdlLiImY2FwdGNoYVR5cGU9c29sdmVtZWRpYSZjc3JmX3Rva2VuX25hbWU9Ii4kY3NyZjsKJHJlcz1jdXJsKCR1cmwsJGRhdGEsaGVhZCgpKVsxXTsKJGNsYSA9IGV4cGxvZGUoIjwvcD4iLGV4cGxvZGUoJzxpIGNsYXNzPSJmYXMgZmEtZmlyZSBmYS13LTIwIGZzLTIgdGV4dC1kYW5nZXIiPjwvaT4nLCRyZXMpWzFdKVswXTsKJHN1YyA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJ2NsYXNzPSJmb250LXNhbnMtc2VyaWYgbGgtMSBtYi0xIGZzLTIiPicsJHJlcylbMV0pWzBdOwoKaWYoJHN1Yyl7CmZhc3QoJGhpamF1LiAiPl8gU3VjY2VzcyBCeXBhc3MgRmlyZXdhbGxcciIpOwpzbGVlcCg1KTsKCmdhcmlzKCk7CmdvdG8gbWFudWFsOwp9ZWxzZXsKCmdvdG8gczt9fQoKPz4K",
"cryptowin":"",
"macro":"",
"trampo":"",
"james":"JGhpamF1ID0gIlwzM1szMjsxbSI7JGJpcnUgPSAiXDMzWzA7MzZtIjskYmlydTEgPSAiXGVbMTszNG0iOyRtZXJhaCA9ICJcMzNbMzE7MW0iOyRwdXRpaCA9ICJcZVsxOzM3bSI7JGRhcms9IlwwMzNbMTszMG0iOyRrdW5pbmcgPSAiXDMzWzE7MzNtIjskY3lhbiA9ICJcZVsxOzM2bSI7JHVuZ3UgPSAiXGVbMTszNW0iOyRhYnUgPSAiXGVbMTszMG0iOyRlbmQgPSAiXDAzM1swbSI7JGJhYnUgPSAiXDAzM1sxMDBtIjskYm1lcmFoID0gIlwwMzNbMTAxbSI7JGJzdGFiaWxvID0gIlwwMzNbMTAybSI7JGJrdW5pbmcgPSAiXDAzM1sxMDNtIjskYmJpcnUgPSAiXDAzM1sxMDRtIjskYnBpbmsgPSAiXDAzM1sxMDVtIjskYmN5YW4gPSAiXDAzM1sxMDZtIjskYnB1dGloID0gIlwwMzNbMTA3bSI7JGJpcnU9IlwwMzNbMTszNG0iOyRrdW5pbmc9IlwwMzNbMTszM20iOyRtZXJhaD0iXDAzM1sxOzMxbSI7JHB1dGloPSJcMDMzWzE7MzdtIjskaGlqYXU9IlwwMzNbMTszMm0iOyRjeWFuPSJcMDMzWzE7MzZtIjskdW5ndT0iXDAzM1sxOzM1bSI7JGRhcms9IlwwMzNbMTszMG0iOyRhYnUgPSAiXDAzM1swOzkwbSI7JGFidTEgPSAiXDAzM1sxOzkwbSI7JG1lcmFoMSA9ICJcMDMzWzE7OTFtIjskZW5kID0gIlwwMzNbMG0iOyRibG9ja2FidSA9ICJcMDMzWzEwMG0iOyRibG9ja21lcmFoID0gIlwwMzNbMTAxbSI7JGJsb2Nrc3RhYmlsbyA9ICJcMDMzWzEwMm0iOyRibG9ja2t1bmluZyA9ICJcMDMzWzEwM20iOyRibG9ja2JpcnUgPSAiXDAzM1sxMDRtIjskYmxvY2twaW5rID0gIlwwMzNbMTA1bSI7JGJsb2NrY3lhbiA9ICJcMDMzWzEwNm0iOyRibG9ja3B1dGloID0gIlwwMzNbMTA3bSI7JHRlcm11eD0gJGN5YW4uIj5fICI7CmNvbnN0CnRpdGxlID0gImZheXRjb2luIiwKZGFzaCA9ICJodHRwczovL2phbWVzLXRydXNzeS5jb20vZGFzaGJvYXJkIiwKZmF1Y2V0ID0gImh0dHBzOi8vamFtZXMtdHJ1c3N5LmNvbS9mYXVjZXQiLAp2ZmF1Y2V0ID0gImh0dHBzOi8vamFtZXMtdHJ1c3N5LmNvbS9mYXVjZXQvdmVyaWZ5IjsKCmZ1bmN0aW9uIHMoKXskcmVzPWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl6WlhKMlpYSXVjR2h3IikpOyRkdT1leHBsb2RlKCcjJyxleHBsb2RlKCcjJy50aXRsZS4nOicsJHJlcylbMV0pWzBdOyRjdT1leHBsb2RlKCd8JywkZHUpWzBdOztpZigkY3UgPT0gIm9mZiIgfHwgJGN1ID09IG51bGwpe2JuMSgpO2VjaG8kbWVyYWguIlwzM1szMTsxbSBTY3JpcHQgRGkgTm9uYWt0aWZrYW5cbiI7ZWNobyRtZXJhaC4iXDMzWzMxOzFtIEJ5IE1zayBPZmZpY2lhbCBcbiI7ZXhpdDt9aWYoJGN1PT0ib24iKXt9fXMoKTsKZnVuY3Rpb24gYW5pbWFzaSgkc3RyKSB7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCAoJGFyciBhcyAkYXopIHsgZWNobyAkYXo7IHVzbGVlcCgzMDApOyB9fWZ1bmN0aW9uIGNlaygkc3RyKSB7JGFyciA9IHN0cl9zcGxpdCgkc3RyKTsgZm9yZWFjaCgkYXJyIGFzICRheikge2VjaG8gJGF6OyB1c2xlZXAoOTAwMCk7fX1mdW5jdGlvbiBmYXN0KCRzdHIpeyRyYXIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCgkcmFyIGFzICR6eil7ZWNobyAkeno7dXNsZWVwKDMwMDApO319ZnVuY3Rpb24gYW4oJHN0cil7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2ggKCRhcnIgYXMgJGF6KXsgZWNobyAkYXo7IHVzbGVlcCgxOTk5OSk7fX1mdW5jdGlvbiBsb2FkKCRkYXRhLCAkZmlsZSl7JGhhbmRsZSA9IGZvcGVuKCRmaWxlLCAndycpO2Z3cml0ZSgkaGFuZGxlLCAkZGF0YSk7ZmNsb3NlKCRoYW5kbGUpOyB9ZnVuY3Rpb24gZ2FyaXMoKXtlY2hvICRwdXRpaC4i4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIi4kZW5kLiJcbiI7fQovKiBGVU5DVElPTiAqLwpmdW5jdGlvbiBjKCl7c3lzdGVtKCdjbGVhcicpO30KZnVuY3Rpb24gd2ViKCR1cmwpeyRjaD1jdXJsX2luaXQoKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9VUkwsJHVybCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIHRydWUpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTtyZXR1cm4gY3VybF9leGVjKCRjaCk7fQpmdW5jdGlvbiB4KCRhd2FsLCRha2hpciwkcmVzLCRubyl7JGRhdGEgPSBleHBsb2RlKCRhd2FsLGV4cGxvZGUoJGFraGlyLCRyZXMpWyRub10pWzBdO3JldHVybiAkZGF0YTt9CgpmdW5jdGlvbiBTbG93KCRtc2cpeyRzbG93ID0gc3RyX3NwbGl0KCRtc2cpO2ZvcmVhY2goICRzbG93IGFzICRzbG93bW8gKXsgZWNobyAkc2xvd21vOyB1c2xlZXAoMTAwMCk7fX0JCgpzKCk7CmZ1bmN0aW9uIHB3KCl7CnBzOgokZD1kYXRlKCJEIik7CgokZ2V0PWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl3ZHk1d2FIQT0iKSk7CgokbGluayA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbms7CiRsaW5rMiA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbmsyOyAkcHcgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5QYXNzd29yZDsgaWYoJGxpbmspewokcmVhZCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCJyaWdodC50eHQiKTsKaWYoJHJlYWQgIT0gJHB3KXsKYm4xKCk7CmVjaG8gIiRoaWphdSAgTEluayAgOiRwdXRpaCAkbGlua1xuIjsKCiAgICAgICAgICAgICRwID0gcmVhZGxpbmUoIiRoaWphdSBJbnB1dCBEaXNpbmk6ICIpOwogICAgICAgICAgICAgICAgaWYoJHAgPT0gJHB3KXsKICAgICAgICAgICAgICAgICAgICBibjEoKTsKICAgICAgICAgICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygncmlnaHQudHh0JywkcCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJG1lcmFoIFBhc3N3b3JkIENvcnJlY3Qg4oiaIFxuIjsKICAgICAgICAgICAgICAgICAgICBzbGVlcCgxKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGJuMSgpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIiRtZXJhaCAgSW52YWxpZCBQYXNzd29yZCFcbiI7CiAgICAgICAgICAgICAgICAgICAgZ290byBwczsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICB9Cn1lbHNlewoKICAgZWNobyAiJG1lcmFoIFBsZWFzZSBjZWsgeW91ciBjb25lY3Rpb24hXG4iOwogICAgZXhpdDsKfQp9U3lzdGVtKCJjbGVhciIpOwpwdygpOwogZnVuY3Rpb24gdG1yKCR0bWVyKXskY29sb3IgPSBhcnJheSgiXDAzM1sxOzM3bSIsIlwwMzNbMDszMW0iLCJcMDMzWzA7MzNtIiwiXDAzM1swOzMybSIsIlwwMzNbMDszNG0iLCJcMDMzWzA7MzVtIik7JHRpbWVyPXRpbWUoKSskdG1lcjt3aGlsZSh0cnVlKTplY2hvIlxyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHIiOyRyZXM9JHRpbWVyLXRpbWUoKTsgaWYoJHJlcyA8IDEpe2JyZWFrO30kdG0gPSAgZGF0ZSgnIGk6cyAnLCRyZXMpO2VjaG8iIFwwMzNbMTszN20gWyIuJGNvbG9yW3JhbmQoMCxjb3VudCgkY29sb3IpLTEpXS4kdG0uIlwwMzNbMTszN21dIjtzbGVlcCgxKTtlbmR3aGlsZTt9CiBmdW5jdGlvbiBnZygkdXJsLCAkdWEpe3JldHVybiBjdXJsKCR1cmwsIG51bGwsICR1YSlbMV07fQogZnVuY3Rpb24gcHAoJHVybCwgJGRhdGEsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgJGRhdGEsICR1YSlbMV07fQpmdW5jdGlvbiBiYXNlNjQoJHN0cil7cmV0dXJuIGJhc2U2NF9lbmNvZGUoJHN0cik7fQpmdW5jdGlvbiBnZXQoJHVybCl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIHBvc3QoJHVybCwkZGF0YSl7cmV0dXJuIGN1cmwoJHVybCwgJGRhdGEsIGhlYWQoKSlbMV07fQpmdW5jdGlvbiBnZXRzb2x2ZSgkc29sKXtyZXR1cm4gY3VybCgkc29sLCBudWxsLCBzb2x2ZSgpKVsxXTt9CmZ1bmN0aW9uIGFuc3dlcigkeCwkeSwkeil7aWYoJHggKyAkeSA9PSAkeil7cmV0dXJuICJhZGQiO31lbHNlaWYoJHggLSAkeSA9PSAkeil7cmV0dXJuICJzdWIiO31lbHNlaWYoJHggKiAkeSA9PSAkeil7cmV0dXJuICJtdWx0aXBseSI7fWVsc2VpZigkeCAlICR5KXtyZXR1cm4gImRpdmlkZSI7fWVsc2V7cmV0dXJuIDA7fX0KZnVuY3Rpb24gY3VybCgkdXJsLCAkcG9zdCA9IDAsICRodHRwaGVhZGVyID0gMCwgJHByb3h5ID0gMCl7CiAgICAkY2ggPSBjdXJsX2luaXQoKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkdXJsKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBmYWxzZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllIT1NULCBmYWxzZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPTk5FQ1RUSU1FT1VULCAzMCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1RJTUVPVVQsIDYwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFLFRSVUUpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUVGSUxFLCJjb29raWUudHh0Iik7CiAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFSkFSLCJjb29raWUudHh0Iik7CiAgICAgICAgaWYoJHBvc3QpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAkcG9zdCk7CiAgICAgICAgfQogICAgICAgIGlmKCRodHRwaGVhZGVyKXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRodHRwaGVhZGVyKTsKICAgICAgICB9CiAgICAgICAgaWYoJHByb3h5KXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBQUk9YWVRVTk5FTCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QUk9YWSwgJHByb3h5KTsKICAgICAgICAgICAgLy8gY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZVFlQRSwgQ1VSTFBST1hZX1NPQ0tTNSk7CiAgICAgICAgfQogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IRUFERVIsIHRydWUpOwogICAgICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgICAgICRodHRwY29kZSA9IGN1cmxfZ2V0aW5mbygkY2gpOwogICAgICAgIGlmKCEkaHR0cGNvZGUpIHJldHVybiAiQ3VybCBFcnJvciA6ICIuY3VybF9lcnJvcigkY2gpOyBlbHNlewogICAgICAgICAgICAkaGVhZGVyID0gc3Vic3RyKCRyZXNwb25zZSwgMCwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAgICAgJGJvZHkgPSBzdWJzdHIoJHJlc3BvbnNlLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7CiAgICAgICAgICAgIHJldHVybiBhcnJheSgkaGVhZGVyLCAkYm9keSk7CiAgICAgICAgfQogICAgfQpmdW5jdGlvbiBoKCl7CiR1YVtdPSJIb3N0OiBsdWNreWRpY2UubmV0IjsKJHVhW109IkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCI7CiR1YVtdPSJyZWZlcmVyOmh0dHBzOi8vbHVja3lkaWNlLm5ldC9mYXVjZXQiOwokdWFbXT0iVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMSI7CiR1YVtdPSJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4xLjI7IFJlZG1pIDRBIEJ1aWxkL04yRzQ3SCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzY2LjAuMzM1OS4xNTggTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXT0ieC1yZXF1ZXN0ZWQtd2l0aDogWE1MSHR0cFJlcXVlc3QiOwogIHJldHVybiAkdWE7Cn0KCmZ1bmN0aW9uIHNvbHZlKCl7CiR1YVtdPSJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIjsKJHVhW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJHVhW109ImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogcmV0dXJuICR1YTsKfQpmdW5jdGlvbiB2MygpewokaFtdPSJIb3N0OiB3d3cuZ29vZ2xlLmNvbSI7CiRoW109IkNvb2tpZTogIi5maWxlX2dldF9jb250ZW50cygiY29va2llX2FuY2hvciIpOwokaFtdPSJVc2VyLUFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJ1c2VyLWFnZW50Iik7CnJldHVybiAkaDsKfQpmdW5jdGlvbiByZXYzKCl7Cgp3aGlsZSh0cnVlKXsKJGFjciA9anNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImphbWVzLmpzb24iKSx0cnVlKVsidXJsX2FuY2hvciJdOwokY29yPWV4cGxvZGUoJyYnLGV4cGxvZGUoJyZrPScsJGFjcilbMV0pWzBdOwokayA9IGV4cGxvZGUoIiYiLCRhY3IpWzFdOwokY28gPSBleHBsb2RlKCImIiwkYWNyKVsyXTsKJHYgPSBleHBsb2RlKCImIiwkYWNyKVs0XTsKJHYzID0gY3VybCgkYWNyLG51bGwsYXJyYXkoKSlbMV07CiR2M3Rva2VuID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnaWQ9InJlY2FwdGNoYS10b2tlbiIgdmFsdWU9IicsJHYzKVsxXSlbMF07CiRhY3IyID0gImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaTIvcmVsb2FkPyRrIjsKJGRhdGEgPSAiJHYmcmVhc29uPXEmYz0kdjN0b2tlbiYkdiYkY28iOwokdjNfdmVyaWYgPSBjdXJsKCRhY3IyLCAkZGF0YSwgYXJyYXkoKSlbMV07CiR2MzEgPSBleHBsb2RlKCciJyxleHBsb2RlKCcicnJlc3AiLCInLCR2M192ZXJpZilbMV0pWzBdOwogIGlmKCR2MzEpewogICAgICAgICAgICAgICAgZWNobyBTbG93KCJ7JG1lcmFofSBnZXQgY2FwdGNoYS4gICAgIFxyIik7IApzbGVlcCgxKTsKICAgICAgICAgICAgICAgIHJldHVybiAkdjMxOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIFNsb3coIiB7JG1lcmFofSBwbGVhc2Ugd2FpdCAgICAgICAgICAgIFxyIik7CiAgICAgICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBjYXB0Y2hhKCl7CiRnbWJhcj1maWxlX2dldF9jb250ZW50cygnaW1hZ2UuanBnJyk7CiRiYXNlPWJhc2U2NCgkZ21iYXIpOwokdWEgPSBhcnJheSgpOwokdWFbXSA9ICJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFJNWDMxOTEgQnVpbGQvUlAxQS4yMDA3MjAuMDExOykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzk4LjAuNDc1OC44NyBNb2JpbGUgU2FmYXJpLzUzNy4zNiI7CiR1YVtdID0gImNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vanNvbiI7CiRjaCA9IGN1cmxfaW5pdCgpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAiaHR0cHM6Ly92aXNpb24uZ29vZ2xlYXBpcy5jb20vdjEvaW1hZ2VzOmFubm90YXRlP2tleT1BSXphU3lDM3ktRW00Mmh0U0I4VUVaUHFwdEo3OHJsdkw1OF9oNlkiKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICR1YSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCAxKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCAwKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICd7InJlcXVlc3RzIjpbeyJpbWFnZSI6eyJjb250ZW50IjoiJy4kYmFzZS4nIn0sImZlYXR1cmVzIjpbeyJ0eXBlIjoiVEVYVF9ERVRFQ1RJT04ifV19XX0nKTsKJHJlcyA9IGN1cmxfZXhlYygkY2gpOwokdmFyMT0gZXhwbG9kZSgnInRleHQiOiAiRW50ZXIgdGhlIGZvbGxvd2luZzpcbicsICRyZXMpOwokdmFyMiA9IGV4cGxvZGUoJ1xuIicsICR2YXIxWzFdKTsKJHZhcjMgPSAkdmFyMlswXTsKJGNhcD1zdHJfcmVwbGFjZSgnXG4nLCcgJywkdmFyMyk7CiRjYXBjaGEgPSBwcmVnX3JlcGxhY2UoIi9bXmEtel0vIiwgIiIsICRjYXApOwpyZXR1cm4gJGNhcGNoYTsKfQpmdW5jdGlvbiBzb2x2ZW1lZGlhKCRzb2wpewogICAgICAgIHdoaWxlKHRydWUpewogICAgICAgICAgICAkdWFfc29sID0gYXJyYXkoIkhvc3Q6IGFwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20iLCJ1c2VyLWFnZW50OiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJVc2VyX0FnZW50IiksImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciKTsKICAgICAgICAgICAgJHVhX2ltZyA9IGFycmF5KCJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFJNWDMxOTEgQnVpbGQvUlAxQS4yMDA3MjAuMDExOykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzk4LjAuNDc1OC44NyBNb2JpbGUgU2FmYXJpLzUzNy4zNiIsImNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vanNvbiIpOwogICAgICAgICAgICAkY2hhbGxlbmdlID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsZ2coJHNvbCwkdWFfc29sKSlbMV0pWzBdOwogICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygiaW1hZ2UuanBnIiwgZ2coJ2h0dHBzOi8vYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbS9wYXBpL21lZGlhP2M9Jy4kY2hhbGxlbmdlLic7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCcsJHVhX3NvbCkpOwogICAgICAgICAgICAkYmFzZSA9IGJhc2U2NF9lbmNvZGUoZmlsZV9nZXRfY29udGVudHMoJ2ltYWdlLmpwZycpKTsKICAgICAgICAgICAgJHJlcyA9IHBwKCJodHRwczovL3Zpc2lvbi5nb29nbGVhcGlzLmNvbS92MS9pbWFnZXM6YW5ub3RhdGU/a2V5PUFJemFTeUMzeS1FbTQyaHRTQjhVRVpQcXB0Sjc4cmx2TDU4X2g2WSIsJ3sicmVxdWVzdHMiOlt7ImltYWdlIjp7ImNvbnRlbnQiOiInLiRiYXNlLicifSwiZmVhdHVyZXMiOlt7InR5cGUiOiJURVhUX0RFVEVDVElPTiJ9XX1dfScsJHVhX2ltZyk7CiAgICAgICAgICAgICR2YXIxPSBleHBsb2RlKCcidGV4dCI6ICJFbnRlciB0aGUgZm9sbG93aW5nOlxuJywgJHJlcyk7CiAgICAgICAgICAgICR2YXIyID0gZXhwbG9kZSgnXG4iJywgJHZhcjFbMV0pOwogICAgICAgICAgICAkdmFyMyA9ICR2YXIyWzBdOwogICAgICAgICAgICAkY2FwID0gc3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwogICAgICAgICAgICAkY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKICAgICAgICAgICAgaWYoJGNhcGNoYSl7CiAgICAgICAgICAgIGVjaG8gIiRwdXRpaCBUcnluZyBCeXBhc3MgICAgICAgICAgICAgICAgICAgICAgICAgXHIiOwogICAgICAgICAgICByZXR1cm4gImFkY29weV9yZXNwb25zZT0iLiRjYXBjaGEuIiZhZGNvcHlfY2hhbGxlbmdlPSIuJGNoYWxsZW5nZTsKICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGVjaG8gIiRwdXRpaCBQbGVhc2UgV2FpdCAgICAgICAgICAgICAgICAgICAgICAgICAgXHIiO319fQpmdW5jdGlvbiBib3QoJHgsJHksJHope3JldHVybiBbIisiLiR5LiIrIi4kei4iKyIuJHgsIisiLiR4LiIrIi4keS4iKyIuJHosIisiLiR4LiIrIi4kei4iKyIuJHksIisiLiR5LiIrIi4keC4iKyIuJHosIisiLiR6LiIrIi4keS4iKyIuJHgsIisiLiR6LiIrIi4keC4iKyIuJHldO30KZnVuY3Rpb24gYm4xKCl7CnN5c3RlbSgiY2xlYXIiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAplY2hvIGZhc3QoIiAgXDAzM1sxOzk3bURhdGUgOiIuZGF0ZSgiIEQgbSBZICIpKTsKZWNobyBmYXN0KCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwwMzNbMTs5N21UaW1lIDoiLmRhdGUoIiBIOmk6cyAiKSk7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bVxu4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICBfXyAgIF9fX19fX18gICAgICAgICBfX19fX18gICAgICAgICAgXyAgICAgICAgICAgICAgICAgIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgXCBcIC8gLyAgX18gXCAgICAgICB8ICBfX19ffCAgICAgICAgfCB8ICAgICAgICAgICAgICAgICBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgICBcIFYgL3wgfCAgfCB8X19fX19ffCB8X18gX18gXyBfIF9fIHwgfF8gX18gXyBfX18gXyAgIF8gXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICAgID4gPCB8IHwgIHwgfF9fX19fX3wgIF9fLyBfYCB8ICdfIFx8IF9fLyBfYCAvIF9ffCB8IHwgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgIC8gLiBcfCB8X198IHwgICAgICB8IHwgfCAoX3wgfCB8IHwgfCB8fCAoX3wgXF9fIFwgfF98IHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgIC9fLyBcX1xfX19fXy8gICAgICAgfF98ICBcX18sX3xffCB8X3xcX19cX18sX3xfX18vXF9fLCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfXy8gfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8X19fLyBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N21cbuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIik7fQogICAgZnVuY3Rpb24gYm4yKCl7CiAKZmFzdCggIlwzM1szMTsxbeKWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtICBb4pyTXSBDUkVBVE9SICAgOlxlWzE7MzdtIE1TS1xuIi4kZW5kKTsKZmFzdCggIlwzM1szMTsxbeKVmuKWiOKWiOKVl+KWiOKWiOKVlOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBUSEFOS1MgVE8gOlxlWzE7MzdtIFRIRSBPTkUgQUxNSUdIVFkgR09EXG4iLiRlbmQpOwpmYXN0KCAiIFwzM1szMTsxbeKVmuKWiOKWiOKWiOKVlOKVnSDilojilojilZEgIOKWiOKWiOKVkSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBTVVBQT1JUICAgOlxlWzE7MzdtIEFMTCBURUFNIFhELUZBTlRBU1lcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3bSDilojilojilZTilojilojilZcg4paI4paI4pWRICDilojilojilZEiLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU1VQUE9SVCAgIDpcZVsxOzM3bSBCQUJZQk9UIENIQU5ORUxcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3beKWiOKWiOKVlOKVnSDilojilojilZfilojilojilojilojilojilojilZTilZ0iLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU0NSSVBUICAgIDpcZVsxOzM3bSBqYW1lcy10cnVzc3kuY29tXG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gVkVSU0lPTiAgIDpcZVsxOzM3bSAxLjBcbiIuJGVuZCk7ICAKZ2FyaXMoKTsKZmFzdCgieyRtZXJhaH3inJMgV0FSTklORyEgUFJPR1JBTSBJTEVHQUwgU0VHQUxBIFJFU0lLTyBESSBUQU5HR1VORyBTRU5ESVJJXG4iKTsKZ2FyaXMoKTt9Ci8qIEVORCBGVU5DVElPTiAqLwpmdW5jdGlvbiBoZWFkKCl7CiR1YT1hcnJheSgiSG9zdDogamFtZXMtdHJ1c3N5LmNvbSIsIngtcmVxdWVzdGVkLXdpdGg6IFhNTEh0dHBSZXF1ZXN0IiwiQ29va2llOiAiLmpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCJqYW1lcy5qc29uIiksdHJ1ZSlbImNvb2tpZSJdLCJVc2VyLUFnZW50OiAiLmpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCJqYW1lcy5qc29uIiksdHJ1ZSlbIlVzZXIiXSk7CnJldHVybiAkdWE7Cn0KdXBkYXRlOgppZighZmlsZV9leGlzdHMoImphbWVzLmpzb24iKSl7CndoaWxlKCJ0cnVlIil7CnN5c3RlbSgiY2xlYXIiKTsKYm4xKCk7CiRhcGlbImNvb2tpZSJdPXJlYWRsaW5lKCJcMDMzWzE7OTdtSW5wdXQgWW91ciBDb29raWU6IFwwMzNbMTs5Mm0iKTsKaWYoJGFwaVsiY29va2llIl0hPSIiKXsKYnJlYWs7fX0Kd2hpbGUoInRydWUiKXsKc3lzdGVtKCJjbGVhciIpOwpibjEoKTsKJGFwaVsiVXNlciJdPXJlYWRsaW5lKCJcMDMzWzE7OTdtSW5wdXQgWW91ciBVc2VyLUFnZW50IDogXDAzM1sxOzkybSIpOwppZigkYXBpWyJVc2VyIl0hPSIiKXsKYnJlYWs7fX0Kd2hpbGUoInRydWUiKXsKc3lzdGVtKCJjbGVhciIpOwpibjEoKTsKJGFwaVsidXJsX2FuY2hvciJdPXJlYWRsaW5lKCJcMDMzWzE7OTdtSW5wdXQgWW91ciB1cmxfYW5jaG9yIDogXDAzM1sxOzkybSIpOwppZigkYXBpWyJ1cmxfYW5jaG9yIl0hPSIiKXsKYnJlYWs7fX0KCgpzYXZlKCJqYW1lcy5qc29uIiwkYXBpKTt9CnI6CmZ1bmN0aW9uIHNhdmUoJGRhdGEsJGRhdGFfcG9zdCl7aWYoIWZpbGVfZ2V0X2NvbnRlbnRzKCRkYXRhKSl7ZmlsZV9wdXRfY29udGVudHMoJGRhdGEsIltdIik7fSRqc29uPWpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCRkYXRhKSwxKTskYXJyPWFycmF5X21lcmdlKCRqc29uLCRkYXRhX3Bvc3QpO2ZpbGVfcHV0X2NvbnRlbnRzKCRkYXRhLGpzb25fZW5jb2RlKCRhcnIsSlNPTl9QUkVUVFlfUFJJTlQpKTt9CgpzeXN0ZW0oImNsZWFyIik7CmJuMigpOwokcmVzID0gZ2V0KGRhc2gpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cD4nLCRyZXMpWzFdKVswXTsKJGJhbCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJ2g0IGNsYXNzPSJtYi0wIj4nLCRyZXMpWzFdKVswXTsKJHJlcyA9IGdldChmYXVjZXQpOwoKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnY2xhc3M9ImxoLTEgbWItMSBmb250LXdlaWdodC1ib2xkIj4nLCRyZXMpWzRdKVswXTsKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXl0Y29pbi5jb20vcHRjIik7CiRwdCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNCBjbGFzcz0ibGgtMSBtYi0xIj4nLCRyZXMpWzFdKVswXTsKZWNobyAiJHdoaXRlIEJhbGFuY2UgJGt1bmluZyB+PiRyZWQgJGJhbCAiLiRlbmQuIlxuIjsKZWNobyAiJHdoaXRlIENsYWltJGt1bmluZyB+PiRyZWQgJGxpICAiLiRlbmQuIlxuIjsKCmdhcmlzKCk7Cm1lbnU6CmVjaG8gU2xvdygiICRyZWR7MX0kaGlqYXUgQnlwYXNzIEZhdWNldCR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKZWNobyBTbG93KCIgJHJlZHsyfSRoaWphdSBVcGRhdGUgQ29va2llJHllbGxvdyAgIi4kZW5kLiJcbiIpOwokcGlsaWggPSByZWFkbGluZSgiJHdoaXRlIElucHV0IE51bWJlciA6ICIpOwpnYXJpcygpOwppZigkcGlsaWggPT0gMSl7CmdvdG8gbWFudWFsOwp9ZWxzZWlmKCRwaWxpaCA9PSAyKXsKZ290byBwdDsKfWVsc2V7CmVjaG8gIiRyZWQgQmFkIFNlbGVjdCBOdW1iZXIhIFxyIjsKc2xlZXAoMik7CmdvdG8gbWVudTsKfQoKbWFudWFsOgp3aGlsZSh0cnVlKXsKJHBzID0gImZhdWNldC9tYWRmYXVjZXQiOwoKJHAgPSBleHBsb2RlKCIvIiwkcHMpOwpmb3JlYWNoKCRwIGFzICRwdyl7CgokcmVzID0gZ2V0KCJodHRwczovL2phbWVzLXRydXNzeS5jb20vJHB3Iik7CiRjc3JmID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnaWQ9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0ayA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ25hbWU9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0aW1lID0gZXhwbG9kZSgnIC0gMTsnLGV4cGxvZGUoJ3ZhciB3YWl0ID0gJywkcmVzKVsxXSlbMF07CmlmKCR0aW1lKXsKdG1yKCR0aW1lKTsKfQokY2FwPXJldjMoKTsKCiRkYXRhID0gImNzcmZfdG9rZW5fbmFtZT0kY3NyZiZ0b2tlbj0kdGsmY2FwdGNoYT1yZWNhcHRjaGF2MyZyZWNhcHRjaGF2Mz0kY2FwJmctcmVjYXB0Y2hhLXJlc3BvbnNlPSI7CiRyZXMgPSBwb3N0KCJodHRwczovL2phbWVzLXRydXNzeS5jb20vJHB3L3ZlcmlmeSIsJGRhdGEpOwokc3VjPWV4cGxvZGUoIicsIixleHBsb2RlKCJHb29kIGpvYiEnLCAnIiwkcmVzKVsxXSlbMF07CiRzdHM9ZXhwbG9kZSgnPC9kaXY+JyxleHBsb2RlKCc8ZGl2IGNsYXNzPSJhbGVydCB0ZXh0LWNlbnRlciBhbGVydC1kYW5nZXIiPjxpIGNsYXNzPSJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlIj48L2k+ICcsJHJlcylbMV0pWzBdOwppZigkc3VjIT0iIil7CiRyZXMgPSBnZXQoZGFzaCk7CiR1c2VybmFtZSA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNSBjbGFzcz0iZm9udC1zaXplLTE1IHRleHQtdHJ1bmNhdGUiPicsJHJlcylbMV0pWzBdOwokYmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnaDQgY2xhc3M9Im1iLTAiPicsJHJlcylbMV0pWzBdOwokcmVzID0gZ2V0KGZhdWNldCk7CiR1c2VybmFtZSA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxwPicsJHJlcylbMV0pWzBdOwokbGkgPSBleHBsb2RlKCI8IixleHBsb2RlKCdjbGFzcz0ibGgtMSBtYi0xIGZvbnQtd2VpZ2h0LWJvbGQiPicsJHJlcylbNF0pWzBdOwplY2hvIFNsb3coIiRoaWphdSA+XyAkZ3B1dGloIEdvb2Qgam9iLCAkc3VjICBcbiIpOwplY2hvIFNsb3coIiRoaWphdSA+XyAkd2hpdGUgQmFsYW5jZSR5ZWxsb3cgfj4kcHV0aWggJGJhbCBcbiIpOwplY2hvIFNsb3coIiRoaWphdSA+XyAkd2hpdGUgQ2xhaW0keWVsbG93IH4+JHB1dGloICRsaSBcbiIpOwpnYXJpcygpOwppZigkbGk9PSIwLzEwMDAiKXsKZWNobyIkbWVyYWggQ2xhaW0gTGVmdCBIYWJpc1xuIjsKZXhpdDsKfQpnb3RvIG1hbnVhbDsKfWVsc2V7Cn0KfQp9CnB0OgpzeXN0ZW0oInJtIGphbWVzLmpzb24iKTsKZ290byB1cGRhdGU7",
"claimbits":"",
"faucetoshi":"CiRoaWphdSA9ICJcMzNbMzI7MW0iOyRiaXJ1ID0gIlwzM1swOzM2bSI7JGJpcnUxID0gIlxlWzE7MzRtIjskbWVyYWggPSAiXDMzWzMxOzFtIjskcHV0aWggPSAiXGVbMTszN20iOyRkYXJrPSJcMDMzWzE7MzBtIjska3VuaW5nID0gIlwzM1sxOzMzbSI7JGN5YW4gPSAiXGVbMTszNm0iOyR1bmd1ID0gIlxlWzE7MzVtIjskYWJ1ID0gIlxlWzE7MzBtIjskZW5kID0gIlwwMzNbMG0iOyRiYWJ1ID0gIlwwMzNbMTAwbSI7JGJtZXJhaCA9ICJcMDMzWzEwMW0iOyRic3RhYmlsbyA9ICJcMDMzWzEwMm0iOyRia3VuaW5nID0gIlwwMzNbMTAzbSI7JGJiaXJ1ID0gIlwwMzNbMTA0bSI7JGJwaW5rID0gIlwwMzNbMTA1bSI7JGJjeWFuID0gIlwwMzNbMTA2bSI7JGJwdXRpaCA9ICJcMDMzWzEwN20iOyRiaXJ1PSJcMDMzWzE7MzRtIjska3VuaW5nPSJcMDMzWzE7MzNtIjskbWVyYWg9IlwwMzNbMTszMW0iOyRwdXRpaD0iXDAzM1sxOzM3bSI7JGhpamF1PSJcMDMzWzE7MzJtIjskY3lhbj0iXDAzM1sxOzM2bSI7JHVuZ3U9IlwwMzNbMTszNW0iOyRkYXJrPSJcMDMzWzE7MzBtIjskYWJ1ID0gIlwwMzNbMDs5MG0iOyRhYnUxID0gIlwwMzNbMTs5MG0iOyRtZXJhaDEgPSAiXDAzM1sxOzkxbSI7JGVuZCA9ICJcMDMzWzBtIjskYmxvY2thYnUgPSAiXDAzM1sxMDBtIjskYmxvY2ttZXJhaCA9ICJcMDMzWzEwMW0iOyRibG9ja3N0YWJpbG8gPSAiXDAzM1sxMDJtIjskYmxvY2trdW5pbmcgPSAiXDAzM1sxMDNtIjskYmxvY2tiaXJ1ID0gIlwwMzNbMTA0bSI7JGJsb2NrcGluayA9ICJcMDMzWzEwNW0iOyRibG9ja2N5YW4gPSAiXDAzM1sxMDZtIjskYmxvY2twdXRpaCA9ICJcMDMzWzEwN20iOyR0ZXJtdXg9ICRjeWFuLiI+XyAiOwpjb25zdAp0aXRsZSA9ICJmYXl0Y29pbiIsCmRhc2ggPSAiaHR0cHM6Ly84ODhzYXRvc2hpcy5jb20vZGFzaGJvYXJkIiwKZmF1Y2V0ID0gImh0dHBzOi8vamFtZXMtdHJ1c3N5LmNvbS9mYXVjZXQiLAp2ZmF1Y2V0ID0gImh0dHBzOi8vamFtZXMtdHJ1c3N5LmNvbS9mYXVjZXQvdmVyaWZ5IjsKCmZ1bmN0aW9uIHMoKXskcmVzPWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl6WlhKMlpYSXVjR2h3IikpOyRkdT1leHBsb2RlKCcjJyxleHBsb2RlKCcjJy50aXRsZS4nOicsJHJlcylbMV0pWzBdOyRjdT1leHBsb2RlKCd8JywkZHUpWzBdOztpZigkY3UgPT0gIm9mZiIgfHwgJGN1ID09IG51bGwpe2JuMSgpO2VjaG8kbWVyYWguIlwzM1szMTsxbSBTY3JpcHQgRGkgTm9uYWt0aWZrYW5cbiI7ZWNobyRtZXJhaC4iXDMzWzMxOzFtIEJ5IE1zayBPZmZpY2lhbCBcbiI7ZXhpdDt9aWYoJGN1PT0ib24iKXt9fXMoKTsKZnVuY3Rpb24gYW5pbWFzaSgkc3RyKSB7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCAoJGFyciBhcyAkYXopIHsgZWNobyAkYXo7IHVzbGVlcCgzMDApOyB9fWZ1bmN0aW9uIGNlaygkc3RyKSB7JGFyciA9IHN0cl9zcGxpdCgkc3RyKTsgZm9yZWFjaCgkYXJyIGFzICRheikge2VjaG8gJGF6OyB1c2xlZXAoOTAwMCk7fX1mdW5jdGlvbiBmYXN0KCRzdHIpeyRyYXIgPSBzdHJfc3BsaXQoJHN0cik7Zm9yZWFjaCgkcmFyIGFzICR6eil7ZWNobyAkeno7dXNsZWVwKDMwMDApO319ZnVuY3Rpb24gYW4oJHN0cil7ICRhcnIgPSBzdHJfc3BsaXQoJHN0cik7IGZvcmVhY2ggKCRhcnIgYXMgJGF6KXsgZWNobyAkYXo7IHVzbGVlcCgxOTk5OSk7fX1mdW5jdGlvbiBsb2FkKCRkYXRhLCAkZmlsZSl7JGhhbmRsZSA9IGZvcGVuKCRmaWxlLCAndycpO2Z3cml0ZSgkaGFuZGxlLCAkZGF0YSk7ZmNsb3NlKCRoYW5kbGUpOyB9ZnVuY3Rpb24gZ2FyaXMoKXtlY2hvICRwdXRpaC4i4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIi4kZW5kLiJcbiI7fQovKiBGVU5DVElPTiAqLwpmdW5jdGlvbiBjKCl7c3lzdGVtKCdjbGVhcicpO30KZnVuY3Rpb24gd2ViKCR1cmwpeyRjaD1jdXJsX2luaXQoKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9VUkwsJHVybCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIHRydWUpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTtyZXR1cm4gY3VybF9leGVjKCRjaCk7fQpmdW5jdGlvbiB4KCRhd2FsLCRha2hpciwkcmVzLCRubyl7JGRhdGEgPSBleHBsb2RlKCRhd2FsLGV4cGxvZGUoJGFraGlyLCRyZXMpWyRub10pWzBdO3JldHVybiAkZGF0YTt9CgpmdW5jdGlvbiBTbG93KCRtc2cpeyRzbG93ID0gc3RyX3NwbGl0KCRtc2cpO2ZvcmVhY2goICRzbG93IGFzICRzbG93bW8gKXsgZWNobyAkc2xvd21vOyB1c2xlZXAoMTAwMCk7fX0JCgpzKCk7CmZ1bmN0aW9uIHB3KCl7CnBzOgokZD1kYXRlKCJEIik7CgokZ2V0PWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl3ZHk1d2FIQT0iKSk7CgokbGluayA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbms7CiRsaW5rMiA9IGpzb25fZGVjb2RlKCRnZXQpLT5QYXNzd29yZC0+JGQtPkxpbmsyOyAkcHcgPSBqc29uX2RlY29kZSgkZ2V0KS0+UGFzc3dvcmQtPiRkLT5QYXNzd29yZDsgaWYoJGxpbmspewokcmVhZCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCJyaWdodC50eHQiKTsKaWYoJHJlYWQgIT0gJHB3KXsKYm4xKCk7CmVjaG8gIiRoaWphdSAgTEluayAgOiRwdXRpaCAkbGlua1xuIjsKCiAgICAgICAgICAgICRwID0gcmVhZGxpbmUoIiRoaWphdSBJbnB1dCBEaXNpbmk6ICIpOwogICAgICAgICAgICAgICAgaWYoJHAgPT0gJHB3KXsKICAgICAgICAgICAgICAgICAgICBibjEoKTsKICAgICAgICAgICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygncmlnaHQudHh0JywkcCk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJG1lcmFoIFBhc3N3b3JkIENvcnJlY3Qg4oiaIFxuIjsKICAgICAgICAgICAgICAgICAgICBzbGVlcCgxKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGJuMSgpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIiRtZXJhaCAgSW52YWxpZCBQYXNzd29yZCFcbiI7CiAgICAgICAgICAgICAgICAgICAgZ290byBwczsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICB9Cn1lbHNlewoKICAgZWNobyAiJG1lcmFoIFBsZWFzZSBjZWsgeW91ciBjb25lY3Rpb24hXG4iOwogICAgZXhpdDsKfQp9U3lzdGVtKCJjbGVhciIpOwpwdygpOwogZnVuY3Rpb24gdG1yKCR0bWVyKXskY29sb3IgPSBhcnJheSgiXDAzM1sxOzM3bSIsIlwwMzNbMDszMW0iLCJcMDMzWzA7MzNtIiwiXDAzM1swOzMybSIsIlwwMzNbMDszNG0iLCJcMDMzWzA7MzVtIik7JHRpbWVyPXRpbWUoKSskdG1lcjt3aGlsZSh0cnVlKTplY2hvIlxyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHIiOyRyZXM9JHRpbWVyLXRpbWUoKTsgaWYoJHJlcyA8IDEpe2JyZWFrO30kdG0gPSAgZGF0ZSgnIGk6cyAnLCRyZXMpO2VjaG8iIFwwMzNbMTszN20gWyIuJGNvbG9yW3JhbmQoMCxjb3VudCgkY29sb3IpLTEpXS4kdG0uIlwwMzNbMTszN21dIjtzbGVlcCgxKTtlbmR3aGlsZTt9CiBmdW5jdGlvbiBnZygkdXJsLCAkdWEpe3JldHVybiBjdXJsKCR1cmwsIG51bGwsICR1YSlbMV07fQogZnVuY3Rpb24gcHAoJHVybCwgJGRhdGEsICR1YSl7cmV0dXJuIGN1cmwoJHVybCwgJGRhdGEsICR1YSlbMV07fQpmdW5jdGlvbiBiYXNlNjQoJHN0cil7cmV0dXJuIGJhc2U2NF9lbmNvZGUoJHN0cik7fQpmdW5jdGlvbiBnZXQoJHVybCl7cmV0dXJuIGN1cmwoJHVybCwgbnVsbCwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIHBvc3QoJHVybCwkZGF0YSl7cmV0dXJuIGN1cmwoJHVybCwgJGRhdGEsIGhlYWQoKSlbMV07fQpmdW5jdGlvbiBnZXRzb2x2ZSgkc29sKXtyZXR1cm4gY3VybCgkc29sLCBudWxsLCBzb2x2ZSgpKVsxXTt9CmZ1bmN0aW9uIGFuc3dlcigkeCwkeSwkeil7aWYoJHggKyAkeSA9PSAkeil7cmV0dXJuICJhZGQiO31lbHNlaWYoJHggLSAkeSA9PSAkeil7cmV0dXJuICJzdWIiO31lbHNlaWYoJHggKiAkeSA9PSAkeil7cmV0dXJuICJtdWx0aXBseSI7fWVsc2VpZigkeCAlICR5KXtyZXR1cm4gImRpdmlkZSI7fWVsc2V7cmV0dXJuIDA7fX0KZnVuY3Rpb24gY3VybCgkdXJsLCAkcG9zdCA9IDAsICRodHRwaGVhZGVyID0gMCwgJHByb3h5ID0gMCl7CiAgICAkY2ggPSBjdXJsX2luaXQoKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkdXJsKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBmYWxzZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllIT1NULCBmYWxzZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPTk5FQ1RUSU1FT1VULCAzMCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1RJTUVPVVQsIDYwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFLFRSVUUpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUVGSUxFLCJmYXVjZXRvc2hpLnR4dCIpOwogICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUpBUiwiZmF1Y2V0b3NoaS50eHQiKTsKICAgICAgICBpZigkcG9zdCl7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRwb3N0KTsKICAgICAgICB9CiAgICAgICAgaWYoJGh0dHBoZWFkZXIpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGh0dHBoZWFkZXIpOwogICAgICAgIH0KICAgICAgICBpZigkcHJveHkpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUFBST1hZVFVOTkVMLCB0cnVlKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZLCAkcHJveHkpOwogICAgICAgICAgICAvLyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUFJPWFlUWVBFLCBDVVJMUFJPWFlfU09DS1M1KTsKICAgICAgICB9CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgdHJ1ZSk7CiAgICAgICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgJGh0dHBjb2RlID0gY3VybF9nZXRpbmZvKCRjaCk7CiAgICAgICAgaWYoISRodHRwY29kZSkgcmV0dXJuICJDdXJsIEVycm9yIDogIi5jdXJsX2Vycm9yKCRjaCk7IGVsc2V7CiAgICAgICAgICAgICRoZWFkZXIgPSBzdWJzdHIoJHJlc3BvbnNlLCAwLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICAkYm9keSA9IHN1YnN0cigkcmVzcG9uc2UsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICAgICAgICAgcmV0dXJuIGFycmF5KCRoZWFkZXIsICRib2R5KTsKICAgICAgICB9CiAgICB9CmZ1bmN0aW9uIGgoKXsKJHVhW109Ikhvc3Q6IGx1Y2t5ZGljZS5uZXQiOwokdWFbXT0iQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IjsKJHVhW109InJlZmVyZXI6aHR0cHM6Ly9sdWNreWRpY2UubmV0L2ZhdWNldCI7CiR1YVtdPSJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxIjsKJHVhW109IlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjEuMjsgUmVkbWkgNEEgQnVpbGQvTjJHNDdIKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjYuMC4zMzU5LjE1OCBNb2JpbGUgU2FmYXJpLzUzNy4zNiI7CiR1YVtdPSJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCI7CiAgcmV0dXJuICR1YTsKfQoKZnVuY3Rpb24gc29sdmUoKXsKJHVhW109Ikhvc3Q6IGFwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20iOwokdWFbXT0idXNlci1hZ2VudDogIi5maWxlX2dldF9jb250ZW50cygidXNlci1hZ2VudCIpOwokdWFbXT0iYWNjZXB0LWxhbmd1YWdlOiBpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyI7CiByZXR1cm4gJHVhOwp9CmZ1bmN0aW9uIHYzKCl7CiRoW109Ikhvc3Q6IHd3dy5nb29nbGUuY29tIjsKJGhbXT0iQ29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJjb29raWVfYW5jaG9yIik7CiRoW109IlVzZXItQWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKcmV0dXJuICRoOwp9CmZ1bmN0aW9uIHJldjMoKXsKCndoaWxlKHRydWUpewokYWNyID1qc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cygiZmF1Y2V0b3NoaV94eXouanNvbiIpLHRydWUpWyJ1cmxfYW5jaG9yIl07CiRjb3I9ZXhwbG9kZSgnJicsZXhwbG9kZSgnJms9JywkYWNyKVsxXSlbMF07CiRrID0gZXhwbG9kZSgiJiIsJGFjcilbMV07CiRjbyA9IGV4cGxvZGUoIiYiLCRhY3IpWzJdOwokdiA9IGV4cGxvZGUoIiYiLCRhY3IpWzRdOwokdjMgPSBjdXJsKCRhY3IsbnVsbCxhcnJheSgpKVsxXTsKJHYzdG9rZW4gPSBleHBsb2RlKCciJyxleHBsb2RlKCdpZD0icmVjYXB0Y2hhLXRva2VuIiB2YWx1ZT0iJywkdjMpWzFdKVswXTsKJGFjcjIgPSAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpMi9yZWxvYWQ/JGsiOwokZGF0YSA9ICIkdiZyZWFzb249cSZjPSR2M3Rva2VuJiR2JiRjbyI7CiR2M192ZXJpZiA9IGN1cmwoJGFjcjIsICRkYXRhLCBhcnJheSgpKVsxXTsKJHYzMSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJycmVzcCIsIicsJHYzX3ZlcmlmKVsxXSlbMF07CiAgaWYoJHYzMSl7CiAgICAgICAgICAgICAgICBlY2hvIFNsb3coInskbWVyYWh9IGdldCBjYXB0Y2hhLiAgICAgXHIiKTsgCnNsZWVwKDEpOwogICAgICAgICAgICAgICAgcmV0dXJuICR2MzE7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgU2xvdygiIHskbWVyYWh9IHBsZWFzZSB3YWl0ICAgICAgICAgICAgXHIiKTsKICAgICAgICAgICAgfQogICAgfQp9CmZ1bmN0aW9uIGNhcHRjaGEoKXsKJGdtYmFyPWZpbGVfZ2V0X2NvbnRlbnRzKCdpbWFnZS5qcGcnKTsKJGJhc2U9YmFzZTY0KCRnbWJhcik7CiR1YSA9IGFycmF5KCk7CiR1YVtdID0gIlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMTsgUk1YMzE5MSBCdWlsZC9SUDFBLjIwMDcyMC4wMTE7KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvOTguMC40NzU4Ljg3IE1vYmlsZSBTYWZhcmkvNTM3LjM2IjsKJHVhW10gPSAiY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9qc29uIjsKJGNoID0gY3VybF9pbml0KCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICJodHRwczovL3Zpc2lvbi5nb29nbGVhcGlzLmNvbS92MS9pbWFnZXM6YW5ub3RhdGU/a2V5PUFJemFTeUMzeS1FbTQyaHRTQjhVRVpQcXB0Sjc4cmx2TDU4X2g2WSIpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJHVhKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIDEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIDApOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJ3sicmVxdWVzdHMiOlt7ImltYWdlIjp7ImNvbnRlbnQiOiInLiRiYXNlLicifSwiZmVhdHVyZXMiOlt7InR5cGUiOiJURVhUX0RFVEVDVElPTiJ9XX1dfScpOwokcmVzID0gY3VybF9leGVjKCRjaCk7CiR2YXIxPSBleHBsb2RlKCcidGV4dCI6ICJFbnRlciB0aGUgZm9sbG93aW5nOlxuJywgJHJlcyk7CiR2YXIyID0gZXhwbG9kZSgnXG4iJywgJHZhcjFbMV0pOwokdmFyMyA9ICR2YXIyWzBdOwokY2FwPXN0cl9yZXBsYWNlKCdcbicsJyAnLCR2YXIzKTsKJGNhcGNoYSA9IHByZWdfcmVwbGFjZSgiL1teYS16XS8iLCAiIiwgJGNhcCk7CnJldHVybiAkY2FwY2hhOwp9CmZ1bmN0aW9uIHNvbHZlbWVkaWEoJHNvbCl7CiAgICAgICAgd2hpbGUodHJ1ZSl7CiAgICAgICAgICAgICR1YV9zb2wgPSBhcnJheSgiSG9zdDogYXBpLXNlY3VyZS5zb2x2ZW1lZGlhLmNvbSIsInVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoIlVzZXJfQWdlbnQiKSwiYWNjZXB0LWxhbmd1YWdlOiBpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyIpOwogICAgICAgICAgICAkdWFfaW1nID0gYXJyYXkoIlVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMTsgUk1YMzE5MSBCdWlsZC9SUDFBLjIwMDcyMC4wMTE7KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvOTguMC40NzU4Ljg3IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwiY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgICAgICAgICRjaGFsbGVuZ2UgPSBleHBsb2RlKCciJyxleHBsb2RlKCciY2hhbGxlbmdlIjoiJyxnZygkc29sLCR1YV9zb2wpKVsxXSlbMF07CiAgICAgICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCJpbWFnZS5qcGciLCBnZygnaHR0cHM6Ly9hcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tL3BhcGkvbWVkaWE/Yz0nLiRjaGFsbGVuZ2UuJzt3PTMwMDtoPTE1MDtmZz0wMDAwMDA7Ymc9ZjhmOGY4JywkdWFfc29sKSk7CiAgICAgICAgICAgICRiYXNlID0gYmFzZTY0X2VuY29kZShmaWxlX2dldF9jb250ZW50cygnaW1hZ2UuanBnJykpOwogICAgICAgICAgICAkcmVzID0gcHAoImh0dHBzOi8vdmlzaW9uLmdvb2dsZWFwaXMuY29tL3YxL2ltYWdlczphbm5vdGF0ZT9rZXk9QUl6YVN5QzN5LUVtNDJodFNCOFVFWlBxcHRKNzhybHZMNThfaDZZIiwneyJyZXF1ZXN0cyI6W3siaW1hZ2UiOnsiY29udGVudCI6IicuJGJhc2UuJyJ9LCJmZWF0dXJlcyI6W3sidHlwZSI6IlRFWFRfREVURUNUSU9OIn1dfV19JywkdWFfaW1nKTsKICAgICAgICAgICAgJHZhcjE9IGV4cGxvZGUoJyJ0ZXh0IjogIkVudGVyIHRoZSBmb2xsb3dpbmc6XG4nLCAkcmVzKTsKICAgICAgICAgICAgJHZhcjIgPSBleHBsb2RlKCdcbiInLCAkdmFyMVsxXSk7CiAgICAgICAgICAgICR2YXIzID0gJHZhcjJbMF07CiAgICAgICAgICAgICRjYXAgPSBzdHJfcmVwbGFjZSgnXG4nLCcgJywkdmFyMyk7CiAgICAgICAgICAgICRjYXBjaGEgPSBwcmVnX3JlcGxhY2UoIi9bXmEtel0vIiwgIiIsICRjYXApOwogICAgICAgICAgICBpZigkY2FwY2hhKXsKICAgICAgICAgICAgZWNobyAiJHB1dGloIFRyeW5nIEJ5cGFzcyAgICAgICAgICAgICAgICAgICAgICAgICBcciI7CiAgICAgICAgICAgIHJldHVybiAiYWRjb3B5X3Jlc3BvbnNlPSIuJGNhcGNoYS4iJmFkY29weV9jaGFsbGVuZ2U9Ii4kY2hhbGxlbmdlOwogICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiJHB1dGloIFBsZWFzZSBXYWl0ICAgICAgICAgICAgICAgICAgICAgICAgICBcciI7fX19CmZ1bmN0aW9uIGJvdCgkeCwkeSwkeil7cmV0dXJuIFsiKyIuJHkuIisiLiR6LiIrIi4keCwiKyIuJHguIisiLiR5LiIrIi4keiwiKyIuJHguIisiLiR6LiIrIi4keSwiKyIuJHkuIisiLiR4LiIrIi4keiwiKyIuJHouIisiLiR5LiIrIi4keCwiKyIuJHouIisiLiR4LiIrIi4keV07fQpmdW5jdGlvbiBibjEoKXsKc3lzdGVtKCJjbGVhciIpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCmVjaG8gZmFzdCgiICBcMDMzWzE7OTdtRGF0ZSA6Ii5kYXRlKCIgRCBtIFkgIikpOwplY2hvIGZhc3QoIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXDAzM1sxOzk3bVRpbWUgOiIuZGF0ZSgiIEg6aTpzICIpKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtXG7ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgIF9fICAgX19fX19fXyAgICAgICAgIF9fX19fXyAgICAgICAgICBfICAgICAgICAgICAgICAgICAgXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICBcIFwgLyAvICBfXyBcICAgICAgIHwgIF9fX198ICAgICAgICB8IHwgICAgICAgICAgICAgICAgIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgIFwgViAvfCB8ICB8IHxfX19fX198IHxfXyBfXyBfIF8gX18gfCB8XyBfXyBfIF9fXyBfICAgXyBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgICAgPiA8IHwgfCAgfCB8X19fX19ffCAgX18vIF9gIHwgJ18gXHwgX18vIF9gIC8gX198IHwgfCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAgLyAuIFx8IHxfX3wgfCAgICAgIHwgfCB8IChffCB8IHwgfCB8IHx8IChffCBcX18gXCB8X3wgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgL18vIFxfXF9fX19fLyAgICAgICB8X3wgIFxfXyxffF98IHxffFxfX1xfXyxffF9fXy9cX18sIHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fLyB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfX18vIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bVxu4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4iKTt9CiAgICBmdW5jdGlvbiBibjIoKXsKIApmYXN0KCAiXDMzWzMxOzFt4paI4paI4pWXICDilojilojilZfilojilojilojilojilojilojilZciLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gIFvinJNdIENSRUFUT1IgICA6XGVbMTszN20gTVNLXG4iLiRlbmQpOwpmYXN0KCAiXDMzWzMxOzFt4pWa4paI4paI4pWX4paI4paI4pWU4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWXIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFRIQU5LUyBUTyA6XGVbMTszN20gVEhFIE9ORSBBTE1JR0hUWSBHT0RcbiIuJGVuZCk7CmZhc3QoICIgXDMzWzMxOzFt4pWa4paI4paI4paI4pWU4pWdIOKWiOKWiOKVkSAg4paI4paI4pWRIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtIFvinJNdIFNVUFBPUlQgICA6XGVbMTszN20gQUxMIFRFQU0gWEQtRkFOVEFTWVxuIi4kZW5kKTsKZmFzdCggIlxlWzE7MzdtIOKWiOKWiOKVlOKWiOKWiOKVlyDilojilojilZEgIOKWiOKWiOKVkSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBTVVBQT1JUICAgOlxlWzE7MzdtIEJBQllCT1QgQ0hBTk5FTFxuIi4kZW5kKTsKZmFzdCggIlxlWzE7Mzdt4paI4paI4pWU4pWdIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBTQ1JJUFQgICAgOlxlWzE7MzdtIGZhdWNldG9zaGkueHl6XG4iLiRlbmQpOwpmYXN0KCAiXGVbMTszN23ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSAgW+Kck10gVkVSU0lPTiAgIDpcZVsxOzM3bSAxLjBcbiIuJGVuZCk7ICAKZ2FyaXMoKTsKZmFzdCgieyRtZXJhaH3inJMgV0FSTklORyEgUFJPR1JBTSBJTEVHQUwgU0VHQUxBIFJFU0lLTyBESSBUQU5HR1VORyBTRU5ESVJJXG4iKTsKZ2FyaXMoKTt9Ci8qIEVORCBGVU5DVElPTiAqLwpmdW5jdGlvbiBoZWFkKCl7CiR1YT1hcnJheSgiSG9zdDogZmF1Y2V0b3NoaS54eXoiLCJDb29raWU6ICIuanNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImZhdWNldG9zaGlfeHl6Lmpzb24iKSx0cnVlKVsiY29va2llIl0sIlVzZXItQWdlbnQ6ICIuanNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImZhdWNldG9zaGlfeHl6Lmpzb24iKSx0cnVlKVsiVXNlciJdKTsKcmV0dXJuICR1YTsKfQoKcjoKZnVuY3Rpb24gc2F2ZSgkZGF0YSwkZGF0YV9wb3N0KXtpZighZmlsZV9nZXRfY29udGVudHMoJGRhdGEpKXtmaWxlX3B1dF9jb250ZW50cygkZGF0YSwiW10iKTt9JGpzb249anNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoJGRhdGEpLDEpOyRhcnI9YXJyYXlfbWVyZ2UoJGpzb24sJGRhdGFfcG9zdCk7ZmlsZV9wdXRfY29udGVudHMoJGRhdGEsanNvbl9lbmNvZGUoJGFycixKU09OX1BSRVRUWV9QUklOVCkpO30KCnVwZGF0ZToKaWYoIWZpbGVfZXhpc3RzKCJmYXVjZXRvc2hpX3h5ei5qc29uIikpewp3aGlsZSgidHJ1ZSIpewpzeXN0ZW0oImNsZWFyIik7CmJuMSgpOwokYXBpWyJjb29raWUiXT1yZWFkbGluZSgiXDAzM1sxOzk3bUlucHV0IFlvdXIgQ29va2llOiBcMDMzWzE7OTJtIik7CmlmKCRhcGlbImNvb2tpZSJdIT0iIil7CmJyZWFrO319CndoaWxlKCJ0cnVlIil7CnN5c3RlbSgiY2xlYXIiKTsKYm4xKCk7CiRhcGlbIlVzZXIiXT1yZWFkbGluZSgiXDAzM1sxOzk3bUlucHV0IFlvdXIgVXNlci1BZ2VudCA6IFwwMzNbMTs5Mm0iKTsKaWYoJGFwaVsiVXNlciJdIT0iIil7CmJyZWFrO319CndoaWxlKCJ0cnVlIil7CnN5c3RlbSgiY2xlYXIiKTsKYm4xKCk7CiRhcGlbInVybF9hbmNob3IiXT1yZWFkbGluZSgiXDAzM1sxOzk3bUlucHV0IFlvdXIgdXJsX2FuY2hvciA6IFwwMzNbMTs5Mm0iKTsKaWYoJGFwaVsidXJsX2FuY2hvciJdIT0iIil7CmJyZWFrO319CndoaWxlKCJ0cnVlIil7CnN5c3RlbSgiY2xlYXIiKTsKYm4xKCk7CiRhcGlbImVtYWlsIl09cmVhZGxpbmUoIlwwMzNbMTs5N21JbnB1dCBZb3VyIEVtYWlsIEZwOiBcMDMzWzE7OTJtIik7CmlmKCRhcGlbImVtYWlsIl0hPSIiKXsKYnJlYWs7fX0KCnNhdmUoImZhdWNldG9zaGlfeHl6Lmpzb24iLCRhcGkpO2dvdG8gcjt9CgoKCgpzeXN0ZW0oImNsZWFyIik7CmJuMigpOwokcmVzID0gZ2V0KCJodHRwczovL2ZhdWNldG9zaGkueHl6L2ZhdWNldC9jdXJyZW5jeS90cngiKTsKJGxpID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnPHAgY2xhc3M9ImxoLTEgbWItMSBmb250LXdlaWdodC1ib2xkIj4nLCRyZXMpWzNdKVswXTsKCm1lbnU6CmVjaG8gU2xvdygiICRyZWR7MX0kaGlqYXUgQnlwYXNzIEZhdWNldCR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKZWNobyBTbG93KCIgJHJlZHsyfSRoaWphdSBVcGRhdGUgQ29va2llJHllbGxvdyAgIi4kZW5kLiJcbiIpOwokcGlsaWggPSByZWFkbGluZSgiJHdoaXRlIElucHV0IE51bWJlciA6ICIpOwpnYXJpcygpOwppZigkcGlsaWggPT0gMSl7CmdvdG8gbWFudWFsOwp9ZWxzZWlmKCRwaWxpaCA9PSAyKXsKZ290byBwdDsKfWVsc2V7CmVjaG8gIiRyZWQgQmFkIFNlbGVjdCBOdW1iZXIhIFxyIjsKc2xlZXAoMik7CmdvdG8gbWVudTsKfQoKbWFudWFsOgp3aGlsZSh0cnVlKXsKJHBzID0gInRyeC9iY2gvbHRjIjsKCiRwID0gZXhwbG9kZSgiLyIsJHBzKTsKZm9yZWFjaCgkcCBhcyAkcHcpewp1bmxpbmsoImZhdWNldG9zaGkudHh0Iik7CiRyZXMgPSBnZXQoImh0dHBzOi8vZmF1Y2V0b3NoaS54eXovZmF1Y2V0L2N1cnJlbmN5LyRwdyIpOwokbGkgPSBleHBsb2RlKCIvIixleHBsb2RlKCc8cCBjbGFzcz0ibGgtMSBtYi0xIGZvbnQtd2VpZ2h0LWJvbGQiPicsJHJlcylbM10pWzBdOwppZigkbGk9PTApewplY2hvIFNsb3coIiRoaWphdSA+XyAkd2hpdGUgQ2xhaW1sZWZ0IEhhYmlzXG4iKTsKZXhpdDt9CiRjc3JmID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnaWQ9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0ayA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ25hbWU9InRva2VuIiB2YWx1ZT0iJywkcmVzKVsxXSlbMF07CiR0aW1lID0gZXhwbG9kZSgnIC0gMTsnLGV4cGxvZGUoJ3ZhciB3YWl0ID0gJywkcmVzKVsxXSlbMF07CmlmKCR0aW1lKXsKdG1yKCR0aW1lKTsKfQoKJGNhcD1yZXYzKCk7CgoKJHJlcyA9IGdldCgiaHR0cHM6Ly9mYXVjZXRvc2hpLnh5ei9mYXVjZXQvY3VycmVuY3kvJHB3Iik7CmZvcigkaT0wOyRpPDc7JGkrKyl7CmlmKCRpPT02KXsKCQoJCQoJCQl9CgkJCQoJCQkKCQkJZ3VzczoKCQkJJGIgPSBleHBsb2RlKCdcIiNcIiByZWw9XCInLCRyZXMpOwoJCQkkYjEgPSBleHBsb2RlKCdcIicsJGJbMV0pWzBdOwoJCQkkYjIgPSBleHBsb2RlKCdcIicsJGJbMl0pWzBdOwoJCQkkYjMgPSBleHBsb2RlKCdcIicsJGJbM10pWzBdOwoJCQkkYm90ID0gYm90KCRiMSwkYjIsJGIzKTskYm90WyRpXTsKJGNzcmYgPSBleHBsb2RlKCciJyxleHBsb2RlKCdpZD0idG9rZW4iIHZhbHVlPSInLCRyZXMpWzFdKVswXTsKJHRrID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnbmFtZT0idG9rZW4iIHZhbHVlPSInLCRyZXMpWzFdKVswXTsKJG1haWw9anNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImZhdWNldG9zaGlfeHl6Lmpzb24iKSx0cnVlKVsiZW1haWwiXTsKJGRhdGEgPSAiYW50aWJvdGxpbmtzPSRib3RbJGldJmNzcmZfdG9rZW5fbmFtZT0kY3NyZiZ0b2tlbj0kdGsmY2FwdGNoYT1yZWNhcHRjaGF2MyZyZWNhcHRjaGF2Mz0kY2FwJndhbGxldD0kbWFpbCI7CiRyZXMgPSBwb3N0KCJodHRwczovL2ZhdWNldG9zaGkueHl6L2ZhdWNldC92ZXJpZnkvJHB3IiwkZGF0YSk7CiRzdWM9ZXhwbG9kZSgiIGFjY291bnQiLGV4cGxvZGUoImh0bWw6ICciLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCInIixleHBsb2RlKCJ0aXRsZTogJyIsJHJlcylbMV0pWzBdOwppZigkc3RzPT0iU3VjY2VzcyEiKXsKCiRyZXMgPSBnZXQoImh0dHBzOi8vZmF1Y2V0b3NoaS54eXovZmF1Y2V0L2N1cnJlbmN5LyRwdyIpOwokbGkgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8cCBjbGFzcz0ibGgtMSBtYi0xIGZvbnQtd2VpZ2h0LWJvbGQiPicsJHJlcylbNF0pWzBdOwplY2hvIFNsb3coIiRoaWphdSA+XyAkZ3B1dGloICRzdWMgIFxuIik7CgoKZ2FyaXMoKTsKCgp9ZWxzZXsKfQp9Cn19CnB0OgpzeXN0ZW0oInJtIGZhdWNldG9zaGlfeHl6Lmpzb24iKTsKZ290byB1cGRhdGU7",
"tronxminer":"",
"ganar":"",
"forex":"",
"btctrik":"CgokaGlqYXUgPSAiXDMzWzMyOzFtIjskYmlydSA9ICJcMzNbMDszNm0iOyRiaXJ1MSA9ICJcZVsxOzM0bSI7JG1lcmFoID0gIlwzM1szMTsxbSI7JHB1dGloID0gIlxlWzE7MzdtIjskZGFyaz0iXDAzM1sxOzMwbSI7JGt1bmluZyA9ICJcMzNbMTszM20iOyRjeWFuID0gIlxlWzE7MzZtIjskdW5ndSA9ICJcZVsxOzM1bSI7JGFidSA9ICJcZVsxOzMwbSI7JGVuZCA9ICJcMDMzWzBtIjskYmFidSA9ICJcMDMzWzEwMG0iOyRibWVyYWggPSAiXDAzM1sxMDFtIjskYnN0YWJpbG8gPSAiXDAzM1sxMDJtIjskYmt1bmluZyA9ICJcMDMzWzEwM20iOyRiYmlydSA9ICJcMDMzWzEwNG0iOyRicGluayA9ICJcMDMzWzEwNW0iOyRiY3lhbiA9ICJcMDMzWzEwNm0iOyRicHV0aWggPSAiXDAzM1sxMDdtIjskYmlydT0iXDAzM1sxOzM0bSI7JGt1bmluZz0iXDAzM1sxOzMzbSI7JG1lcmFoPSJcMDMzWzE7MzFtIjskcHV0aWg9IlwwMzNbMTszN20iOyRoaWphdT0iXDAzM1sxOzMybSI7JGN5YW49IlwwMzNbMTszNm0iOyR1bmd1PSJcMDMzWzE7MzVtIjskZGFyaz0iXDAzM1sxOzMwbSI7JGFidSA9ICJcMDMzWzA7OTBtIjskYWJ1MSA9ICJcMDMzWzE7OTBtIjskbWVyYWgxID0gIlwwMzNbMTs5MW0iOyRlbmQgPSAiXDAzM1swbSI7JGJsb2NrYWJ1ID0gIlwwMzNbMTAwbSI7JGJsb2NrbWVyYWggPSAiXDAzM1sxMDFtIjskYmxvY2tzdGFiaWxvID0gIlwwMzNbMTAybSI7JGJsb2Nra3VuaW5nID0gIlwwMzNbMTAzbSI7JGJsb2NrYmlydSA9ICJcMDMzWzEwNG0iOyRibG9ja3BpbmsgPSAiXDAzM1sxMDVtIjskYmxvY2tjeWFuID0gIlwwMzNbMTA2bSI7JGJsb2NrcHV0aWggPSAiXDAzM1sxMDdtIjskdGVybXV4PSAkY3lhbi4iPl8gIjsKY29uc3QKdGl0bGUgPSAibHVja3lkaWNlIiwKZGFzaCA9ICJodHRwczovL2dhbmFyYml0Y29pbmRlc2RlY3ViYS5jb20vZGFzaGJvYXJkIiwKZmF1Y2V0ID0gImh0dHBzOi8vZ2FuYXJiaXRjb2luZGVzZGVjdWJhLmNvbS9mYXVjZXQiLAp2ZmF1Y2V0ID0gImh0dHBzOi8vZ2FuYXJiaXRjb2luZGVzZGVjdWJhLmNvbS9mYXVjZXQvdmVyaWZ5IjsKCmZ1bmN0aW9uIHMoKXskcmVzPWZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoImFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDFONWRXdHliMjR4TWk5VGVYVnJjbTl1TVRJdmJXRnBiaTl6WlhKMlpYSXVjR2h3IikpOyRkdT1leHBsb2RlKCcjJyxleHBsb2RlKCcjJy50aXRsZS4nOicsJHJlcylbMV0pWzBdOyRjdT1leHBsb2RlKCd8JywkZHUpWzBdOztpZigkY3UgPT0gIm9mZiIgfHwgJGN1ID09IG51bGwpe2JuMSgpO2VjaG8kbWVyYWguIlwzM1szMTsxbSBTY3JpcHQgRGkgTm9uYWt0aWZrYW5cbiI7ZWNobyRtZXJhaC4iXDMzWzMxOzFtIEJ5IE1zayBPZmZpY2lhbCBcbiI7ZXhpdDt9aWYoJGN1PT0ib24iKXt9fQpmdW5jdGlvbiBhbmltYXNpKCRzdHIpIHsgJGFyciA9IHN0cl9zcGxpdCgkc3RyKTtmb3JlYWNoICgkYXJyIGFzICRheikgeyBlY2hvICRhejsgdXNsZWVwKDMwMCk7IH19ZnVuY3Rpb24gY2VrKCRzdHIpIHskYXJyID0gc3RyX3NwbGl0KCRzdHIpOyBmb3JlYWNoKCRhcnIgYXMgJGF6KSB7ZWNobyAkYXo7IHVzbGVlcCg5MDAwKTt9fWZ1bmN0aW9uIGZhc3QoJHN0cil7JHJhciA9IHN0cl9zcGxpdCgkc3RyKTtmb3JlYWNoKCRyYXIgYXMgJHp6KXtlY2hvICR6ejt1c2xlZXAoMzAwMCk7fX1mdW5jdGlvbiBhbigkc3RyKXsgJGFyciA9IHN0cl9zcGxpdCgkc3RyKTsgZm9yZWFjaCAoJGFyciBhcyAkYXopeyBlY2hvICRhejsgdXNsZWVwKDE5OTk5KTt9fWZ1bmN0aW9uIGxvYWQoJGRhdGEsICRmaWxlKXskaGFuZGxlID0gZm9wZW4oJGZpbGUsICd3Jyk7ZndyaXRlKCRoYW5kbGUsICRkYXRhKTtmY2xvc2UoJGhhbmRsZSk7IH1mdW5jdGlvbiBnYXJpcygpe2VjaG8gJHB1dGloLiLilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcbiI7fQovKiBGVU5DVElPTiAqLwpmdW5jdGlvbiBjKCl7c3lzdGVtKCdjbGVhcicpO30KZnVuY3Rpb24gd2ViKCR1cmwpeyRjaD1jdXJsX2luaXQoKTtjdXJsX3NldG9wdCgkY2gsQ1VSTE9QVF9VUkwsJHVybCk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIHRydWUpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTtyZXR1cm4gY3VybF9leGVjKCRjaCk7fQpmdW5jdGlvbiB4KCRhd2FsLCRha2hpciwkcmVzLCRubyl7JGRhdGEgPSBleHBsb2RlKCRhd2FsLGV4cGxvZGUoJGFraGlyLCRyZXMpWyRub10pWzBdO3JldHVybiAkZGF0YTt9CgpmdW5jdGlvbiBTbG93KCRtc2cpeyRzbG93ID0gc3RyX3NwbGl0KCRtc2cpO2ZvcmVhY2goICRzbG93IGFzICRzbG93bW8gKXsgZWNobyAkc2xvd21vOyB1c2xlZXAoMTAwMCk7fX0JCgoKYXdhbGFuOiRkID0gZGF0ZSgnRCcpOwpzd2l0Y2goJGQpewpjYXNlICJTYXQiOgokcHcgPSAiNjY2NTU2NTQzMzMzMzQzMzMiOwokbGluayA9ICJodHRwczovL2N1dHkuaW8vb1RJU0kiOwokbGluazIgPSAiaHR0cHM6Ly9jYXJhcmVnaXN0cmFzaS5jb20vbTV5alp1TW9WIjsKYnJlYWs7CmNhc2UgIlRodSI6CiRwdyA9ICI0NTQ0NDMzMzQzMzMyMjIiOwokbGluayA9ICJodHRwczovL2N1dHkuaW8vSXlVQU9QZkEiOwokbGluazIgPSAiaHR0cHM6Ly9jYXJhcmVnaXN0cmFzaS5jb20vQ2NoaHlVaUNhUiI7CmJyZWFrOwpjYXNlICJGcmkiOgokcHcgPSAiMDg4NjU0NDQ2NDQ1NTUiOwokbGluayA9ICJodHRwczovL2N1dHkuaW8vaUNVbSI7CiRsaW5rMiA9ICJodHRwczovL2NhcmFyZWdpc3RyYXNpLmNvbS9aUDYwdHByTTgiOwpicmVhazsKY2FzZSAiTW9uIjoKJHB3ID0gIjMyMjM1NTY2NDM1NTMiOwokbGluayA9ICJodHRwczovL2N1dHkuaW8vQjUwWEoiOwokbGluazIgPSAiaHR0cHM6Ly9jYXJhcmVnaXN0cmFzaS5jb20vREZOQzg4OTUyIjsKYnJlYWs7CmNhc2UgIlR1ZSI6CiRwdyA9ICIyMzMzMjMzMjIzMzMzMyI7CiRsaW5rID0gImh0dHBzOi8vY3V0eS5pby9tNm9VS2VvZkJUIjsKJGxpbmsyID0gImh0dHBzOi8vY2FyYXJlZ2lzdHJhc2kuY29tLzl1ZGdWYVNscSI7CmJyZWFrOwpjYXNlICJXZWQiOgokcHcgPSAiNzc2NTY3ODg2NTY0IjsKJGxpbmsgPSAiaHR0cHM6Ly9jdXR5LmlvL2RPQ0xXbkhERyI7CiRsaW5rMiA9ICJodHRwczovL2NhcmFyZWdpc3RyYXNpLmNvbS9EdnJsMnNhIjsKYnJlYWs7CmNhc2UgIlN1biI6CiRwdyA9ICIzMzIyMjQ1NjY1NDMiOwokbGluayA9ICJodHRwczovL2N1dHkuaW8vM2UwcTlRNSI7CiRsaW5rMiA9ICJodHRwczovL2NhcmFyZWdpc3RyYXNpLmNvbS9GMExPVmxLcnlmMSI7CmJyZWFrOwpkZWZhdWx0OgokcHcgPSAiZTliNTY1ZjhkM2IyNTU3OTZmMWZmYTUxMjBhYjM1ODUiOwokbGluayA9ICJodHRwczovL3BvbnNlbGhhcmlhbi5jb20vdVo2TGxxcWlrNSI7CiRsaW5rMiA9ICJodHRwczovL2NhcmFyZWdpc3RyYXNpLmNvbS9Oc0hZTUMwUGxvRSI7CmJyZWFrOwp9CiRyZWFkID0gZmlsZV9nZXRfY29udGVudHMoJ2tleV9iaXRjb2ludHJpY2tzLnR4dCcpOwppZigkcmVhZCAhPSAkcHcpewpibjEoKTsgCmVjaG8gIiBcMDMzWzE7MzJtIFBhc3N3b3JkICBcMDMzWzE7MzJtOiBcMDMzWzE7OTdtJGxpbmtcbiI7CiRwID0gcmVhZGxpbmUoIiBcMDMzWzE7MzJtSW5wdXQgUGFzc3dvcmQgXDAzM1sxOzMybTogXDAzM1sxOzk3bSIpOwppZigkcCA9PSAkcHcpewpibjEoKTsKbG9hZCgkcCwgJ2tleV9iaXRjb2ludHJpY2tzLnR4dCcpOwplY2hvICIgXDAzM1sxOzMybVBhc3N3b3JkIGNvcnJlY3Qg4oia4oiaIFxuIjsKc2xlZXAoMSk7CmdvdG8gYXdhbGFuOwp9ZWxzZXsKYm4xKCk7CmVjaG8gIiBcMDMzWzE7MzFtV3JvbmcgUGFzc3dvcmQsIFBsZWFzZSBJbnB1dCBhZ2FpbiFcbiI7CnNsZWVwKDEpOwpnb3RvIGF3YWxhbjsKfX1lbHNle31TeXN0ZW0oImNsZWFyIik7CgogZnVuY3Rpb24gdG1yKCR0bWVyKXskY29sb3IgPSBhcnJheSgiXDAzM1sxOzM3bSIsIlwwMzNbMDszMW0iLCJcMDMzWzA7MzNtIiwiXDAzM1swOzMybSIsIlwwMzNbMDszNG0iLCJcMDMzWzA7MzVtIik7JHRpbWVyPXRpbWUoKSskdG1lcjt3aGlsZSh0cnVlKTplY2hvIlxyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHIiOyRyZXM9JHRpbWVyLXRpbWUoKTsgaWYoJHJlcyA8IDEpe2JyZWFrO30kdG0gPSAgZGF0ZSgnIGk6cyAnLCRyZXMpO2VjaG8iIFwwMzNbMTszN20gWyIuJGNvbG9yW3JhbmQoMCxjb3VudCgkY29sb3IpLTEpXS4kdG0uIlwwMzNbMTszN21dIjtzbGVlcCgxKTtlbmR3aGlsZTt9CmZ1bmN0aW9uIGJhc2U2NCgkc3RyKXtyZXR1cm4gYmFzZTY0X2VuY29kZSgkc3RyKTt9CmZ1bmN0aW9uIGdldCgkdXJsKXtyZXR1cm4gY3VybCgkdXJsLCBudWxsLCBoZWFkKCkpWzFdO30KZnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkZGF0YSwgaGVhZCgpKVsxXTt9CmZ1bmN0aW9uIGdldHNvbHZlKCRzb2wpe3JldHVybiBjdXJsKCRzb2wsIG51bGwsIHNvbHZlKCkpWzFdO30KZnVuY3Rpb24gYW5zd2VyKCR4LCR5LCR6KXtpZigkeCArICR5ID09ICR6KXtyZXR1cm4gImFkZCI7fWVsc2VpZigkeCAtICR5ID09ICR6KXtyZXR1cm4gInN1YiI7fWVsc2VpZigkeCAqICR5ID09ICR6KXtyZXR1cm4gIm11bHRpcGx5Ijt9ZWxzZWlmKCR4ICUgJHkpe3JldHVybiAiZGl2aWRlIjt9ZWxzZXtyZXR1cm4gMDt9fQpmdW5jdGlvbiBjdXJsKCR1cmwsICRwb3N0ID0gMCwgJGh0dHBoZWFkZXIgPSAwLCAkcHJveHkgPSAwKXsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7CiAgICAgICAvLyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFRklMRSwiY29va2llLnR4dCIpOwogICAgICAvLyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFSkFSLCJjb29raWUudHh0Iik7CiAgICAgICAgaWYoJHBvc3QpewogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAkcG9zdCk7CiAgICAgICAgfQogICAgICAgIGlmKCRodHRwaGVhZGVyKXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRodHRwaGVhZGVyKTsKICAgICAgICB9CiAgICAgICAgaWYoJHByb3h5KXsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBQUk9YWVRVTk5FTCwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QUk9YWSwgJHByb3h5KTsKICAgICAgICAgICAgLy8gY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BST1hZVFlQRSwgQ1VSTFBST1hZX1NPQ0tTNSk7CiAgICAgICAgfQogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IRUFERVIsIHRydWUpOwogICAgICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgICAgICRodHRwY29kZSA9IGN1cmxfZ2V0aW5mbygkY2gpOwogICAgICAgIGlmKCEkaHR0cGNvZGUpIHJldHVybiAiQ3VybCBFcnJvciA6ICIuY3VybF9lcnJvcigkY2gpOyBlbHNlewogICAgICAgICAgICAkaGVhZGVyID0gc3Vic3RyKCRyZXNwb25zZSwgMCwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAgICAgJGJvZHkgPSBzdWJzdHIoJHJlc3BvbnNlLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7CiAgICAgICAgICAgIHJldHVybiBhcnJheSgkaGVhZGVyLCAkYm9keSk7CiAgICAgICAgfQogICAgfQpmdW5jdGlvbiBoKCl7CiR1YVtdPSJIb3N0OiBsdWNreWRpY2UubmV0IjsKJHVhW109IkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCI7CiR1YVtdPSJyZWZlcmVyOmh0dHBzOi8vbHVja3lkaWNlLm5ldC9mYXVjZXQiOwokdWFbXT0iVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMSI7CiR1YVtdPSJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4xLjI7IFJlZG1pIDRBIEJ1aWxkL04yRzQ3SCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzY2LjAuMzM1OS4xNTggTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXT0ieC1yZXF1ZXN0ZWQtd2l0aDogWE1MSHR0cFJlcXVlc3QiOwogIHJldHVybiAkdWE7Cn0KCmZ1bmN0aW9uIHNvbHZlKCl7CiR1YVtdPSJIb3N0OiBhcGktc2VjdXJlLnNvbHZlbWVkaWEuY29tIjsKJHVhW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJHVhW109ImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogcmV0dXJuICR1YTsKfQpmdW5jdGlvbiB2MygpewokaFtdPSJIb3N0OiB3d3cuZ29vZ2xlLmNvbSI7CiRoW109InVzZXItYWdlbnQ6ICIuZmlsZV9nZXRfY29udGVudHMoInVzZXItYWdlbnQiKTsKJGhbXT0iY29va2llOiAiLmZpbGVfZ2V0X2NvbnRlbnRzKCJjb29raWVfYW5zaG9yIik7CiRoW109InJlZmVyZXI6aHR0cHM6Ly9lYXJuZG9nZS54eXovIjsKICAgIHJldHVybiAkaDsKICAgIH0KZnVuY3Rpb24gcmV2MygpewokYWNyID1maWxlX2dldF9jb250ZW50cygidXJsX2Fuc2hvciIpOwokY29yPWV4cGxvZGUoJyYnLGV4cGxvZGUoJyZrPScsJGFjcilbMV0pWzBdOwokayA9IGV4cGxvZGUoIiYiLCRhY3IpWzFdOwokY28gPSBleHBsb2RlKCImIiwkYWNyKVsyXTsKJHYgPSBleHBsb2RlKCImIiwkYWNyKVs0XTsKJHYzID0gY3VybCgkYWNyLCBudWxsLHYzKCkpWzFdOwokdjN0b2tlbiA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ2lkPSJyZWNhcHRjaGEtdG9rZW4iIHZhbHVlPSInLCR2MylbMV0pWzBdOwokYWNyMiA9ICJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyL3JlbG9hZD9rPSRjb3IiOwokZGF0YSA9ICIkdiZyZWFzb249cSZjPSR2M3Rva2VuJiR2JiRjbyI7CiR2M192ZXJpZiA9IGN1cmwoJGFjcjIsICRkYXRhLCB2MygpKVsxXTsKJHYzMSA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJyJycmVzcCIsIicsJHYzX3ZlcmlmKVsxXSlbMF07CiByZXR1cm4gJHYzMTsKIH0KCgoKZnVuY3Rpb24gY2FwdGNoYSgpewokZ21iYXI9ZmlsZV9nZXRfY29udGVudHMoJ2ltYWdlLmpwZycpOwokYmFzZT1iYXNlNjQoJGdtYmFyKTsKJHVhID0gYXJyYXkoKTsKJHVhW10gPSAiVXNlci1BZ2VudDogTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyBSTVgzMTkxIEJ1aWxkL1JQMUEuMjAwNzIwLjAxMTspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS85OC4wLjQ3NTguODcgTW9iaWxlIFNhZmFyaS81MzcuMzYiOwokdWFbXSA9ICJjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2pzb24iOwokY2ggPSBjdXJsX2luaXQoKTsKY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgImh0dHBzOi8vdmlzaW9uLmdvb2dsZWFwaXMuY29tL3YxL2ltYWdlczphbm5vdGF0ZT9rZXk9QUl6YVN5QzN5LUVtNDJodFNCOFVFWlBxcHRKNzhybHZMNThfaDZZIik7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCAkdWEpOwpjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgMSk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7CmN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAneyJyZXF1ZXN0cyI6W3siaW1hZ2UiOnsiY29udGVudCI6IicuJGJhc2UuJyJ9LCJmZWF0dXJlcyI6W3sidHlwZSI6IlRFWFRfREVURUNUSU9OIn1dfV19Jyk7CiRyZXMgPSBjdXJsX2V4ZWMoJGNoKTsKJHZhcjE9IGV4cGxvZGUoJyJ0ZXh0IjogIkVudGVyIHRoZSBmb2xsb3dpbmc6XG4nLCAkcmVzKTsKJHZhcjIgPSBleHBsb2RlKCdcbiInLCAkdmFyMVsxXSk7CiR2YXIzID0gJHZhcjJbMF07CiRjYXA9c3RyX3JlcGxhY2UoJ1xuJywnICcsJHZhcjMpOwokY2FwY2hhID0gcHJlZ19yZXBsYWNlKCIvW15hLXpdLyIsICIiLCAkY2FwKTsKcmV0dXJuICRjYXBjaGE7Cn0KZnVuY3Rpb24geXkoKXsKJHVybD1maWxlX2dldF9jb250ZW50cygic29sdmUiKTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRzb2w9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwoKJGNhcD1jYXB0Y2hhKCk7Cn0KZnVuY3Rpb24gYm90KCR4LCR5LCR6KXtyZXR1cm4gWyIrIi4keS4iKyIuJHouIisiLiR4LCIrIi4keC4iKyIuJHkuIisiLiR6LCIrIi4keC4iKyIuJHouIisiLiR5LCIrIi4keS4iKyIuJHguIisiLiR6LCIrIi4kei4iKyIuJHkuIisiLiR4LCIrIi4kei4iKyIuJHguIisiLiR5XTt9CgoKZnVuY3Rpb24gYm4xKCl7CnN5c3RlbSgiY2xlYXIiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAplY2hvIGZhc3QoIiAgXDAzM1sxOzk3bURhdGUgOiIuZGF0ZSgiIEQgbSBZICIpKTsKZWNobyBmYXN0KCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwwMzNbMTs5N21UaW1lIDoiLmRhdGUoIiBIOmk6cyAiKSk7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bVxu4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICBfXyAgIF9fX19fX18gICAgICAgICBfX19fX18gICAgICAgICAgXyAgICAgICAgICAgICAgICAgIFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzMxbSAgICAgXCBcIC8gLyAgX18gXCAgICAgICB8ICBfX19ffCAgICAgICAgfCB8ICAgICAgICAgICAgICAgICBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTszMW0gICAgICBcIFYgL3wgfCAgfCB8X19fX19ffCB8X18gX18gXyBfIF9fIHwgfF8gX18gXyBfX18gXyAgIF8gXG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7MzFtICAgICAgID4gPCB8IHwgIHwgfF9fX19fX3wgIF9fLyBfYCB8ICdfIFx8IF9fLyBfYCAvIF9ffCB8IHwgfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgIC8gLiBcfCB8X198IHwgICAgICB8IHwgfCAoX3wgfCB8IHwgfCB8fCAoX3wgXF9fIFwgfF98IHxcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N20gICAgIC9fLyBcX1xfX19fXy8gICAgICAgfF98ICBcX18sX3xffCB8X3xcX19cX18sX3xfX18vXF9fLCB8XG4iKTsKZWNobyBmYXN0KCJcMDMzWzE7OTdtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfXy8gfFxuIik7CmVjaG8gZmFzdCgiXDAzM1sxOzk3bSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8X19fLyBcbiIpOwplY2hvIGZhc3QoIlwwMzNbMTs5N21cbuKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIik7fQogICAgZnVuY3Rpb24gYm4yKCl7CiAKZmFzdCggIlwzM1szMTsxbeKWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIi4kZW5kKTtmYXN0KCAiXDMzWzMyOzFtICBb4pyTXSBDUkVBVE9SICAgOlxlWzE7MzdtIE1TS1xuIi4kZW5kKTsKZmFzdCggIlwzM1szMTsxbeKVmuKWiOKWiOKVl+KWiOKWiOKVlOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBUSEFOS1MgVE8gOlxlWzE7MzdtIFRIRSBPTkUgQUxNSUdIVFkgR09EXG4iLiRlbmQpOwpmYXN0KCAiIFwzM1szMTsxbeKVmuKWiOKWiOKWiOKVlOKVnSDilojilojilZEgIOKWiOKWiOKVkSIuJGVuZCk7ZmFzdCggIlwzM1szMjsxbSBb4pyTXSBTVVBQT1JUICAgOlxlWzE7MzdtIEFMTCBURUFNIFhELUZBTlRBU1lcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3bSDilojilojilZTilojilojilZcg4paI4paI4pWRICDilojilojilZEiLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU1VQUE9SVCAgIDpcZVsxOzM3bSBCQUJZQk9UIENIQU5ORUxcbiIuJGVuZCk7CmZhc3QoICJcZVsxOzM3beKWiOKWiOKVlOKVnSDilojilojilZfilojilojilojilojilojilojilZTilZ0iLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gW+Kck10gU0NSSVBUICAgIDpcZVsxOzM3bSBiaXRjb2ludHJpY2tzLmNvbVxuIi4kZW5kKTsKZmFzdCggIlxlWzE7Mzdt4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZ0iLiRlbmQpO2Zhc3QoICJcMzNbMzI7MW0gIFvinJNdIFZFUlNJT04gICA6XGVbMTszN20gMS4wXG4iLiRlbmQpOyAgCmdhcmlzKCk7CmZhc3QoInskbWVyYWh94pyTIFdBUk5JTkchIFBST0dSQU0gSUxFR0FMIFNFR0FMQSBSRVNJS08gREkgVEFOR0dVTkcgU0VORElSSVxuIik7CmdhcmlzKCk7fQovKiBFTkQgRlVOQ1RJT04gKi8KCgpmdW5jdGlvbiBoZWFkKCl7CiR1YT1hcnJheSgiSG9zdDogYml0Y29pbnRyaWNrcy5jb20iLCJ4LXJlcXVlc3RlZC13aXRoOiBYTUxIdHRwUmVxdWVzdCIsIkNvb2tpZTogIi5qc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cygiYml0Y29pbnRyaWNrcy5qc29uIiksdHJ1ZSlbImNvb2tpZSJdLCJVc2VyLUFnZW50OiAiLmpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCJiaXRjb2ludHJpY2tzLmpzb24iKSx0cnVlKVsiVXNlciJdKTsKcmV0dXJuICR1YTsKfQpyOgppZighZmlsZV9leGlzdHMoImJpdGNvaW50cmlja3MuanNvbiIpKXsKd2hpbGUoInRydWUiKXsKc3lzdGVtKCJjbGVhciIpOwpibjEoKTsKJGFwaVsiY29va2llIl09cmVhZGxpbmUoIlwwMzNbMTs5N21JbnB1dCBZb3VyIENvb2tpZTogXDAzM1sxOzkybSIpOwppZigkYXBpWyJjb29raWUiXSE9IiIpewpicmVhazt9fQp3aGlsZSgidHJ1ZSIpewpzeXN0ZW0oImNsZWFyIik7CmJuMSgpOwokYXBpWyJVc2VyIl09cmVhZGxpbmUoIlwwMzNbMTs5N21JbnB1dCBZb3VyIFVzZXItQWdlbnQgOiBcMDMzWzE7OTJtIik7CmlmKCRhcGlbIlVzZXIiXSE9IiIpewpicmVhazt9fQp3aGlsZSgidHJ1ZSIpewpzeXN0ZW0oImNsZWFyIik7CmJuMSgpOwokYXBpWyJ1cmxfc29sdmUiXT1yZWFkbGluZSgiXDAzM1sxOzk3bUlucHV0IFlvdXIgdXJsX3NvbHZlOiBcMDMzWzE7OTJtIik7CmlmKCRhcGlbInVybF9zb2x2ZSJdIT0iIil7CmJyZWFrO319CgoKc2F2ZSgiYml0Y29pbnRyaWNrcy5qc29uIiwkYXBpKTt9CgpmdW5jdGlvbiBzYXZlKCRkYXRhLCRkYXRhX3Bvc3Qpe2lmKCFmaWxlX2dldF9jb250ZW50cygkZGF0YSkpe2ZpbGVfcHV0X2NvbnRlbnRzKCRkYXRhLCJbXSIpO30kanNvbj1qc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cygkZGF0YSksMSk7JGFycj1hcnJheV9tZXJnZSgkanNvbiwkZGF0YV9wb3N0KTtmaWxlX3B1dF9jb250ZW50cygkZGF0YSxqc29uX2VuY29kZSgkYXJyLEpTT05fUFJFVFRZX1BSSU5UKSk7fQpzeXN0ZW0oImNsZWFyIik7CgoKYm4yKCk7CgokcmVzID0gZ2V0KCJodHRwczovL2JpdGNvaW50cmlja3MuY29tLz9wYWdlPWZhdWNldCIpOwokdmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnZGl2IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxiPicsJHJlcylbMV0pWzBdOwokYmFsID0gZXhwbG9kZSgiPCIsZXhwbG9kZSgnZGl2IGNsYXNzPSJ0ZXh0LXByaW1hcnkiPjxiPicsJHJlcylbMV0pWzBdOwoKCmVjaG8gIiR3aGl0ZSBCYWxhbmNlICRrdW5pbmcgfj4kcmVkICRiYWwgLyAkdmFsIi4kZW5kLiJcbiI7CmdhcmlzKCk7Cm1lbnU6CmVjaG8gU2xvdygiICRyZWR7MX0kaGlqYXUgQnlwYXNzIEZhdWNldCR5ZWxsb3cgICIuJGVuZC4iXG4iKTsKZWNobyBTbG93KCIgJHJlZHsyfSRoaWphdSBVcGRhdGUgQ29va2llJHllbGxvdyAgIi4kZW5kLiJcbiIpOwokcGlsaWggPSByZWFkbGluZSgiJHdoaXRlIElucHV0IE51bWJlciA6ICIpOwpnYXJpcygpOwppZigkcGlsaWggPT0gMSl7CmdvdG8gbWFudWFsOwp9ZWxzZWlmKCRwaWxpaCA9PSAyKXsKZ290byB1cGRhdGU7Cn1lbHNlewplY2hvICIkcmVkIEJhZCBTZWxlY3QgTnVtYmVyISBcciI7CnNsZWVwKDIpOwpnb3RvIG1lbnU7Cn0KCgoKCm1hbnVhbDoKd2hpbGUodHJ1ZSl7CgoKJHJlcyA9IGdldCgiaHR0cHM6Ly9iaXRjb2ludHJpY2tzLmNvbS8/cGFnZT1mYXVjZXQiKTsKJHRrID0gZXhwbG9kZSgiJyIsZXhwbG9kZSgidmFyIHRva2VuID0gJyIsJHJlcylbMV0pWzBdOwoKJHRpbWUgPSBleHBsb2RlKCdtaW51dGVzJyxleHBsb2RlKCc8c3BhbiBpZD0iY2xhaW1UaW1lIj4nLCRyZXMpWzFdKVswXTsKaWYoJHRpbWUpewp0bXIoOTAwKTsKfQoKCiR1cmw9anNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImJpdGNvaW50cmlja3MuanNvbiIpLHRydWUpWyJ1cmxfc29sdmUiXTsKJHJlcz1jdXJsKCR1cmwsJycsc29sdmUoKSlbMV07CiRjaGFsbGVuZ2U9ZXhwbG9kZSgnIicsZXhwbG9kZSgnImNoYWxsZW5nZSI6IicsJHJlcylbMV0pWzBdOwokdXJsPSJodHRwczovL2FwaS1zZWN1cmUuc29sdmVtZWRpYS5jb20vcGFwaS9tZWRpYT9jPSRjaGFsbGVuZ2U7dz0zMDA7aD0xNTA7Zmc9MDAwMDAwO2JnPWY4ZjhmOCI7CiRyZXM9Y3VybCgkdXJsLCcnLHNvbHZlKCkpWzFdOwpsb2FkKCRyZXMsJ2ltYWdlLmpwZycpOwokY2FwPWNhcHRjaGEoKTsKCmlmKCRjYXAhPSIiKXsKZWNobyBTbG93KCJ7JG1lcmFofSAgZ2V0IHNvbHZlICAgICAgICAgICAgICAgICAgICAgICBcciIpOyAKc2xlZXAoMSk7CgokZGF0YSA9ICJhPWdldEZhdWNldCZ0b2tlbj0kdGsmY2FwdGNoYT0wJmNoYWxsZW5nZT0kY2hhbGxlbmdlJnJlc3BvbnNlPSRjYXAiOwokcmVzID0gcG9zdCgiaHR0cHM6Ly9iaXRjb2ludHJpY2tzLmNvbS9zeXN0ZW0vYWpheC5waHAiLCRkYXRhKTsKJHN1Yz1leHBsb2RlKCchPCcsZXhwbG9kZSgiQ29uZ3JhdHVsYXRpb25zLCAiLCRyZXMpWzFdKVswXTsKJHN0cz1leHBsb2RlKCc8L2Rpdj4nLGV4cGxvZGUoJzxkaXYgY2xhc3M9ImFsZXJ0IHRleHQtY2VudGVyIGFsZXJ0LWRhbmdlciI+PGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGUiPjwvaT4gJywkcmVzKVsxXSlbMF07CmlmKCRzdWMpewokcmVzID0gZ2V0KGRhc2gpOwokdXNlcm5hbWUgPSBleHBsb2RlKCI8IixleHBsb2RlKCc8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNSB0ZXh0LXRydW5jYXRlIj4nLCRyZXMpWzFdKVswXTsKJGJhbCA9IGV4cGxvZGUoIjwiLGV4cGxvZGUoJzxoNCBjbGFzcz0ibWItMCI+JywkcmVzKVsxXSlbMF07CiRyZXMgPSBnZXQoImh0dHBzOi8vYml0Y29pbnRyaWNrcy5jb20vP3BhZ2U9ZmF1Y2V0Iik7CiR2YWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdkaXYgY2xhc3M9InRleHQtc3VjY2VzcyI+PGI+JywkcmVzKVsxXSlbMF07CiRiYWwgPSBleHBsb2RlKCI8IixleHBsb2RlKCdkaXYgY2xhc3M9InRleHQtcHJpbWFyeSI+PGI+JywkcmVzKVsxXSlbMF07CgplY2hvIFNsb3coIiRoaWphdSA+XyAkZ3B1dGloICRzdWMgJGVuZFxuIik7CmVjaG8gIiR3aGl0ZSA+XyBCYWxhbmNlICRrdW5pbmcgfj4kcmVkICRiYWwgLyAkdmFsIi4kZW5kLiJcbiI7CmdhcmlzKCk7CmdvdG8gbWFudWFsOwp9ZWxzZXsKfX1lbHNleyAKZWNobyBTbG93KCJcMDMzWzE7MzFtICBXYWl0Li4uLi4uISAgICAgICAgICAgICAgICAgICAgICAgXHIiKTsgCnNsZWVwKDEpO30KCn0KCnVwZGF0ZToKJGFwaVsiY29va2llIl09cmVhZGxpbmUoIlwwMzNbMTs5N21JbnB1dCBZb3VyIENvb2tpZTogXDAzM1sxOzkybSIpOwokYXBpWyJVc2VyIl07CiRhcGlbInVybF9zb2x2ZSJdOwpzYXZlKCJiaXRjb2ludHJpY2tzLmpzb24iLCRhcGkpOwpnb3RvIHI7CgoK",
"payfaucetbr":"",
"gwaher";""}}
